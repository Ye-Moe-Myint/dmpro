{"ast":null,"code":"module.exports = exports = build;\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('graceful-fs'),\n  rm = require('rimraf'),\n  path = require('path'),\n  glob = require('glob'),\n  log = require('npmlog'),\n  which = require('which'),\n  exec = require('child_process').exec,\n  processRelease = require('./process-release'),\n  win = process.platform === 'win32';\nexports.usage = 'Invokes `' + (win ? 'msbuild' : 'make') + '` and builds the module';\nfunction build(gyp, argv, callback) {\n  var platformMake = 'make';\n  if (process.platform === 'aix') {\n    platformMake = 'gmake';\n  } else if (process.platform.indexOf('bsd') !== -1) {\n    platformMake = 'gmake';\n  } else if (win && argv.length > 0) {\n    argv = argv.map(function (target) {\n      return '/t:' + target;\n    });\n  }\n  var release = processRelease(argv, gyp, process.version, process.release),\n    makeCommand = gyp.opts.make || process.env.MAKE || platformMake,\n    command = win ? 'msbuild' : makeCommand,\n    buildDir = path.resolve('build'),\n    configPath = path.resolve(buildDir, 'config.gypi'),\n    jobs = gyp.opts.jobs || process.env.JOBS,\n    buildType,\n    config,\n    arch,\n    nodeDir;\n  loadConfigGypi();\n\n  /**\n   * Load the \"config.gypi\" file that was generated during \"configure\".\n   */\n\n  function loadConfigGypi() {\n    fs.readFile(configPath, 'utf8', function (err, data) {\n      if (err) {\n        if (err.code == 'ENOENT') {\n          callback(new Error('You must run `node-gyp configure` first!'));\n        } else {\n          callback(err);\n        }\n        return;\n      }\n      config = JSON.parse(data.replace(/\\#.+\\n/, ''));\n\n      // get the 'arch', 'buildType', and 'nodeDir' vars from the config\n      buildType = config.target_defaults.default_configuration;\n      arch = config.variables.target_arch;\n      nodeDir = config.variables.nodedir;\n      if ('debug' in gyp.opts) {\n        buildType = gyp.opts.debug ? 'Debug' : 'Release';\n      }\n      if (!buildType) {\n        buildType = 'Release';\n      }\n      log.verbose('build type', buildType);\n      log.verbose('architecture', arch);\n      log.verbose('node dev dir', nodeDir);\n      if (win) {\n        findSolutionFile();\n      } else {\n        doWhich();\n      }\n    });\n  }\n\n  /**\n   * On Windows, find the first build/*.sln file.\n   */\n\n  function findSolutionFile() {\n    glob('build/*.sln', function (err, files) {\n      if (err) return callback(err);\n      if (files.length === 0) {\n        return callback(new Error('Could not find *.sln file. Did you run \"configure\"?'));\n      }\n      guessedSolution = files[0];\n      log.verbose('found first Solution file', guessedSolution);\n      doWhich();\n    });\n  }\n\n  /**\n   * Uses node-which to locate the msbuild / make executable.\n   */\n\n  function doWhich() {\n    // First make sure we have the build command in the PATH\n    which(command, function (err, execPath) {\n      if (err) {\n        if (win && /not found/.test(err.message)) {\n          // On windows and no 'msbuild' found. Let's guess where it is\n          findMsbuild();\n        } else {\n          // Some other error or 'make' not found on Unix, report that to the user\n          callback(err);\n        }\n        return;\n      }\n      log.verbose('`which` succeeded for `' + command + '`', execPath);\n      doBuild();\n    });\n  }\n\n  /**\n   * Search for the location of \"msbuild.exe\" file on Windows.\n   */\n\n  function findMsbuild() {\n    if (config.variables.msbuild_path) {\n      command = config.variables.msbuild_path;\n      log.verbose('using MSBuild:', command);\n      doBuild();\n      return;\n    }\n    log.verbose('could not find \"msbuild.exe\" in PATH - finding location in registry');\n    var notfoundErr = 'Can\\'t find \"msbuild.exe\". Do you have Microsoft Visual Studio C++ 2008+ installed?';\n    var cmd = 'reg query \"HKLM\\\\Software\\\\Microsoft\\\\MSBuild\\\\ToolsVersions\" /s';\n    if (process.arch !== 'ia32') cmd += ' /reg:32';\n    exec(cmd, function (err, stdout, stderr) {\n      if (err) {\n        return callback(new Error(err.message + '\\n' + notfoundErr));\n      }\n      var reVers = /ToolsVersions\\\\([^\\\\]+)$/i,\n        rePath = /\\r\\n[ \\t]+MSBuildToolsPath[ \\t]+REG_SZ[ \\t]+([^\\r]+)/i,\n        msbuilds = [],\n        r,\n        msbuildPath;\n      stdout.split('\\r\\n\\r\\n').forEach(function (l) {\n        if (!l) return;\n        l = l.trim();\n        if (r = reVers.exec(l.substring(0, l.indexOf('\\r\\n')))) {\n          var ver = parseFloat(r[1], 10);\n          if (ver >= 3.5) {\n            if (r = rePath.exec(l)) {\n              msbuilds.push({\n                version: ver,\n                path: r[1]\n              });\n            }\n          }\n        }\n      });\n      msbuilds.sort(function (x, y) {\n        return x.version < y.version ? -1 : 1;\n      });\n      (function verifyMsbuild() {\n        if (!msbuilds.length) return callback(new Error(notfoundErr));\n        msbuildPath = path.resolve(msbuilds.pop().path, 'msbuild.exe');\n        fs.stat(msbuildPath, function (err, stat) {\n          if (err) {\n            if (err.code == 'ENOENT') {\n              if (msbuilds.length) {\n                return verifyMsbuild();\n              } else {\n                callback(new Error(notfoundErr));\n              }\n            } else {\n              callback(err);\n            }\n            return;\n          }\n          command = msbuildPath;\n          doBuild();\n        });\n      })();\n    });\n  }\n\n  /**\n   * Actually spawn the process and compile the module.\n   */\n\n  function doBuild() {\n    // Enable Verbose build\n    var verbose = log.levels[log.level] <= log.levels.verbose;\n    if (!win && verbose) {\n      argv.push('V=1');\n    }\n    if (win && !verbose) {\n      argv.push('/clp:Verbosity=minimal');\n    }\n    if (win) {\n      // Turn off the Microsoft logo on Windows\n      argv.push('/nologo');\n    }\n\n    // Specify the build type, Release by default\n    if (win) {\n      var archLower = arch.toLowerCase();\n      var p = archLower === 'x64' ? 'x64' : archLower === 'arm' ? 'ARM' : 'Win32';\n      argv.push('/p:Configuration=' + buildType + ';Platform=' + p);\n      if (jobs) {\n        var j = parseInt(jobs, 10);\n        if (!isNaN(j) && j > 0) {\n          argv.push('/m:' + j);\n        } else if (jobs.toUpperCase() === 'MAX') {\n          argv.push('/m:' + require('os').cpus().length);\n        }\n      }\n    } else {\n      argv.push('BUILDTYPE=' + buildType);\n      // Invoke the Makefile in the 'build' dir.\n      argv.push('-C');\n      argv.push('build');\n      if (jobs) {\n        var j = parseInt(jobs, 10);\n        if (!isNaN(j) && j > 0) {\n          argv.push('--jobs');\n          argv.push(j);\n        } else if (jobs.toUpperCase() === 'MAX') {\n          argv.push('--jobs');\n          argv.push(require('os').cpus().length);\n        }\n      }\n    }\n    if (win) {\n      // did the user specify their own .sln file?\n      var hasSln = argv.some(function (arg) {\n        return path.extname(arg) == '.sln';\n      });\n      if (!hasSln) {\n        argv.unshift(gyp.opts.solution || guessedSolution);\n      }\n    }\n    var proc = gyp.spawn(command, argv);\n    proc.on('exit', onExit);\n  }\n\n  /**\n   * Invoked after the make/msbuild command exits.\n   */\n\n  function onExit(code, signal) {\n    if (code !== 0) {\n      return callback(new Error('`' + command + '` failed with exit code: ' + code));\n    }\n    if (signal) {\n      return callback(new Error('`' + command + '` got signal: ' + signal));\n    }\n    callback();\n  }\n}","map":{"version":3,"names":["module","exports","build","fs","require","rm","path","glob","log","which","exec","processRelease","win","process","platform","usage","gyp","argv","callback","platformMake","indexOf","length","map","target","release","version","makeCommand","opts","make","env","MAKE","command","buildDir","resolve","configPath","jobs","JOBS","buildType","config","arch","nodeDir","loadConfigGypi","readFile","err","data","code","Error","JSON","parse","replace","target_defaults","default_configuration","variables","target_arch","nodedir","debug","verbose","findSolutionFile","doWhich","files","guessedSolution","execPath","test","message","findMsbuild","doBuild","msbuild_path","notfoundErr","cmd","stdout","stderr","reVers","rePath","msbuilds","r","msbuildPath","split","forEach","l","trim","substring","ver","parseFloat","push","sort","x","y","verifyMsbuild","pop","stat","levels","level","archLower","toLowerCase","p","j","parseInt","isNaN","toUpperCase","cpus","hasSln","some","arg","extname","unshift","solution","proc","spawn","on","onExit","signal"],"sources":["/Users/lieo/diabetes/CUT2DMTest/node_modules/node-gyp/lib/build.js"],"sourcesContent":["\nmodule.exports = exports = build\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('graceful-fs')\n  , rm = require('rimraf')\n  , path = require('path')\n  , glob = require('glob')\n  , log = require('npmlog')\n  , which = require('which')\n  , exec = require('child_process').exec\n  , processRelease = require('./process-release')\n  , win = process.platform === 'win32'\n\nexports.usage = 'Invokes `' + (win ? 'msbuild' : 'make') + '` and builds the module'\n\nfunction build (gyp, argv, callback) {\n  var platformMake = 'make'\n  if (process.platform === 'aix') {\n    platformMake = 'gmake'\n  } else if (process.platform.indexOf('bsd') !== -1) {\n    platformMake = 'gmake'\n  } else if (win && argv.length > 0) {\n    argv = argv.map(function(target) {\n      return '/t:' + target\n    })\n  }\n\n  var release = processRelease(argv, gyp, process.version, process.release)\n    , makeCommand = gyp.opts.make || process.env.MAKE || platformMake\n    , command = win ? 'msbuild' : makeCommand\n    , buildDir = path.resolve('build')\n    , configPath = path.resolve(buildDir, 'config.gypi')\n    , jobs = gyp.opts.jobs || process.env.JOBS\n    , buildType\n    , config\n    , arch\n    , nodeDir\n\n  loadConfigGypi()\n\n  /**\n   * Load the \"config.gypi\" file that was generated during \"configure\".\n   */\n\n  function loadConfigGypi () {\n    fs.readFile(configPath, 'utf8', function (err, data) {\n      if (err) {\n        if (err.code == 'ENOENT') {\n          callback(new Error('You must run `node-gyp configure` first!'))\n        } else {\n          callback(err)\n        }\n        return\n      }\n      config = JSON.parse(data.replace(/\\#.+\\n/, ''))\n\n      // get the 'arch', 'buildType', and 'nodeDir' vars from the config\n      buildType = config.target_defaults.default_configuration\n      arch = config.variables.target_arch\n      nodeDir = config.variables.nodedir\n\n      if ('debug' in gyp.opts) {\n        buildType = gyp.opts.debug ? 'Debug' : 'Release'\n      }\n      if (!buildType) {\n        buildType = 'Release'\n      }\n\n      log.verbose('build type', buildType)\n      log.verbose('architecture', arch)\n      log.verbose('node dev dir', nodeDir)\n\n      if (win) {\n        findSolutionFile()\n      } else {\n        doWhich()\n      }\n    })\n  }\n\n  /**\n   * On Windows, find the first build/*.sln file.\n   */\n\n  function findSolutionFile () {\n    glob('build/*.sln', function (err, files) {\n      if (err) return callback(err)\n      if (files.length === 0) {\n        return callback(new Error('Could not find *.sln file. Did you run \"configure\"?'))\n      }\n      guessedSolution = files[0]\n      log.verbose('found first Solution file', guessedSolution)\n      doWhich()\n    })\n  }\n\n  /**\n   * Uses node-which to locate the msbuild / make executable.\n   */\n\n  function doWhich () {\n    // First make sure we have the build command in the PATH\n    which(command, function (err, execPath) {\n      if (err) {\n        if (win && /not found/.test(err.message)) {\n          // On windows and no 'msbuild' found. Let's guess where it is\n          findMsbuild()\n        } else {\n          // Some other error or 'make' not found on Unix, report that to the user\n          callback(err)\n        }\n        return\n      }\n      log.verbose('`which` succeeded for `' + command + '`', execPath)\n      doBuild()\n    })\n  }\n\n  /**\n   * Search for the location of \"msbuild.exe\" file on Windows.\n   */\n\n  function findMsbuild () {\n    if (config.variables.msbuild_path) {\n      command = config.variables.msbuild_path\n      log.verbose('using MSBuild:', command)\n      doBuild()\n      return\n    }\n\n    log.verbose('could not find \"msbuild.exe\" in PATH - finding location in registry')\n    var notfoundErr = 'Can\\'t find \"msbuild.exe\". Do you have Microsoft Visual Studio C++ 2008+ installed?'\n    var cmd = 'reg query \"HKLM\\\\Software\\\\Microsoft\\\\MSBuild\\\\ToolsVersions\" /s'\n    if (process.arch !== 'ia32')\n      cmd += ' /reg:32'\n    exec(cmd, function (err, stdout, stderr) {\n      if (err) {\n        return callback(new Error(err.message + '\\n' + notfoundErr))\n      }\n      var reVers = /ToolsVersions\\\\([^\\\\]+)$/i\n        , rePath = /\\r\\n[ \\t]+MSBuildToolsPath[ \\t]+REG_SZ[ \\t]+([^\\r]+)/i\n        , msbuilds = []\n        , r\n        , msbuildPath\n      stdout.split('\\r\\n\\r\\n').forEach(function(l) {\n        if (!l) return\n        l = l.trim()\n        if (r = reVers.exec(l.substring(0, l.indexOf('\\r\\n')))) {\n          var ver = parseFloat(r[1], 10)\n          if (ver >= 3.5) {\n            if (r = rePath.exec(l)) {\n              msbuilds.push({\n                version: ver,\n                path: r[1]\n              })\n            }\n          }\n        }\n      })\n      msbuilds.sort(function (x, y) {\n        return (x.version < y.version ? -1 : 1)\n      })\n      ;(function verifyMsbuild () {\n        if (!msbuilds.length) return callback(new Error(notfoundErr))\n        msbuildPath = path.resolve(msbuilds.pop().path, 'msbuild.exe')\n        fs.stat(msbuildPath, function (err, stat) {\n          if (err) {\n            if (err.code == 'ENOENT') {\n              if (msbuilds.length) {\n                return verifyMsbuild()\n              } else {\n                callback(new Error(notfoundErr))\n              }\n            } else {\n              callback(err)\n            }\n            return\n          }\n          command = msbuildPath\n          doBuild()\n        })\n      })()\n    })\n  }\n\n\n  /**\n   * Actually spawn the process and compile the module.\n   */\n\n  function doBuild () {\n\n    // Enable Verbose build\n    var verbose = log.levels[log.level] <= log.levels.verbose\n    if (!win && verbose) {\n      argv.push('V=1')\n    }\n    if (win && !verbose) {\n      argv.push('/clp:Verbosity=minimal')\n    }\n\n    if (win) {\n      // Turn off the Microsoft logo on Windows\n      argv.push('/nologo')\n    }\n\n    // Specify the build type, Release by default\n    if (win) {\n      var archLower = arch.toLowerCase()\n      var p = archLower === 'x64' ? 'x64' :\n              (archLower === 'arm' ? 'ARM' : 'Win32')\n      argv.push('/p:Configuration=' + buildType + ';Platform=' + p)\n      if (jobs) {\n        var j = parseInt(jobs, 10)\n        if (!isNaN(j) && j > 0) {\n          argv.push('/m:' + j)\n        } else if (jobs.toUpperCase() === 'MAX') {\n          argv.push('/m:' + require('os').cpus().length)\n        }\n      }\n    } else {\n      argv.push('BUILDTYPE=' + buildType)\n      // Invoke the Makefile in the 'build' dir.\n      argv.push('-C')\n      argv.push('build')\n      if (jobs) {\n        var j = parseInt(jobs, 10)\n        if (!isNaN(j) && j > 0) {\n          argv.push('--jobs')\n          argv.push(j)\n        } else if (jobs.toUpperCase() === 'MAX') {\n          argv.push('--jobs')\n          argv.push(require('os').cpus().length)\n        }\n      }\n    }\n\n    if (win) {\n      // did the user specify their own .sln file?\n      var hasSln = argv.some(function (arg) {\n        return path.extname(arg) == '.sln'\n      })\n      if (!hasSln) {\n        argv.unshift(gyp.opts.solution || guessedSolution)\n      }\n    }\n\n    var proc = gyp.spawn(command, argv)\n    proc.on('exit', onExit)\n  }\n\n  /**\n   * Invoked after the make/msbuild command exits.\n   */\n\n  function onExit (code, signal) {\n    if (code !== 0) {\n      return callback(new Error('`' + command + '` failed with exit code: ' + code))\n    }\n    if (signal) {\n      return callback(new Error('`' + command + '` got signal: ' + signal))\n    }\n    callback()\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}