{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar passport = require('passport-strategy'),\n  util = require('util'),\n  lookup = require('./utils').lookup;\n\n/**\n * `Strategy` constructor.\n *\n * The local authentication strategy authenticates requests based on the\n * credentials submitted through an HTML-based login form.\n *\n * Applications must supply a `verify` callback which accepts `username` and\n * `password` credentials, and then calls the `done` callback supplying a\n * `user`, which should be set to `false` if the credentials are not valid.\n * If an exception occured, `err` should be set.\n *\n * Optionally, `options` can be used to change the fields in which the\n * credentials are found.\n *\n * Options:\n *   - `usernameField`  field name where the username is found, defaults to _username_\n *   - `passwordField`  field name where the password is found, defaults to _password_\n *   - `passReqToCallback`  when `true`, `req` is the first argument to the verify callback (default: `false`)\n *\n * Examples:\n *\n *     passport.use(new LocalStrategy(\n *       function(username, password, done) {\n *         User.findOne({ username: username, password: password }, function (err, user) {\n *           done(err, user);\n *         });\n *       }\n *     ));\n *\n * @param {Object} options\n * @param {Function} verify\n * @api public\n */\nfunction Strategy(options, verify) {\n  if (typeof options == 'function') {\n    verify = options;\n    options = {};\n  }\n  if (!verify) {\n    throw new TypeError('LocalStrategy requires a verify callback');\n  }\n  this._usernameField = options.usernameField || 'username';\n  this._passwordField = options.passwordField || 'password';\n  passport.Strategy.call(this);\n  this.name = 'local';\n  this._verify = verify;\n  this._passReqToCallback = options.passReqToCallback;\n}\n\n/**\n * Inherit from `passport.Strategy`.\n */\nutil.inherits(Strategy, passport.Strategy);\n\n/**\n * Authenticate request based on the contents of a form submission.\n *\n * @param {Object} req\n * @api protected\n */\nStrategy.prototype.authenticate = function (req, options) {\n  options = options || {};\n  var username = lookup(req.body, this._usernameField) || lookup(req.query, this._usernameField);\n  var password = lookup(req.body, this._passwordField) || lookup(req.query, this._passwordField);\n  if (!username || !password) {\n    return this.fail({\n      message: options.badRequestMessage || 'Missing credentials'\n    }, 400);\n  }\n  var self = this;\n  function verified(err, user, info) {\n    if (err) {\n      return self.error(err);\n    }\n    if (!user) {\n      return self.fail(info);\n    }\n    self.success(user, info);\n  }\n  try {\n    if (self._passReqToCallback) {\n      this._verify(req, username, password, verified);\n    } else {\n      this._verify(username, password, verified);\n    }\n  } catch (ex) {\n    return self.error(ex);\n  }\n};\n\n/**\n * Expose `Strategy`.\n */\nmodule.exports = Strategy;","map":{"version":3,"names":["passport","require","util","lookup","Strategy","options","verify","TypeError","_usernameField","usernameField","_passwordField","passwordField","call","name","_verify","_passReqToCallback","passReqToCallback","inherits","prototype","authenticate","req","username","body","query","password","fail","message","badRequestMessage","self","verified","err","user","info","error","success","ex","module","exports"],"sources":["/Users/lieo/diabetes/CUT2DMTest/node_modules/passport-local/lib/strategy.js"],"sourcesContent":["/**\n * Module dependencies.\n */\nvar passport = require('passport-strategy')\n  , util = require('util')\n  , lookup = require('./utils').lookup;\n\n\n/**\n * `Strategy` constructor.\n *\n * The local authentication strategy authenticates requests based on the\n * credentials submitted through an HTML-based login form.\n *\n * Applications must supply a `verify` callback which accepts `username` and\n * `password` credentials, and then calls the `done` callback supplying a\n * `user`, which should be set to `false` if the credentials are not valid.\n * If an exception occured, `err` should be set.\n *\n * Optionally, `options` can be used to change the fields in which the\n * credentials are found.\n *\n * Options:\n *   - `usernameField`  field name where the username is found, defaults to _username_\n *   - `passwordField`  field name where the password is found, defaults to _password_\n *   - `passReqToCallback`  when `true`, `req` is the first argument to the verify callback (default: `false`)\n *\n * Examples:\n *\n *     passport.use(new LocalStrategy(\n *       function(username, password, done) {\n *         User.findOne({ username: username, password: password }, function (err, user) {\n *           done(err, user);\n *         });\n *       }\n *     ));\n *\n * @param {Object} options\n * @param {Function} verify\n * @api public\n */\nfunction Strategy(options, verify) {\n  if (typeof options == 'function') {\n    verify = options;\n    options = {};\n  }\n  if (!verify) { throw new TypeError('LocalStrategy requires a verify callback'); }\n  \n  this._usernameField = options.usernameField || 'username';\n  this._passwordField = options.passwordField || 'password';\n  \n  passport.Strategy.call(this);\n  this.name = 'local';\n  this._verify = verify;\n  this._passReqToCallback = options.passReqToCallback;\n}\n\n/**\n * Inherit from `passport.Strategy`.\n */\nutil.inherits(Strategy, passport.Strategy);\n\n/**\n * Authenticate request based on the contents of a form submission.\n *\n * @param {Object} req\n * @api protected\n */\nStrategy.prototype.authenticate = function(req, options) {\n  options = options || {};\n  var username = lookup(req.body, this._usernameField) || lookup(req.query, this._usernameField);\n  var password = lookup(req.body, this._passwordField) || lookup(req.query, this._passwordField);\n  \n  if (!username || !password) {\n    return this.fail({ message: options.badRequestMessage || 'Missing credentials' }, 400);\n  }\n  \n  var self = this;\n  \n  function verified(err, user, info) {\n    if (err) { return self.error(err); }\n    if (!user) { return self.fail(info); }\n    self.success(user, info);\n  }\n  \n  try {\n    if (self._passReqToCallback) {\n      this._verify(req, username, password, verified);\n    } else {\n      this._verify(username, password, verified);\n    }\n  } catch (ex) {\n    return self.error(ex);\n  }\n};\n\n\n/**\n * Expose `Strategy`.\n */\nmodule.exports = Strategy;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}