{"ast":null,"code":"'use strict';\n\nvar crypto = require('crypto');\nvar scmpCompare = require('./lib/scmpCompare');\n\n/**\n * Does a constant-time Buffer comparison by not short-circuiting\n * on first sign of non-equivalency.\n *\n * @param {Buffer} a The first Buffer to be compared against the second\n * @param {Buffer} b The second Buffer to be compared against the first\n * @return {Boolean}\n */\nmodule.exports = function scmp(a, b) {\n  // check that both inputs are buffers\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new Error('Both scmp args must be Buffers');\n  }\n\n  // return early here if buffer lengths are not equal since timingSafeEqual\n  // will throw if buffer lengths are not equal\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  // use crypto.timingSafeEqual if available (since Node.js v6.6.0),\n  // otherwise use our own scmp-internal function.\n  if (crypto.timingSafeEqual) {\n    return crypto.timingSafeEqual(a, b);\n  }\n  return scmpCompare(a, b);\n};","map":{"version":3,"names":["crypto","require","scmpCompare","module","exports","scmp","a","b","Buffer","isBuffer","Error","length","timingSafeEqual"],"sources":["/Users/lieo/diabetes/CUT2DMTest/node_modules/scmp/index.js"],"sourcesContent":["'use strict'\n\nconst crypto = require('crypto')\nconst scmpCompare = require('./lib/scmpCompare')\n\n/**\n * Does a constant-time Buffer comparison by not short-circuiting\n * on first sign of non-equivalency.\n *\n * @param {Buffer} a The first Buffer to be compared against the second\n * @param {Buffer} b The second Buffer to be compared against the first\n * @return {Boolean}\n */\nmodule.exports = function scmp (a, b) {\n  // check that both inputs are buffers\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new Error('Both scmp args must be Buffers')\n  }\n\n  // return early here if buffer lengths are not equal since timingSafeEqual\n  // will throw if buffer lengths are not equal\n  if (a.length !== b.length) {\n    return false\n  }\n\n  // use crypto.timingSafeEqual if available (since Node.js v6.6.0),\n  // otherwise use our own scmp-internal function.\n  if (crypto.timingSafeEqual) {\n    return crypto.timingSafeEqual(a, b)\n  }\n\n  return scmpCompare(a, b)\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,IAAMC,WAAW,GAAGD,OAAO,CAAC,mBAAmB,CAAC;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,MAAM,CAACC,OAAO,GAAG,SAASC,IAAI,CAAEC,CAAC,EAAEC,CAAC,EAAE;EACpC;EACA,IAAI,CAACC,MAAM,CAACC,QAAQ,CAACH,CAAC,CAAC,IAAI,CAACE,MAAM,CAACC,QAAQ,CAACF,CAAC,CAAC,EAAE;IAC9C,MAAM,IAAIG,KAAK,CAAC,gCAAgC,CAAC;EACnD;;EAEA;EACA;EACA,IAAIJ,CAAC,CAACK,MAAM,KAAKJ,CAAC,CAACI,MAAM,EAAE;IACzB,OAAO,KAAK;EACd;;EAEA;EACA;EACA,IAAIX,MAAM,CAACY,eAAe,EAAE;IAC1B,OAAOZ,MAAM,CAACY,eAAe,CAACN,CAAC,EAAEC,CAAC,CAAC;EACrC;EAEA,OAAOL,WAAW,CAACI,CAAC,EAAEC,CAAC,CAAC;AAC1B,CAAC"},"metadata":{},"sourceType":"script"}