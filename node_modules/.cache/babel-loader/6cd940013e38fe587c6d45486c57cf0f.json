{"ast":null,"code":"// give it a tarball and a path, and it'll dump the contents\n\nmodule.exports = Extract;\nvar tar = require(\"../tar.js\"),\n  fstream = require(\"fstream\"),\n  inherits = require(\"inherits\"),\n  path = require(\"path\");\nfunction Extract(opts) {\n  if (!(this instanceof Extract)) return new Extract(opts);\n  tar.Parse.apply(this);\n  if (typeof opts !== \"object\") {\n    opts = {\n      path: opts\n    };\n  }\n\n  // better to drop in cwd? seems more standard.\n  opts.path = opts.path || path.resolve(\"node-tar-extract\");\n  opts.type = \"Directory\";\n  opts.Directory = true;\n\n  // similar to --strip or --strip-components\n  opts.strip = +opts.strip;\n  if (!opts.strip || opts.strip <= 0) opts.strip = 0;\n  this._fst = fstream.Writer(opts);\n  this.pause();\n  var me = this;\n\n  // Hardlinks in tarballs are relative to the root\n  // of the tarball.  So, they need to be resolved against\n  // the target directory in order to be created properly.\n  me.on(\"entry\", function (entry) {\n    // if there's a \"strip\" argument, then strip off that many\n    // path components.\n    if (opts.strip) {\n      var p = entry.path.split(\"/\").slice(opts.strip).join(\"/\");\n      entry.path = entry.props.path = p;\n      if (entry.linkpath) {\n        var lp = entry.linkpath.split(\"/\").slice(opts.strip).join(\"/\");\n        entry.linkpath = entry.props.linkpath = lp;\n      }\n    }\n    if (entry.type === \"Link\") {\n      entry.linkpath = entry.props.linkpath = path.join(opts.path, path.join(\"/\", entry.props.linkpath));\n    }\n    if (entry.type === \"SymbolicLink\") {\n      var dn = path.dirname(entry.path) || \"\";\n      var linkpath = entry.props.linkpath;\n      var target = path.resolve(opts.path, dn, linkpath);\n      if (target.indexOf(opts.path) !== 0) {\n        linkpath = path.join(opts.path, path.join(\"/\", linkpath));\n      }\n      entry.linkpath = entry.props.linkpath = linkpath;\n    }\n  });\n  this._fst.on(\"ready\", function () {\n    me.pipe(me._fst, {\n      end: false\n    });\n    me.resume();\n  });\n  this._fst.on('error', function (err) {\n    me.emit('error', err);\n  });\n  this._fst.on('drain', function () {\n    me.emit('drain');\n  });\n\n  // this._fst.on(\"end\", function () {\n  //   console.error(\"\\nEEEE Extract End\", me._fst.path)\n  // })\n\n  this._fst.on(\"close\", function () {\n    // console.error(\"\\nEEEE Extract End\", me._fst.path)\n    me.emit(\"finish\");\n    me.emit(\"end\");\n    me.emit(\"close\");\n  });\n}\ninherits(Extract, tar.Parse);\nExtract.prototype._streamEnd = function () {\n  var me = this;\n  if (!me._ended || me._entry) me.error(\"unexpected eof\");\n  me._fst.end();\n  // my .end() is coming later.\n};","map":{"version":3,"names":["module","exports","Extract","tar","require","fstream","inherits","path","opts","Parse","apply","resolve","type","Directory","strip","_fst","Writer","pause","me","on","entry","p","split","slice","join","props","linkpath","lp","dn","dirname","target","indexOf","pipe","end","resume","err","emit","prototype","_streamEnd","_ended","_entry","error"],"sources":["/Users/lieo/diabetes/CUT2DMTest/node_modules/node-gyp/node_modules/tar/lib/extract.js"],"sourcesContent":["// give it a tarball and a path, and it'll dump the contents\n\nmodule.exports = Extract\n\nvar tar = require(\"../tar.js\")\n  , fstream = require(\"fstream\")\n  , inherits = require(\"inherits\")\n  , path = require(\"path\")\n\nfunction Extract (opts) {\n  if (!(this instanceof Extract)) return new Extract(opts)\n  tar.Parse.apply(this)\n\n  if (typeof opts !== \"object\") {\n    opts = { path: opts }\n  }\n\n  // better to drop in cwd? seems more standard.\n  opts.path = opts.path || path.resolve(\"node-tar-extract\")\n  opts.type = \"Directory\"\n  opts.Directory = true\n\n  // similar to --strip or --strip-components\n  opts.strip = +opts.strip\n  if (!opts.strip || opts.strip <= 0) opts.strip = 0\n\n  this._fst = fstream.Writer(opts)\n\n  this.pause()\n  var me = this\n\n  // Hardlinks in tarballs are relative to the root\n  // of the tarball.  So, they need to be resolved against\n  // the target directory in order to be created properly.\n  me.on(\"entry\", function (entry) {\n    // if there's a \"strip\" argument, then strip off that many\n    // path components.\n    if (opts.strip) {\n      var p = entry.path.split(\"/\").slice(opts.strip).join(\"/\")\n      entry.path = entry.props.path = p\n      if (entry.linkpath) {\n        var lp = entry.linkpath.split(\"/\").slice(opts.strip).join(\"/\")\n        entry.linkpath = entry.props.linkpath = lp\n      }\n    }\n    if (entry.type === \"Link\") {\n      entry.linkpath = entry.props.linkpath =\n        path.join(opts.path, path.join(\"/\", entry.props.linkpath))\n    }\n\n    if (entry.type === \"SymbolicLink\") {\n      var dn = path.dirname(entry.path) || \"\"\n      var linkpath = entry.props.linkpath\n      var target = path.resolve(opts.path, dn, linkpath)\n      if (target.indexOf(opts.path) !== 0) {\n        linkpath = path.join(opts.path, path.join(\"/\", linkpath))\n      }\n      entry.linkpath = entry.props.linkpath = linkpath\n    }\n  })\n\n  this._fst.on(\"ready\", function () {\n    me.pipe(me._fst, { end: false })\n    me.resume()\n  })\n\n  this._fst.on('error', function(err) {\n    me.emit('error', err)\n  })\n\n  this._fst.on('drain', function() {\n    me.emit('drain')\n  })\n\n  // this._fst.on(\"end\", function () {\n  //   console.error(\"\\nEEEE Extract End\", me._fst.path)\n  // })\n\n  this._fst.on(\"close\", function () {\n    // console.error(\"\\nEEEE Extract End\", me._fst.path)\n    me.emit(\"finish\")\n    me.emit(\"end\")\n    me.emit(\"close\")\n  })\n}\n\ninherits(Extract, tar.Parse)\n\nExtract.prototype._streamEnd = function () {\n  var me = this\n  if (!me._ended || me._entry) me.error(\"unexpected eof\")\n  me._fst.end()\n  // my .end() is coming later.\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}