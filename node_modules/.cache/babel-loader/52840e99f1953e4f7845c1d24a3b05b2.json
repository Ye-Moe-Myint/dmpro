{"ast":null,"code":"var mongoose=require('mongoose');var bcrypt=require('bcryptjs');// define the patientSchema\nvar patientSchema=new mongoose.Schema({first_name:{type:String,required:true},last_name:{type:String,required:true},screen_name:{type:String,required:true},dob:{type:Date,required:true},bio:{type:String,required:true},engagement_rate:{type:Number,default:0,required:true},clinicianId:{type:String,required:false},supportMessage:{type:String,default:\"\"},measurements:{bcg:{minimum:Number,maximum:Number},weight:{minimum:Number,maximum:Number},insulin:{minimum:Number,maximum:Number},exercise:{minimum:Number,maximum:Number},required:false}});patientSchema.methods.verifyPassword=function(password,callback){bcrypt.compare(password,this.password,function(err,valid){callback(err,valid);});};var SALT_FACTOR=10;// hash password before saving\npatientSchema.pre('save',function save(next){var user=this;// go to next if password field has not been modified\nif(!user.isModified('password')){return next();}// auto-generate salt/hash\nbcrypt.hash(user.password,SALT_FACTOR,function(err,hash){if(err){return next(err);}//replace password with hash\nuser.password=hash;next();});});// compile the measurementSchemas into Model\nvar Patient=mongoose.model('Patient',patientSchema);module.exports={Patient:Patient};","map":{"version":3,"names":["mongoose","require","bcrypt","patientSchema","Schema","first_name","type","String","required","last_name","screen_name","dob","Date","bio","engagement_rate","Number","default","clinicianId","supportMessage","measurements","bcg","minimum","maximum","weight","insulin","exercise","methods","verifyPassword","password","callback","compare","err","valid","SALT_FACTOR","pre","save","next","user","isModified","hash","Patient","model","module","exports"],"sources":["/Users/lieo/diabetes/CUT2DMTest/src/patient.js"],"sourcesContent":["const mongoose = require('mongoose')\nconst bcrypt = require('bcryptjs')\n\n// define the patientSchema\nconst patientSchema = new mongoose.Schema({\n    first_name: {type: String, required: true},\n    last_name: {type: String, required: true},\n    screen_name: {type: String, required: true},\n    dob: {type: Date, required: true},\n    bio: {type: String, required: true},\n    engagement_rate: {type: Number, default: 0, required: true},\n    clinicianId: {type: String, required: false},\n    supportMessage : {type: String, default:\"\"},\n    measurements: {\n        bcg: {\n            minimum: Number,\n            maximum: Number\n        },\n        weight: {\n            minimum: Number,\n            maximum: Number\n        },\n        insulin: {\n            minimum: Number,\n            maximum: Number\n        },\n        exercise: {\n            minimum: Number,\n            maximum: Number\n        },\n        required: false\n    }\n});\n\npatientSchema.methods.verifyPassword = function (password, callback) {\n    bcrypt.compare(password, this.password, (err, valid) => {\n        callback(err, valid)\n    })\n}\n\nconst SALT_FACTOR = 10\n\n// hash password before saving\npatientSchema.pre('save', function save(next) {\n    const user = this// go to next if password field has not been modified\n    if (!user.isModified('password')) {\n        return next()\n    }\n\n    // auto-generate salt/hash\n    bcrypt.hash(user.password, SALT_FACTOR, (err, hash) => {\n        if (err) {\n            return next(err)\n        }\n        //replace password with hash\n        user.password = hash\n        next()\n    })\n})\n\n// compile the measurementSchemas into Model\nconst Patient = mongoose.model('Patient', patientSchema)\n\nmodule.exports = {Patient}\n"],"mappings":"AAAA,GAAMA,SAAQ,CAAGC,OAAO,CAAC,UAAU,CAAC,CACpC,GAAMC,OAAM,CAAGD,OAAO,CAAC,UAAU,CAAC,CAElC;AACA,GAAME,cAAa,CAAG,GAAIH,SAAQ,CAACI,MAAM,CAAC,CACtCC,UAAU,CAAE,CAACC,IAAI,CAAEC,MAAM,CAAEC,QAAQ,CAAE,IAAI,CAAC,CAC1CC,SAAS,CAAE,CAACH,IAAI,CAAEC,MAAM,CAAEC,QAAQ,CAAE,IAAI,CAAC,CACzCE,WAAW,CAAE,CAACJ,IAAI,CAAEC,MAAM,CAAEC,QAAQ,CAAE,IAAI,CAAC,CAC3CG,GAAG,CAAE,CAACL,IAAI,CAAEM,IAAI,CAAEJ,QAAQ,CAAE,IAAI,CAAC,CACjCK,GAAG,CAAE,CAACP,IAAI,CAAEC,MAAM,CAAEC,QAAQ,CAAE,IAAI,CAAC,CACnCM,eAAe,CAAE,CAACR,IAAI,CAAES,MAAM,CAAEC,OAAO,CAAE,CAAC,CAAER,QAAQ,CAAE,IAAI,CAAC,CAC3DS,WAAW,CAAE,CAACX,IAAI,CAAEC,MAAM,CAAEC,QAAQ,CAAE,KAAK,CAAC,CAC5CU,cAAc,CAAG,CAACZ,IAAI,CAAEC,MAAM,CAAES,OAAO,CAAC,EAAE,CAAC,CAC3CG,YAAY,CAAE,CACVC,GAAG,CAAE,CACDC,OAAO,CAAEN,MAAM,CACfO,OAAO,CAAEP,MACb,CAAC,CACDQ,MAAM,CAAE,CACJF,OAAO,CAAEN,MAAM,CACfO,OAAO,CAAEP,MACb,CAAC,CACDS,OAAO,CAAE,CACLH,OAAO,CAAEN,MAAM,CACfO,OAAO,CAAEP,MACb,CAAC,CACDU,QAAQ,CAAE,CACNJ,OAAO,CAAEN,MAAM,CACfO,OAAO,CAAEP,MACb,CAAC,CACDP,QAAQ,CAAE,KACd,CACJ,CAAC,CAAC,CAEFL,aAAa,CAACuB,OAAO,CAACC,cAAc,CAAG,SAAUC,QAAQ,CAAEC,QAAQ,CAAE,CACjE3B,MAAM,CAAC4B,OAAO,CAACF,QAAQ,CAAE,IAAI,CAACA,QAAQ,CAAE,SAACG,GAAG,CAAEC,KAAK,CAAK,CACpDH,QAAQ,CAACE,GAAG,CAAEC,KAAK,CAAC,CACxB,CAAC,CAAC,CACN,CAAC,CAED,GAAMC,YAAW,CAAG,EAAE,CAEtB;AACA9B,aAAa,CAAC+B,GAAG,CAAC,MAAM,CAAE,QAASC,KAAI,CAACC,IAAI,CAAE,CAC1C,GAAMC,KAAI,CAAG,IAAI;AACjB,GAAI,CAACA,IAAI,CAACC,UAAU,CAAC,UAAU,CAAC,CAAE,CAC9B,MAAOF,KAAI,EAAE,CACjB,CAEA;AACAlC,MAAM,CAACqC,IAAI,CAACF,IAAI,CAACT,QAAQ,CAAEK,WAAW,CAAE,SAACF,GAAG,CAAEQ,IAAI,CAAK,CACnD,GAAIR,GAAG,CAAE,CACL,MAAOK,KAAI,CAACL,GAAG,CAAC,CACpB,CACA;AACAM,IAAI,CAACT,QAAQ,CAAGW,IAAI,CACpBH,IAAI,EAAE,CACV,CAAC,CAAC,CACN,CAAC,CAAC,CAEF;AACA,GAAMI,QAAO,CAAGxC,QAAQ,CAACyC,KAAK,CAAC,SAAS,CAAEtC,aAAa,CAAC,CAExDuC,MAAM,CAACC,OAAO,CAAG,CAACH,OAAO,CAAPA,OAAO,CAAC"},"metadata":{},"sourceType":"module"}