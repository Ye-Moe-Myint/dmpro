{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/lieo/diabetes/CUT2DMTest/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _slicedToArray = require(\"/Users/lieo/diabetes/CUT2DMTest/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar debug = require('debug')('nock.common');\nvar isPlainObject = require('lodash/isPlainObject');\nvar set = require('lodash/set');\nvar timers = require('timers');\nvar url = require('url');\nvar util = require('util');\n\n/**\n * Normalizes the request options so that it always has `host` property.\n *\n * @param  {Object} options - a parsed options object of the request\n */\nfunction normalizeRequestOptions(options) {\n  options.proto = options.proto || 'http';\n  options.port = options.port || (options.proto === 'http' ? 80 : 443);\n  if (options.host) {\n    debug('options.host:', options.host);\n    if (!options.hostname) {\n      if (options.host.split(':').length === 2) {\n        options.hostname = options.host.split(':')[0];\n      } else {\n        options.hostname = options.host;\n      }\n    }\n  }\n  debug('options.hostname in the end: %j', options.hostname);\n  options.host = \"\".concat(options.hostname || 'localhost', \":\").concat(options.port);\n  debug('options.host in the end: %j', options.host)\n\n  /// lowercase host names\n  ;\n  ['hostname', 'host'].forEach(function (attr) {\n    if (options[attr]) {\n      options[attr] = options[attr].toLowerCase();\n    }\n  });\n  return options;\n}\n\n/**\n * Returns true if the data contained in buffer can be reconstructed\n * from its utf8 representation.\n *\n * @param  {Object} buffer - a Buffer object\n * @returns {boolean}\n */\nfunction isUtf8Representable(buffer) {\n  var utfEncodedBuffer = buffer.toString('utf8');\n  var reconstructedBuffer = Buffer.from(utfEncodedBuffer, 'utf8');\n  return reconstructedBuffer.equals(buffer);\n}\n\n//  Array where all information about all the overridden requests are held.\nvar requestOverrides = {};\n\n/**\n * Overrides the current `request` function of `http` and `https` modules with\n * our own version which intercepts issues HTTP/HTTPS requests and forwards them\n * to the given `newRequest` function.\n *\n * @param  {Function} newRequest - a function handling requests; it accepts four arguments:\n *   - proto - a string with the overridden module's protocol name (either `http` or `https`)\n *   - overriddenRequest - the overridden module's request function already bound to module's object\n *   - options - the options of the issued request\n *   - callback - the callback of the issued request\n */\nfunction overrideRequests(newRequest) {\n  debug('overriding requests');\n  ['http', 'https'].forEach(function (proto) {\n    debug('- overriding request for', proto);\n    var moduleName = proto; // 1 to 1 match of protocol and module is fortunate :)\n    var module = {\n      http: require('http'),\n      https: require('https')\n    }[moduleName];\n    var overriddenRequest = module.request;\n    var overriddenGet = module.get;\n    if (requestOverrides[moduleName]) {\n      throw new Error(\"Module's request already overridden for \".concat(moduleName, \" protocol.\"));\n    }\n\n    //  Store the properties of the overridden request so that it can be restored later on.\n    requestOverrides[moduleName] = {\n      module: module,\n      request: overriddenRequest,\n      get: overriddenGet\n    };\n    // https://nodejs.org/api/http.html#http_http_request_url_options_callback\n    module.request = function (input, options, callback) {\n      return newRequest(proto, overriddenRequest.bind(module), [input, options, callback]);\n    };\n    // https://nodejs.org/api/http.html#http_http_get_options_callback\n    module.get = function (input, options, callback) {\n      var req = newRequest(proto, overriddenGet.bind(module), [input, options, callback]);\n      req.end();\n      return req;\n    };\n    debug('- overridden request for', proto);\n  });\n}\n\n/**\n * Restores `request` function of `http` and `https` modules to values they\n * held before they were overridden by us.\n */\nfunction restoreOverriddenRequests() {\n  debug('restoring requests');\n  Object.entries(requestOverrides).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      proto = _ref2[0],\n      _ref2$ = _ref2[1],\n      module = _ref2$.module,\n      request = _ref2$.request,\n      get = _ref2$.get;\n    debug('- restoring request for', proto);\n    module.request = request;\n    module.get = get;\n    debug('- restored request for', proto);\n  });\n  requestOverrides = {};\n}\n\n/**\n * In WHATWG URL vernacular, this returns the origin portion of a URL.\n * However, the port is not included if it's standard and not already present on the host.\n */\nfunction normalizeOrigin(proto, host, port) {\n  var hostHasPort = host.includes(':');\n  var portIsStandard = proto === 'http' && (port === 80 || port === '80') || proto === 'https' && (port === 443 || port === '443');\n  var portStr = hostHasPort || portIsStandard ? '' : \":\".concat(port);\n  return \"\".concat(proto, \"://\").concat(host).concat(portStr);\n}\n\n/**\n * Get high level information about request as string\n * @param  {Object} options\n * @param  {string} options.method\n * @param  {number|string} options.port\n * @param  {string} options.proto Set internally. always http or https\n * @param  {string} options.hostname\n * @param  {string} options.path\n * @param  {Object} options.headers\n * @param  {string} body\n * @return {string}\n */\nfunction stringifyRequest(options, body) {\n  var _options$method = options.method,\n    method = _options$method === void 0 ? 'GET' : _options$method,\n    _options$path = options.path,\n    path = _options$path === void 0 ? '' : _options$path,\n    port = options.port;\n  var origin = normalizeOrigin(options.proto, options.hostname, port);\n  var log = {\n    method: method,\n    url: \"\".concat(origin).concat(path),\n    headers: options.headers\n  };\n  if (body) {\n    log.body = body;\n  }\n  return JSON.stringify(log, null, 2);\n}\nfunction isContentEncoded(headers) {\n  var contentEncoding = headers['content-encoding'];\n  return typeof contentEncoding === 'string' && contentEncoding !== '';\n}\nfunction contentEncoding(headers, encoder) {\n  var contentEncoding = headers['content-encoding'];\n  return contentEncoding !== undefined && contentEncoding.toString() === encoder;\n}\nfunction isJSONContent(headers) {\n  // https://tools.ietf.org/html/rfc8259\n  var contentType = String(headers['content-type'] || '').toLowerCase();\n  return contentType.startsWith('application/json');\n}\n\n/**\n * Return a new object with all field names of the headers lower-cased.\n *\n * Duplicates throw an error.\n */\nfunction headersFieldNamesToLowerCase(headers, throwOnDuplicate) {\n  if (!isPlainObject(headers)) {\n    throw Error('Headers must be provided as an object');\n  }\n  var lowerCaseHeaders = {};\n  Object.entries(headers).forEach(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      fieldName = _ref4[0],\n      fieldValue = _ref4[1];\n    var key = fieldName.toLowerCase();\n    if (lowerCaseHeaders[key] !== undefined) {\n      if (throwOnDuplicate) {\n        throw Error(\"Failed to convert header keys to lower case due to field name conflict: \".concat(key));\n      } else {\n        debug(\"Duplicate header provided in request: \".concat(key, \". Only the last value can be matched.\"));\n      }\n    }\n    lowerCaseHeaders[key] = fieldValue;\n  });\n  return lowerCaseHeaders;\n}\nvar headersFieldsArrayToLowerCase = function headersFieldsArrayToLowerCase(headers) {\n  return _toConsumableArray(new Set(headers.map(function (fieldName) {\n    return fieldName.toLowerCase();\n  })));\n};\n\n/**\n * Converts the various accepted formats of headers into a flat array representing \"raw headers\".\n *\n * Nock allows headers to be provided as a raw array, a plain object, or a Map.\n *\n * While all the header names are expected to be strings, the values are left intact as they can\n * be functions, strings, or arrays of strings.\n *\n *  https://nodejs.org/api/http.html#http_message_rawheaders\n */\nfunction headersInputToRawArray(headers) {\n  if (headers === undefined) {\n    return [];\n  }\n  if (Array.isArray(headers)) {\n    // If the input is an array, assume it's already in the raw format and simply return a copy\n    // but throw an error if there aren't an even number of items in the array\n    if (headers.length % 2) {\n      throw new Error(\"Raw headers must be provided as an array with an even number of items. [fieldName, value, ...]\");\n    }\n    return _toConsumableArray(headers);\n  }\n\n  // [].concat(...) is used instead of Array.flat until v11 is the minimum Node version\n  if (util.types.isMap(headers)) {\n    var _ref5;\n    return (_ref5 = []).concat.apply(_ref5, _toConsumableArray(Array.from(headers, function (_ref6) {\n      var _ref7 = _slicedToArray(_ref6, 2),\n        k = _ref7[0],\n        v = _ref7[1];\n      return [k.toString(), v];\n    })));\n  }\n  if (isPlainObject(headers)) {\n    var _ref8;\n    return (_ref8 = []).concat.apply(_ref8, _toConsumableArray(Object.entries(headers)));\n  }\n  throw new Error(\"Headers must be provided as an array of raw values, a Map, or a plain Object. \".concat(headers));\n}\n\n/**\n * Converts an array of raw headers to an object, using the same rules as Nodes `http.IncomingMessage.headers`.\n *\n * Header names/keys are lower-cased.\n */\nfunction headersArrayToObject(rawHeaders) {\n  if (!Array.isArray(rawHeaders)) {\n    throw Error('Expected a header array');\n  }\n  var accumulator = {};\n  forEachHeader(rawHeaders, function (value, fieldName) {\n    addHeaderLine(accumulator, fieldName, value);\n  });\n  return accumulator;\n}\nvar noDuplicatesHeaders = new Set(['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent']);\n\n/**\n * Set key/value data in accordance with Node's logic for folding duplicate headers.\n *\n * The `value` param should be a function, string, or array of strings.\n *\n * Node's docs and source:\n * https://nodejs.org/api/http.html#http_message_headers\n * https://github.com/nodejs/node/blob/908292cf1f551c614a733d858528ffb13fb3a524/lib/_http_incoming.js#L245\n *\n * Header names are lower-cased.\n * Duplicates in raw headers are handled in the following ways, depending on the header name:\n * - Duplicates of field names listed in `noDuplicatesHeaders` (above) are discarded.\n * - `set-cookie` is always an array. Duplicates are added to the array.\n * - For duplicate `cookie` headers, the values are joined together with '; '.\n * - For all other headers, the values are joined together with ', '.\n *\n * Node's implementation is larger because it highly optimizes for not having to call `toLowerCase()`.\n * We've opted to always call `toLowerCase` in exchange for a more concise function.\n *\n * While Node has the luxury of knowing `value` is always a string, we do an extra step of coercion at the top.\n */\nfunction addHeaderLine(headers, name, value) {\n  var values; // code below expects `values` to be an array of strings\n  if (typeof value === 'function') {\n    // Function values are evaluated towards the end of the response, before that we use a placeholder\n    // string just to designate that the header exists. Useful when `Content-Type` is set with a function.\n    values = [value.name];\n  } else if (Array.isArray(value)) {\n    values = value.map(String);\n  } else {\n    values = [String(value)];\n  }\n  var key = name.toLowerCase();\n  if (key === 'set-cookie') {\n    // Array header -- only Set-Cookie at the moment\n    if (headers['set-cookie'] === undefined) {\n      headers['set-cookie'] = values;\n    } else {\n      var _headers$setCookie;\n      (_headers$setCookie = headers['set-cookie']).push.apply(_headers$setCookie, _toConsumableArray(values));\n    }\n  } else if (noDuplicatesHeaders.has(key)) {\n    if (headers[key] === undefined) {\n      // Drop duplicates\n      headers[key] = values[0];\n    }\n  } else {\n    if (headers[key] !== undefined) {\n      values = [headers[key]].concat(_toConsumableArray(values));\n    }\n    var separator = key === 'cookie' ? '; ' : ', ';\n    headers[key] = values.join(separator);\n  }\n}\n\n/**\n * Deletes the given `fieldName` property from `headers` object by performing\n * case-insensitive search through keys.\n *\n * @headers   {Object} headers - object of header field names and values\n * @fieldName {String} field name - string with the case-insensitive field name\n */\nfunction deleteHeadersField(headers, fieldNameToDelete) {\n  if (!isPlainObject(headers)) {\n    throw Error('headers must be an object');\n  }\n  if (typeof fieldNameToDelete !== 'string') {\n    throw Error('field name must be a string');\n  }\n  var lowerCaseFieldNameToDelete = fieldNameToDelete.toLowerCase();\n\n  // Search through the headers and delete all values whose field name matches the given field name.\n  Object.keys(headers).filter(function (fieldName) {\n    return fieldName.toLowerCase() === lowerCaseFieldNameToDelete;\n  }).forEach(function (fieldName) {\n    return delete headers[fieldName];\n  });\n}\n\n/**\n * Utility for iterating over a raw headers array.\n *\n * The callback is called with:\n *  - The header value. string, array of strings, or a function\n *  - The header field name. string\n *  - Index of the header field in the raw header array.\n */\nfunction forEachHeader(rawHeaders, callback) {\n  for (var i = 0; i < rawHeaders.length; i += 2) {\n    callback(rawHeaders[i + 1], rawHeaders[i], i);\n  }\n}\nfunction percentDecode(str) {\n  try {\n    return decodeURIComponent(str.replace(/\\+/g, ' '));\n  } catch (e) {\n    return str;\n  }\n}\n\n/**\n * URI encode the provided string, stringently adhering to RFC 3986.\n *\n * RFC 3986 reserves !, ', (, ), and * but encodeURIComponent does not encode them so we do it manually.\n *\n * https://tools.ietf.org/html/rfc3986\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\n */\nfunction percentEncode(str) {\n  return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n    return \"%\".concat(c.charCodeAt(0).toString(16).toUpperCase());\n  });\n}\nfunction matchStringOrRegexp(target, pattern) {\n  var targetStr = target === undefined || target === null ? '' : String(target);\n  if (pattern instanceof RegExp) {\n    // if the regexp happens to have a global flag, we want to ensure we test the entire target\n    pattern.lastIndex = 0;\n    return pattern.test(targetStr);\n  }\n  return targetStr === String(pattern);\n}\n\n/**\n * Formats a query parameter.\n *\n * @param key                The key of the query parameter to format.\n * @param value              The value of the query parameter to format.\n * @param stringFormattingFn The function used to format string values. Can\n *                           be used to encode or decode the query value.\n *\n * @returns *[] the formatted [key, value] pair.\n */\nfunction formatQueryValue(key, value, stringFormattingFn) {\n  // TODO: Probably refactor code to replace `switch(true)` with `if`/`else`.\n  switch (true) {\n    case typeof value === 'number': // fall-through\n    case typeof value === 'boolean':\n      value = value.toString();\n      break;\n    case value === null:\n    case value === undefined:\n      value = '';\n      break;\n    case typeof value === 'string':\n      if (stringFormattingFn) {\n        value = stringFormattingFn(value);\n      }\n      break;\n    case value instanceof RegExp:\n      break;\n    case Array.isArray(value):\n      {\n        value = value.map(function (val, idx) {\n          return formatQueryValue(idx, val, stringFormattingFn)[1];\n        });\n        break;\n      }\n    case typeof value === 'object':\n      {\n        value = Object.entries(value).reduce(function (acc, _ref9) {\n          var _ref10 = _slicedToArray(_ref9, 2),\n            subKey = _ref10[0],\n            subVal = _ref10[1];\n          var subPair = formatQueryValue(subKey, subVal, stringFormattingFn);\n          acc[subPair[0]] = subPair[1];\n          return acc;\n        }, {});\n        break;\n      }\n  }\n  if (stringFormattingFn) key = stringFormattingFn(key);\n  return [key, value];\n}\nfunction isStream(obj) {\n  return obj && typeof obj !== 'string' && !Buffer.isBuffer(obj) && typeof obj.setEncoding === 'function';\n}\n\n/**\n * Converts the arguments from the various signatures of http[s].request into a standard\n * options object and an optional callback function.\n *\n * https://nodejs.org/api/http.html#http_http_request_url_options_callback\n *\n * Taken from the beginning of the native `ClientRequest`.\n * https://github.com/nodejs/node/blob/908292cf1f551c614a733d858528ffb13fb3a524/lib/_http_client.js#L68\n */\nfunction normalizeClientRequestArgs(input, options, cb) {\n  if (typeof input === 'string') {\n    input = urlToOptions(new url.URL(input));\n  } else if (input instanceof url.URL) {\n    input = urlToOptions(input);\n  } else {\n    cb = options;\n    options = input;\n    input = null;\n  }\n  if (typeof options === 'function') {\n    cb = options;\n    options = input || {};\n  } else {\n    options = Object.assign(input || {}, options);\n  }\n  return {\n    options: options,\n    callback: cb\n  };\n}\n\n/**\n * Utility function that converts a URL object into an ordinary\n * options object as expected by the http.request and https.request APIs.\n *\n * This was copied from Node's source\n * https://github.com/nodejs/node/blob/908292cf1f551c614a733d858528ffb13fb3a524/lib/internal/url.js#L1257\n */\nfunction urlToOptions(url) {\n  var options = {\n    protocol: url.protocol,\n    hostname: typeof url.hostname === 'string' && url.hostname.startsWith('[') ? url.hostname.slice(1, -1) : url.hostname,\n    hash: url.hash,\n    search: url.search,\n    pathname: url.pathname,\n    path: \"\".concat(url.pathname).concat(url.search || ''),\n    href: url.href\n  };\n  if (url.port !== '') {\n    options.port = Number(url.port);\n  }\n  if (url.username || url.password) {\n    options.auth = \"\".concat(url.username, \":\").concat(url.password);\n  }\n  return options;\n}\n\n/**\n * Determines if request data matches the expected schema.\n *\n * Used for comparing decoded search parameters, request body JSON objects,\n * and URL decoded request form bodies.\n *\n * Performs a general recursive strict comparison with two caveats:\n *  - The expected data can use regexp to compare values\n *  - JSON path notation and nested objects are considered equal\n */\nvar dataEqual = function dataEqual(expected, actual) {\n  if (isPlainObject(expected)) {\n    expected = expand(expected);\n  }\n  if (isPlainObject(actual)) {\n    actual = expand(actual);\n  }\n  return deepEqual(expected, actual);\n};\n\n/**\n * Converts flat objects whose keys use JSON path notation to nested objects.\n *\n * The input object is not mutated.\n *\n * @example\n * { 'foo[bar][0]': 'baz' } -> { foo: { bar: [ 'baz' ] } }\n */\nvar expand = function expand(input) {\n  return Object.entries(input).reduce(function (acc, _ref11) {\n    var _ref12 = _slicedToArray(_ref11, 2),\n      k = _ref12[0],\n      v = _ref12[1];\n    return set(acc, k, v);\n  }, {});\n};\n\n/**\n * Performs a recursive strict comparison between two values.\n *\n * Expected values or leaf nodes of expected object values that are RegExp use test() for comparison.\n */\nfunction deepEqual(expected, actual) {\n  debug('deepEqual comparing', typeof expected, expected, typeof actual, actual);\n  if (expected instanceof RegExp) {\n    return expected.test(actual);\n  }\n  if (Array.isArray(expected) && Array.isArray(actual)) {\n    if (expected.length !== actual.length) {\n      return false;\n    }\n    return expected.every(function (expVal, idx) {\n      return deepEqual(expVal, actual[idx]);\n    });\n  }\n  if (isPlainObject(expected) && isPlainObject(actual)) {\n    var allKeys = Array.from(new Set(Object.keys(expected).concat(Object.keys(actual))));\n    return allKeys.every(function (key) {\n      return deepEqual(expected[key], actual[key]);\n    });\n  }\n  return expected === actual;\n}\nvar timeouts = [];\nvar intervals = [];\nvar immediates = [];\nvar wrapTimer = function wrapTimer(timer, ids) {\n  return function () {\n    var id = timer.apply(void 0, arguments);\n    ids.push(id);\n    return id;\n  };\n};\nvar setTimeout = wrapTimer(timers.setTimeout, timeouts);\nvar setInterval = wrapTimer(timers.setInterval, intervals);\nvar setImmediate = wrapTimer(timers.setImmediate, immediates);\nfunction clearTimer(clear, ids) {\n  while (ids.length) {\n    clear(ids.shift());\n  }\n}\nfunction removeAllTimers() {\n  clearTimer(clearTimeout, timeouts);\n  clearTimer(clearInterval, intervals);\n  clearTimer(clearImmediate, immediates);\n}\n\n/**\n * Check if the Client Request has been cancelled.\n *\n * Until Node 14 is the minimum, we need to look at both flags to see if the request has been cancelled.\n * The two flags have the same purpose, but the Node maintainers are migrating from `abort(ed)` to\n * `destroy(ed)` terminology, to be more consistent with `stream.Writable`.\n * In Node 14.x+, Calling `abort()` will set both `aborted` and `destroyed` to true, however,\n * calling `destroy()` will only set `destroyed` to true.\n * Falling back on checking if the socket is destroyed to cover the case of Node <14.x where\n * `destroy()` is called, but `destroyed` is undefined.\n *\n * Node Client Request history:\n * - `request.abort()`: Added in: v0.3.8, Deprecated since: v14.1.0, v13.14.0\n * - `request.aborted`: Added in: v0.11.14, Became a boolean instead of a timestamp: v11.0.0, Not deprecated (yet)\n * - `request.destroy()`: Added in: v0.3.0\n * - `request.destroyed`: Added in: v14.1.0, v13.14.0\n *\n * @param {ClientRequest} req\n * @returns {boolean}\n */\nfunction isRequestDestroyed(req) {\n  return !!(req.destroyed === true || req.aborted || req.socket && req.socket.destroyed);\n}\nmodule.exports = {\n  contentEncoding: contentEncoding,\n  dataEqual: dataEqual,\n  deleteHeadersField: deleteHeadersField,\n  forEachHeader: forEachHeader,\n  formatQueryValue: formatQueryValue,\n  headersArrayToObject: headersArrayToObject,\n  headersFieldNamesToLowerCase: headersFieldNamesToLowerCase,\n  headersFieldsArrayToLowerCase: headersFieldsArrayToLowerCase,\n  headersInputToRawArray: headersInputToRawArray,\n  isContentEncoded: isContentEncoded,\n  isJSONContent: isJSONContent,\n  isPlainObject: isPlainObject,\n  isRequestDestroyed: isRequestDestroyed,\n  isStream: isStream,\n  isUtf8Representable: isUtf8Representable,\n  matchStringOrRegexp: matchStringOrRegexp,\n  normalizeClientRequestArgs: normalizeClientRequestArgs,\n  normalizeOrigin: normalizeOrigin,\n  normalizeRequestOptions: normalizeRequestOptions,\n  overrideRequests: overrideRequests,\n  percentDecode: percentDecode,\n  percentEncode: percentEncode,\n  removeAllTimers: removeAllTimers,\n  restoreOverriddenRequests: restoreOverriddenRequests,\n  setImmediate: setImmediate,\n  setInterval: setInterval,\n  setTimeout: setTimeout,\n  stringifyRequest: stringifyRequest\n};","map":{"version":3,"names":["debug","require","isPlainObject","set","timers","url","util","normalizeRequestOptions","options","proto","port","host","hostname","split","length","forEach","attr","toLowerCase","isUtf8Representable","buffer","utfEncodedBuffer","toString","reconstructedBuffer","Buffer","from","equals","requestOverrides","overrideRequests","newRequest","moduleName","module","http","https","overriddenRequest","request","overriddenGet","get","Error","input","callback","bind","req","end","restoreOverriddenRequests","Object","entries","normalizeOrigin","hostHasPort","includes","portIsStandard","portStr","stringifyRequest","body","method","path","origin","log","headers","JSON","stringify","isContentEncoded","contentEncoding","encoder","undefined","isJSONContent","contentType","String","startsWith","headersFieldNamesToLowerCase","throwOnDuplicate","lowerCaseHeaders","fieldName","fieldValue","key","headersFieldsArrayToLowerCase","Set","map","headersInputToRawArray","Array","isArray","types","isMap","concat","k","v","headersArrayToObject","rawHeaders","accumulator","forEachHeader","value","addHeaderLine","noDuplicatesHeaders","name","values","push","has","separator","join","deleteHeadersField","fieldNameToDelete","lowerCaseFieldNameToDelete","keys","filter","i","percentDecode","str","decodeURIComponent","replace","e","percentEncode","encodeURIComponent","c","charCodeAt","toUpperCase","matchStringOrRegexp","target","pattern","targetStr","RegExp","lastIndex","test","formatQueryValue","stringFormattingFn","val","idx","reduce","acc","subKey","subVal","subPair","isStream","obj","isBuffer","setEncoding","normalizeClientRequestArgs","cb","urlToOptions","URL","assign","protocol","slice","hash","search","pathname","href","Number","username","password","auth","dataEqual","expected","actual","expand","deepEqual","every","expVal","allKeys","timeouts","intervals","immediates","wrapTimer","timer","ids","id","setTimeout","setInterval","setImmediate","clearTimer","clear","shift","removeAllTimers","clearTimeout","clearInterval","clearImmediate","isRequestDestroyed","destroyed","aborted","socket","exports"],"sources":["/Users/lieo/diabetes/CUT2DMTest/node_modules/nock/lib/common.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')('nock.common')\nconst isPlainObject = require('lodash/isPlainObject')\nconst set = require('lodash/set')\nconst timers = require('timers')\nconst url = require('url')\nconst util = require('util')\n\n/**\n * Normalizes the request options so that it always has `host` property.\n *\n * @param  {Object} options - a parsed options object of the request\n */\nfunction normalizeRequestOptions(options) {\n  options.proto = options.proto || 'http'\n  options.port = options.port || (options.proto === 'http' ? 80 : 443)\n  if (options.host) {\n    debug('options.host:', options.host)\n    if (!options.hostname) {\n      if (options.host.split(':').length === 2) {\n        options.hostname = options.host.split(':')[0]\n      } else {\n        options.hostname = options.host\n      }\n    }\n  }\n  debug('options.hostname in the end: %j', options.hostname)\n  options.host = `${options.hostname || 'localhost'}:${options.port}`\n  debug('options.host in the end: %j', options.host)\n\n  /// lowercase host names\n  ;['hostname', 'host'].forEach(function (attr) {\n    if (options[attr]) {\n      options[attr] = options[attr].toLowerCase()\n    }\n  })\n\n  return options\n}\n\n/**\n * Returns true if the data contained in buffer can be reconstructed\n * from its utf8 representation.\n *\n * @param  {Object} buffer - a Buffer object\n * @returns {boolean}\n */\nfunction isUtf8Representable(buffer) {\n  const utfEncodedBuffer = buffer.toString('utf8')\n  const reconstructedBuffer = Buffer.from(utfEncodedBuffer, 'utf8')\n  return reconstructedBuffer.equals(buffer)\n}\n\n//  Array where all information about all the overridden requests are held.\nlet requestOverrides = {}\n\n/**\n * Overrides the current `request` function of `http` and `https` modules with\n * our own version which intercepts issues HTTP/HTTPS requests and forwards them\n * to the given `newRequest` function.\n *\n * @param  {Function} newRequest - a function handling requests; it accepts four arguments:\n *   - proto - a string with the overridden module's protocol name (either `http` or `https`)\n *   - overriddenRequest - the overridden module's request function already bound to module's object\n *   - options - the options of the issued request\n *   - callback - the callback of the issued request\n */\nfunction overrideRequests(newRequest) {\n  debug('overriding requests')\n  ;['http', 'https'].forEach(function (proto) {\n    debug('- overriding request for', proto)\n\n    const moduleName = proto // 1 to 1 match of protocol and module is fortunate :)\n    const module = {\n      http: require('http'),\n      https: require('https'),\n    }[moduleName]\n    const overriddenRequest = module.request\n    const overriddenGet = module.get\n\n    if (requestOverrides[moduleName]) {\n      throw new Error(\n        `Module's request already overridden for ${moduleName} protocol.`\n      )\n    }\n\n    //  Store the properties of the overridden request so that it can be restored later on.\n    requestOverrides[moduleName] = {\n      module,\n      request: overriddenRequest,\n      get: overriddenGet,\n    }\n    // https://nodejs.org/api/http.html#http_http_request_url_options_callback\n    module.request = function (input, options, callback) {\n      return newRequest(proto, overriddenRequest.bind(module), [\n        input,\n        options,\n        callback,\n      ])\n    }\n    // https://nodejs.org/api/http.html#http_http_get_options_callback\n    module.get = function (input, options, callback) {\n      const req = newRequest(proto, overriddenGet.bind(module), [\n        input,\n        options,\n        callback,\n      ])\n      req.end()\n      return req\n    }\n\n    debug('- overridden request for', proto)\n  })\n}\n\n/**\n * Restores `request` function of `http` and `https` modules to values they\n * held before they were overridden by us.\n */\nfunction restoreOverriddenRequests() {\n  debug('restoring requests')\n  Object.entries(requestOverrides).forEach(\n    ([proto, { module, request, get }]) => {\n      debug('- restoring request for', proto)\n      module.request = request\n      module.get = get\n      debug('- restored request for', proto)\n    }\n  )\n  requestOverrides = {}\n}\n\n/**\n * In WHATWG URL vernacular, this returns the origin portion of a URL.\n * However, the port is not included if it's standard and not already present on the host.\n */\nfunction normalizeOrigin(proto, host, port) {\n  const hostHasPort = host.includes(':')\n  const portIsStandard =\n    (proto === 'http' && (port === 80 || port === '80')) ||\n    (proto === 'https' && (port === 443 || port === '443'))\n  const portStr = hostHasPort || portIsStandard ? '' : `:${port}`\n\n  return `${proto}://${host}${portStr}`\n}\n\n/**\n * Get high level information about request as string\n * @param  {Object} options\n * @param  {string} options.method\n * @param  {number|string} options.port\n * @param  {string} options.proto Set internally. always http or https\n * @param  {string} options.hostname\n * @param  {string} options.path\n * @param  {Object} options.headers\n * @param  {string} body\n * @return {string}\n */\nfunction stringifyRequest(options, body) {\n  const { method = 'GET', path = '', port } = options\n  const origin = normalizeOrigin(options.proto, options.hostname, port)\n\n  const log = {\n    method,\n    url: `${origin}${path}`,\n    headers: options.headers,\n  }\n\n  if (body) {\n    log.body = body\n  }\n\n  return JSON.stringify(log, null, 2)\n}\n\nfunction isContentEncoded(headers) {\n  const contentEncoding = headers['content-encoding']\n  return typeof contentEncoding === 'string' && contentEncoding !== ''\n}\n\nfunction contentEncoding(headers, encoder) {\n  const contentEncoding = headers['content-encoding']\n  return contentEncoding !== undefined && contentEncoding.toString() === encoder\n}\n\nfunction isJSONContent(headers) {\n  // https://tools.ietf.org/html/rfc8259\n  const contentType = String(headers['content-type'] || '').toLowerCase()\n  return contentType.startsWith('application/json')\n}\n\n/**\n * Return a new object with all field names of the headers lower-cased.\n *\n * Duplicates throw an error.\n */\nfunction headersFieldNamesToLowerCase(headers, throwOnDuplicate) {\n  if (!isPlainObject(headers)) {\n    throw Error('Headers must be provided as an object')\n  }\n\n  const lowerCaseHeaders = {}\n  Object.entries(headers).forEach(([fieldName, fieldValue]) => {\n    const key = fieldName.toLowerCase()\n    if (lowerCaseHeaders[key] !== undefined) {\n      if (throwOnDuplicate) {\n        throw Error(\n          `Failed to convert header keys to lower case due to field name conflict: ${key}`\n        )\n      } else {\n        debug(\n          `Duplicate header provided in request: ${key}. Only the last value can be matched.`\n        )\n      }\n    }\n    lowerCaseHeaders[key] = fieldValue\n  })\n\n  return lowerCaseHeaders\n}\n\nconst headersFieldsArrayToLowerCase = headers => [\n  ...new Set(headers.map(fieldName => fieldName.toLowerCase())),\n]\n\n/**\n * Converts the various accepted formats of headers into a flat array representing \"raw headers\".\n *\n * Nock allows headers to be provided as a raw array, a plain object, or a Map.\n *\n * While all the header names are expected to be strings, the values are left intact as they can\n * be functions, strings, or arrays of strings.\n *\n *  https://nodejs.org/api/http.html#http_message_rawheaders\n */\nfunction headersInputToRawArray(headers) {\n  if (headers === undefined) {\n    return []\n  }\n\n  if (Array.isArray(headers)) {\n    // If the input is an array, assume it's already in the raw format and simply return a copy\n    // but throw an error if there aren't an even number of items in the array\n    if (headers.length % 2) {\n      throw new Error(\n        `Raw headers must be provided as an array with an even number of items. [fieldName, value, ...]`\n      )\n    }\n    return [...headers]\n  }\n\n  // [].concat(...) is used instead of Array.flat until v11 is the minimum Node version\n  if (util.types.isMap(headers)) {\n    return [].concat(...Array.from(headers, ([k, v]) => [k.toString(), v]))\n  }\n\n  if (isPlainObject(headers)) {\n    return [].concat(...Object.entries(headers))\n  }\n\n  throw new Error(\n    `Headers must be provided as an array of raw values, a Map, or a plain Object. ${headers}`\n  )\n}\n\n/**\n * Converts an array of raw headers to an object, using the same rules as Nodes `http.IncomingMessage.headers`.\n *\n * Header names/keys are lower-cased.\n */\nfunction headersArrayToObject(rawHeaders) {\n  if (!Array.isArray(rawHeaders)) {\n    throw Error('Expected a header array')\n  }\n\n  const accumulator = {}\n\n  forEachHeader(rawHeaders, (value, fieldName) => {\n    addHeaderLine(accumulator, fieldName, value)\n  })\n\n  return accumulator\n}\n\nconst noDuplicatesHeaders = new Set([\n  'age',\n  'authorization',\n  'content-length',\n  'content-type',\n  'etag',\n  'expires',\n  'from',\n  'host',\n  'if-modified-since',\n  'if-unmodified-since',\n  'last-modified',\n  'location',\n  'max-forwards',\n  'proxy-authorization',\n  'referer',\n  'retry-after',\n  'user-agent',\n])\n\n/**\n * Set key/value data in accordance with Node's logic for folding duplicate headers.\n *\n * The `value` param should be a function, string, or array of strings.\n *\n * Node's docs and source:\n * https://nodejs.org/api/http.html#http_message_headers\n * https://github.com/nodejs/node/blob/908292cf1f551c614a733d858528ffb13fb3a524/lib/_http_incoming.js#L245\n *\n * Header names are lower-cased.\n * Duplicates in raw headers are handled in the following ways, depending on the header name:\n * - Duplicates of field names listed in `noDuplicatesHeaders` (above) are discarded.\n * - `set-cookie` is always an array. Duplicates are added to the array.\n * - For duplicate `cookie` headers, the values are joined together with '; '.\n * - For all other headers, the values are joined together with ', '.\n *\n * Node's implementation is larger because it highly optimizes for not having to call `toLowerCase()`.\n * We've opted to always call `toLowerCase` in exchange for a more concise function.\n *\n * While Node has the luxury of knowing `value` is always a string, we do an extra step of coercion at the top.\n */\nfunction addHeaderLine(headers, name, value) {\n  let values // code below expects `values` to be an array of strings\n  if (typeof value === 'function') {\n    // Function values are evaluated towards the end of the response, before that we use a placeholder\n    // string just to designate that the header exists. Useful when `Content-Type` is set with a function.\n    values = [value.name]\n  } else if (Array.isArray(value)) {\n    values = value.map(String)\n  } else {\n    values = [String(value)]\n  }\n\n  const key = name.toLowerCase()\n  if (key === 'set-cookie') {\n    // Array header -- only Set-Cookie at the moment\n    if (headers['set-cookie'] === undefined) {\n      headers['set-cookie'] = values\n    } else {\n      headers['set-cookie'].push(...values)\n    }\n  } else if (noDuplicatesHeaders.has(key)) {\n    if (headers[key] === undefined) {\n      // Drop duplicates\n      headers[key] = values[0]\n    }\n  } else {\n    if (headers[key] !== undefined) {\n      values = [headers[key], ...values]\n    }\n\n    const separator = key === 'cookie' ? '; ' : ', '\n    headers[key] = values.join(separator)\n  }\n}\n\n/**\n * Deletes the given `fieldName` property from `headers` object by performing\n * case-insensitive search through keys.\n *\n * @headers   {Object} headers - object of header field names and values\n * @fieldName {String} field name - string with the case-insensitive field name\n */\nfunction deleteHeadersField(headers, fieldNameToDelete) {\n  if (!isPlainObject(headers)) {\n    throw Error('headers must be an object')\n  }\n\n  if (typeof fieldNameToDelete !== 'string') {\n    throw Error('field name must be a string')\n  }\n\n  const lowerCaseFieldNameToDelete = fieldNameToDelete.toLowerCase()\n\n  // Search through the headers and delete all values whose field name matches the given field name.\n  Object.keys(headers)\n    .filter(fieldName => fieldName.toLowerCase() === lowerCaseFieldNameToDelete)\n    .forEach(fieldName => delete headers[fieldName])\n}\n\n/**\n * Utility for iterating over a raw headers array.\n *\n * The callback is called with:\n *  - The header value. string, array of strings, or a function\n *  - The header field name. string\n *  - Index of the header field in the raw header array.\n */\nfunction forEachHeader(rawHeaders, callback) {\n  for (let i = 0; i < rawHeaders.length; i += 2) {\n    callback(rawHeaders[i + 1], rawHeaders[i], i)\n  }\n}\n\nfunction percentDecode(str) {\n  try {\n    return decodeURIComponent(str.replace(/\\+/g, ' '))\n  } catch (e) {\n    return str\n  }\n}\n\n/**\n * URI encode the provided string, stringently adhering to RFC 3986.\n *\n * RFC 3986 reserves !, ', (, ), and * but encodeURIComponent does not encode them so we do it manually.\n *\n * https://tools.ietf.org/html/rfc3986\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\n */\nfunction percentEncode(str) {\n  return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n    return `%${c.charCodeAt(0).toString(16).toUpperCase()}`\n  })\n}\n\nfunction matchStringOrRegexp(target, pattern) {\n  const targetStr =\n    target === undefined || target === null ? '' : String(target)\n\n  if (pattern instanceof RegExp) {\n    // if the regexp happens to have a global flag, we want to ensure we test the entire target\n    pattern.lastIndex = 0\n    return pattern.test(targetStr)\n  }\n  return targetStr === String(pattern)\n}\n\n/**\n * Formats a query parameter.\n *\n * @param key                The key of the query parameter to format.\n * @param value              The value of the query parameter to format.\n * @param stringFormattingFn The function used to format string values. Can\n *                           be used to encode or decode the query value.\n *\n * @returns *[] the formatted [key, value] pair.\n */\nfunction formatQueryValue(key, value, stringFormattingFn) {\n  // TODO: Probably refactor code to replace `switch(true)` with `if`/`else`.\n  switch (true) {\n    case typeof value === 'number': // fall-through\n    case typeof value === 'boolean':\n      value = value.toString()\n      break\n    case value === null:\n    case value === undefined:\n      value = ''\n      break\n    case typeof value === 'string':\n      if (stringFormattingFn) {\n        value = stringFormattingFn(value)\n      }\n      break\n    case value instanceof RegExp:\n      break\n    case Array.isArray(value): {\n      value = value.map(function (val, idx) {\n        return formatQueryValue(idx, val, stringFormattingFn)[1]\n      })\n      break\n    }\n    case typeof value === 'object': {\n      value = Object.entries(value).reduce(function (acc, [subKey, subVal]) {\n        const subPair = formatQueryValue(subKey, subVal, stringFormattingFn)\n        acc[subPair[0]] = subPair[1]\n\n        return acc\n      }, {})\n      break\n    }\n  }\n\n  if (stringFormattingFn) key = stringFormattingFn(key)\n  return [key, value]\n}\n\nfunction isStream(obj) {\n  return (\n    obj &&\n    typeof obj !== 'string' &&\n    !Buffer.isBuffer(obj) &&\n    typeof obj.setEncoding === 'function'\n  )\n}\n\n/**\n * Converts the arguments from the various signatures of http[s].request into a standard\n * options object and an optional callback function.\n *\n * https://nodejs.org/api/http.html#http_http_request_url_options_callback\n *\n * Taken from the beginning of the native `ClientRequest`.\n * https://github.com/nodejs/node/blob/908292cf1f551c614a733d858528ffb13fb3a524/lib/_http_client.js#L68\n */\nfunction normalizeClientRequestArgs(input, options, cb) {\n  if (typeof input === 'string') {\n    input = urlToOptions(new url.URL(input))\n  } else if (input instanceof url.URL) {\n    input = urlToOptions(input)\n  } else {\n    cb = options\n    options = input\n    input = null\n  }\n\n  if (typeof options === 'function') {\n    cb = options\n    options = input || {}\n  } else {\n    options = Object.assign(input || {}, options)\n  }\n\n  return { options, callback: cb }\n}\n\n/**\n * Utility function that converts a URL object into an ordinary\n * options object as expected by the http.request and https.request APIs.\n *\n * This was copied from Node's source\n * https://github.com/nodejs/node/blob/908292cf1f551c614a733d858528ffb13fb3a524/lib/internal/url.js#L1257\n */\nfunction urlToOptions(url) {\n  const options = {\n    protocol: url.protocol,\n    hostname:\n      typeof url.hostname === 'string' && url.hostname.startsWith('[')\n        ? url.hostname.slice(1, -1)\n        : url.hostname,\n    hash: url.hash,\n    search: url.search,\n    pathname: url.pathname,\n    path: `${url.pathname}${url.search || ''}`,\n    href: url.href,\n  }\n  if (url.port !== '') {\n    options.port = Number(url.port)\n  }\n  if (url.username || url.password) {\n    options.auth = `${url.username}:${url.password}`\n  }\n  return options\n}\n\n/**\n * Determines if request data matches the expected schema.\n *\n * Used for comparing decoded search parameters, request body JSON objects,\n * and URL decoded request form bodies.\n *\n * Performs a general recursive strict comparison with two caveats:\n *  - The expected data can use regexp to compare values\n *  - JSON path notation and nested objects are considered equal\n */\nconst dataEqual = (expected, actual) => {\n  if (isPlainObject(expected)) {\n    expected = expand(expected)\n  }\n  if (isPlainObject(actual)) {\n    actual = expand(actual)\n  }\n  return deepEqual(expected, actual)\n}\n\n/**\n * Converts flat objects whose keys use JSON path notation to nested objects.\n *\n * The input object is not mutated.\n *\n * @example\n * { 'foo[bar][0]': 'baz' } -> { foo: { bar: [ 'baz' ] } }\n */\nconst expand = input =>\n  Object.entries(input).reduce((acc, [k, v]) => set(acc, k, v), {})\n\n/**\n * Performs a recursive strict comparison between two values.\n *\n * Expected values or leaf nodes of expected object values that are RegExp use test() for comparison.\n */\nfunction deepEqual(expected, actual) {\n  debug('deepEqual comparing', typeof expected, expected, typeof actual, actual)\n  if (expected instanceof RegExp) {\n    return expected.test(actual)\n  }\n\n  if (Array.isArray(expected) && Array.isArray(actual)) {\n    if (expected.length !== actual.length) {\n      return false\n    }\n\n    return expected.every((expVal, idx) => deepEqual(expVal, actual[idx]))\n  }\n\n  if (isPlainObject(expected) && isPlainObject(actual)) {\n    const allKeys = Array.from(\n      new Set(Object.keys(expected).concat(Object.keys(actual)))\n    )\n\n    return allKeys.every(key => deepEqual(expected[key], actual[key]))\n  }\n\n  return expected === actual\n}\n\nconst timeouts = []\nconst intervals = []\nconst immediates = []\n\nconst wrapTimer =\n  (timer, ids) =>\n  (...args) => {\n    const id = timer(...args)\n    ids.push(id)\n    return id\n  }\n\nconst setTimeout = wrapTimer(timers.setTimeout, timeouts)\nconst setInterval = wrapTimer(timers.setInterval, intervals)\nconst setImmediate = wrapTimer(timers.setImmediate, immediates)\n\nfunction clearTimer(clear, ids) {\n  while (ids.length) {\n    clear(ids.shift())\n  }\n}\n\nfunction removeAllTimers() {\n  clearTimer(clearTimeout, timeouts)\n  clearTimer(clearInterval, intervals)\n  clearTimer(clearImmediate, immediates)\n}\n\n/**\n * Check if the Client Request has been cancelled.\n *\n * Until Node 14 is the minimum, we need to look at both flags to see if the request has been cancelled.\n * The two flags have the same purpose, but the Node maintainers are migrating from `abort(ed)` to\n * `destroy(ed)` terminology, to be more consistent with `stream.Writable`.\n * In Node 14.x+, Calling `abort()` will set both `aborted` and `destroyed` to true, however,\n * calling `destroy()` will only set `destroyed` to true.\n * Falling back on checking if the socket is destroyed to cover the case of Node <14.x where\n * `destroy()` is called, but `destroyed` is undefined.\n *\n * Node Client Request history:\n * - `request.abort()`: Added in: v0.3.8, Deprecated since: v14.1.0, v13.14.0\n * - `request.aborted`: Added in: v0.11.14, Became a boolean instead of a timestamp: v11.0.0, Not deprecated (yet)\n * - `request.destroy()`: Added in: v0.3.0\n * - `request.destroyed`: Added in: v14.1.0, v13.14.0\n *\n * @param {ClientRequest} req\n * @returns {boolean}\n */\nfunction isRequestDestroyed(req) {\n  return !!(\n    req.destroyed === true ||\n    req.aborted ||\n    (req.socket && req.socket.destroyed)\n  )\n}\n\nmodule.exports = {\n  contentEncoding,\n  dataEqual,\n  deleteHeadersField,\n  forEachHeader,\n  formatQueryValue,\n  headersArrayToObject,\n  headersFieldNamesToLowerCase,\n  headersFieldsArrayToLowerCase,\n  headersInputToRawArray,\n  isContentEncoded,\n  isJSONContent,\n  isPlainObject,\n  isRequestDestroyed,\n  isStream,\n  isUtf8Representable,\n  matchStringOrRegexp,\n  normalizeClientRequestArgs,\n  normalizeOrigin,\n  normalizeRequestOptions,\n  overrideRequests,\n  percentDecode,\n  percentEncode,\n  removeAllTimers,\n  restoreOverriddenRequests,\n  setImmediate,\n  setInterval,\n  setTimeout,\n  stringifyRequest,\n}\n"],"mappings":"AAAA,YAAY;;AAAA;AAAA;AAEZ,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC,CAAC,aAAa,CAAC;AAC7C,IAAMC,aAAa,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AACrD,IAAME,GAAG,GAAGF,OAAO,CAAC,YAAY,CAAC;AACjC,IAAMG,MAAM,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAChC,IAAMI,GAAG,GAAGJ,OAAO,CAAC,KAAK,CAAC;AAC1B,IAAMK,IAAI,GAAGL,OAAO,CAAC,MAAM,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA,SAASM,uBAAuB,CAACC,OAAO,EAAE;EACxCA,OAAO,CAACC,KAAK,GAAGD,OAAO,CAACC,KAAK,IAAI,MAAM;EACvCD,OAAO,CAACE,IAAI,GAAGF,OAAO,CAACE,IAAI,KAAKF,OAAO,CAACC,KAAK,KAAK,MAAM,GAAG,EAAE,GAAG,GAAG,CAAC;EACpE,IAAID,OAAO,CAACG,IAAI,EAAE;IAChBX,KAAK,CAAC,eAAe,EAAEQ,OAAO,CAACG,IAAI,CAAC;IACpC,IAAI,CAACH,OAAO,CAACI,QAAQ,EAAE;MACrB,IAAIJ,OAAO,CAACG,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;QACxCN,OAAO,CAACI,QAAQ,GAAGJ,OAAO,CAACG,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC/C,CAAC,MAAM;QACLL,OAAO,CAACI,QAAQ,GAAGJ,OAAO,CAACG,IAAI;MACjC;IACF;EACF;EACAX,KAAK,CAAC,iCAAiC,EAAEQ,OAAO,CAACI,QAAQ,CAAC;EAC1DJ,OAAO,CAACG,IAAI,aAAMH,OAAO,CAACI,QAAQ,IAAI,WAAW,cAAIJ,OAAO,CAACE,IAAI,CAAE;EACnEV,KAAK,CAAC,6BAA6B,EAAEQ,OAAO,CAACG,IAAI;;EAEjD;EAAA;EACC,CAAC,UAAU,EAAE,MAAM,CAAC,CAACI,OAAO,CAAC,UAAUC,IAAI,EAAE;IAC5C,IAAIR,OAAO,CAACQ,IAAI,CAAC,EAAE;MACjBR,OAAO,CAACQ,IAAI,CAAC,GAAGR,OAAO,CAACQ,IAAI,CAAC,CAACC,WAAW,EAAE;IAC7C;EACF,CAAC,CAAC;EAEF,OAAOT,OAAO;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASU,mBAAmB,CAACC,MAAM,EAAE;EACnC,IAAMC,gBAAgB,GAAGD,MAAM,CAACE,QAAQ,CAAC,MAAM,CAAC;EAChD,IAAMC,mBAAmB,GAAGC,MAAM,CAACC,IAAI,CAACJ,gBAAgB,EAAE,MAAM,CAAC;EACjE,OAAOE,mBAAmB,CAACG,MAAM,CAACN,MAAM,CAAC;AAC3C;;AAEA;AACA,IAAIO,gBAAgB,GAAG,CAAC,CAAC;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgB,CAACC,UAAU,EAAE;EACpC5B,KAAK,CAAC,qBAAqB,CAAC;EAC3B,CAAC,MAAM,EAAE,OAAO,CAAC,CAACe,OAAO,CAAC,UAAUN,KAAK,EAAE;IAC1CT,KAAK,CAAC,0BAA0B,EAAES,KAAK,CAAC;IAExC,IAAMoB,UAAU,GAAGpB,KAAK,EAAC;IACzB,IAAMqB,MAAM,GAAG;MACbC,IAAI,EAAE9B,OAAO,CAAC,MAAM,CAAC;MACrB+B,KAAK,EAAE/B,OAAO,CAAC,OAAO;IACxB,CAAC,CAAC4B,UAAU,CAAC;IACb,IAAMI,iBAAiB,GAAGH,MAAM,CAACI,OAAO;IACxC,IAAMC,aAAa,GAAGL,MAAM,CAACM,GAAG;IAEhC,IAAIV,gBAAgB,CAACG,UAAU,CAAC,EAAE;MAChC,MAAM,IAAIQ,KAAK,mDAC8BR,UAAU,gBACtD;IACH;;IAEA;IACAH,gBAAgB,CAACG,UAAU,CAAC,GAAG;MAC7BC,MAAM,EAANA,MAAM;MACNI,OAAO,EAAED,iBAAiB;MAC1BG,GAAG,EAAED;IACP,CAAC;IACD;IACAL,MAAM,CAACI,OAAO,GAAG,UAAUI,KAAK,EAAE9B,OAAO,EAAE+B,QAAQ,EAAE;MACnD,OAAOX,UAAU,CAACnB,KAAK,EAAEwB,iBAAiB,CAACO,IAAI,CAACV,MAAM,CAAC,EAAE,CACvDQ,KAAK,EACL9B,OAAO,EACP+B,QAAQ,CACT,CAAC;IACJ,CAAC;IACD;IACAT,MAAM,CAACM,GAAG,GAAG,UAAUE,KAAK,EAAE9B,OAAO,EAAE+B,QAAQ,EAAE;MAC/C,IAAME,GAAG,GAAGb,UAAU,CAACnB,KAAK,EAAE0B,aAAa,CAACK,IAAI,CAACV,MAAM,CAAC,EAAE,CACxDQ,KAAK,EACL9B,OAAO,EACP+B,QAAQ,CACT,CAAC;MACFE,GAAG,CAACC,GAAG,EAAE;MACT,OAAOD,GAAG;IACZ,CAAC;IAEDzC,KAAK,CAAC,0BAA0B,EAAES,KAAK,CAAC;EAC1C,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA,SAASkC,yBAAyB,GAAG;EACnC3C,KAAK,CAAC,oBAAoB,CAAC;EAC3B4C,MAAM,CAACC,OAAO,CAACnB,gBAAgB,CAAC,CAACX,OAAO,CACtC,gBAAuC;IAAA;MAArCN,KAAK;MAAA;MAAIqB,MAAM,UAANA,MAAM;MAAEI,OAAO,UAAPA,OAAO;MAAEE,GAAG,UAAHA,GAAG;IAC7BpC,KAAK,CAAC,yBAAyB,EAAES,KAAK,CAAC;IACvCqB,MAAM,CAACI,OAAO,GAAGA,OAAO;IACxBJ,MAAM,CAACM,GAAG,GAAGA,GAAG;IAChBpC,KAAK,CAAC,wBAAwB,EAAES,KAAK,CAAC;EACxC,CAAC,CACF;EACDiB,gBAAgB,GAAG,CAAC,CAAC;AACvB;;AAEA;AACA;AACA;AACA;AACA,SAASoB,eAAe,CAACrC,KAAK,EAAEE,IAAI,EAAED,IAAI,EAAE;EAC1C,IAAMqC,WAAW,GAAGpC,IAAI,CAACqC,QAAQ,CAAC,GAAG,CAAC;EACtC,IAAMC,cAAc,GACjBxC,KAAK,KAAK,MAAM,KAAKC,IAAI,KAAK,EAAE,IAAIA,IAAI,KAAK,IAAI,CAAC,IAClDD,KAAK,KAAK,OAAO,KAAKC,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,KAAK,CAAE;EACzD,IAAMwC,OAAO,GAAGH,WAAW,IAAIE,cAAc,GAAG,EAAE,cAAOvC,IAAI,CAAE;EAE/D,iBAAUD,KAAK,gBAAME,IAAI,SAAGuC,OAAO;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgB,CAAC3C,OAAO,EAAE4C,IAAI,EAAE;EACvC,sBAA4C5C,OAAO,CAA3C6C,MAAM;IAANA,MAAM,gCAAG,KAAK;IAAA,gBAAsB7C,OAAO,CAA3B8C,IAAI;IAAJA,IAAI,8BAAG,EAAE;IAAE5C,IAAI,GAAKF,OAAO,CAAhBE,IAAI;EACvC,IAAM6C,MAAM,GAAGT,eAAe,CAACtC,OAAO,CAACC,KAAK,EAAED,OAAO,CAACI,QAAQ,EAAEF,IAAI,CAAC;EAErE,IAAM8C,GAAG,GAAG;IACVH,MAAM,EAANA,MAAM;IACNhD,GAAG,YAAKkD,MAAM,SAAGD,IAAI,CAAE;IACvBG,OAAO,EAAEjD,OAAO,CAACiD;EACnB,CAAC;EAED,IAAIL,IAAI,EAAE;IACRI,GAAG,CAACJ,IAAI,GAAGA,IAAI;EACjB;EAEA,OAAOM,IAAI,CAACC,SAAS,CAACH,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;AACrC;AAEA,SAASI,gBAAgB,CAACH,OAAO,EAAE;EACjC,IAAMI,eAAe,GAAGJ,OAAO,CAAC,kBAAkB,CAAC;EACnD,OAAO,OAAOI,eAAe,KAAK,QAAQ,IAAIA,eAAe,KAAK,EAAE;AACtE;AAEA,SAASA,eAAe,CAACJ,OAAO,EAAEK,OAAO,EAAE;EACzC,IAAMD,eAAe,GAAGJ,OAAO,CAAC,kBAAkB,CAAC;EACnD,OAAOI,eAAe,KAAKE,SAAS,IAAIF,eAAe,CAACxC,QAAQ,EAAE,KAAKyC,OAAO;AAChF;AAEA,SAASE,aAAa,CAACP,OAAO,EAAE;EAC9B;EACA,IAAMQ,WAAW,GAAGC,MAAM,CAACT,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,CAACxC,WAAW,EAAE;EACvE,OAAOgD,WAAW,CAACE,UAAU,CAAC,kBAAkB,CAAC;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,4BAA4B,CAACX,OAAO,EAAEY,gBAAgB,EAAE;EAC/D,IAAI,CAACnE,aAAa,CAACuD,OAAO,CAAC,EAAE;IAC3B,MAAMpB,KAAK,CAAC,uCAAuC,CAAC;EACtD;EAEA,IAAMiC,gBAAgB,GAAG,CAAC,CAAC;EAC3B1B,MAAM,CAACC,OAAO,CAACY,OAAO,CAAC,CAAC1C,OAAO,CAAC,iBAA6B;IAAA;MAA3BwD,SAAS;MAAEC,UAAU;IACrD,IAAMC,GAAG,GAAGF,SAAS,CAACtD,WAAW,EAAE;IACnC,IAAIqD,gBAAgB,CAACG,GAAG,CAAC,KAAKV,SAAS,EAAE;MACvC,IAAIM,gBAAgB,EAAE;QACpB,MAAMhC,KAAK,mFACkEoC,GAAG,EAC/E;MACH,CAAC,MAAM;QACLzE,KAAK,iDACsCyE,GAAG,2CAC7C;MACH;IACF;IACAH,gBAAgB,CAACG,GAAG,CAAC,GAAGD,UAAU;EACpC,CAAC,CAAC;EAEF,OAAOF,gBAAgB;AACzB;AAEA,IAAMI,6BAA6B,GAAG,SAAhCA,6BAA6B,CAAGjB,OAAO;EAAA,0BACxC,IAAIkB,GAAG,CAAClB,OAAO,CAACmB,GAAG,CAAC,UAAAL,SAAS;IAAA,OAAIA,SAAS,CAACtD,WAAW,EAAE;EAAA,EAAC,CAAC;AAAA,CAC9D;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS4D,sBAAsB,CAACpB,OAAO,EAAE;EACvC,IAAIA,OAAO,KAAKM,SAAS,EAAE;IACzB,OAAO,EAAE;EACX;EAEA,IAAIe,KAAK,CAACC,OAAO,CAACtB,OAAO,CAAC,EAAE;IAC1B;IACA;IACA,IAAIA,OAAO,CAAC3C,MAAM,GAAG,CAAC,EAAE;MACtB,MAAM,IAAIuB,KAAK,kGAEd;IACH;IACA,0BAAWoB,OAAO;EACpB;;EAEA;EACA,IAAInD,IAAI,CAAC0E,KAAK,CAACC,KAAK,CAACxB,OAAO,CAAC,EAAE;IAAA;IAC7B,OAAO,WAAE,EAACyB,MAAM,iCAAIJ,KAAK,CAACtD,IAAI,CAACiC,OAAO,EAAE;MAAA;QAAE0B,CAAC;QAAEC,CAAC;MAAA,OAAM,CAACD,CAAC,CAAC9D,QAAQ,EAAE,EAAE+D,CAAC,CAAC;IAAA,EAAC,EAAC;EACzE;EAEA,IAAIlF,aAAa,CAACuD,OAAO,CAAC,EAAE;IAAA;IAC1B,OAAO,WAAE,EAACyB,MAAM,iCAAItC,MAAM,CAACC,OAAO,CAACY,OAAO,CAAC,EAAC;EAC9C;EAEA,MAAM,IAAIpB,KAAK,yFACoEoB,OAAO,EACzF;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS4B,oBAAoB,CAACC,UAAU,EAAE;EACxC,IAAI,CAACR,KAAK,CAACC,OAAO,CAACO,UAAU,CAAC,EAAE;IAC9B,MAAMjD,KAAK,CAAC,yBAAyB,CAAC;EACxC;EAEA,IAAMkD,WAAW,GAAG,CAAC,CAAC;EAEtBC,aAAa,CAACF,UAAU,EAAE,UAACG,KAAK,EAAElB,SAAS,EAAK;IAC9CmB,aAAa,CAACH,WAAW,EAAEhB,SAAS,EAAEkB,KAAK,CAAC;EAC9C,CAAC,CAAC;EAEF,OAAOF,WAAW;AACpB;AAEA,IAAMI,mBAAmB,GAAG,IAAIhB,GAAG,CAAC,CAClC,KAAK,EACL,eAAe,EACf,gBAAgB,EAChB,cAAc,EACd,MAAM,EACN,SAAS,EACT,MAAM,EACN,MAAM,EACN,mBAAmB,EACnB,qBAAqB,EACrB,eAAe,EACf,UAAU,EACV,cAAc,EACd,qBAAqB,EACrB,SAAS,EACT,aAAa,EACb,YAAY,CACb,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASe,aAAa,CAACjC,OAAO,EAAEmC,IAAI,EAAEH,KAAK,EAAE;EAC3C,IAAII,MAAM,EAAC;EACX,IAAI,OAAOJ,KAAK,KAAK,UAAU,EAAE;IAC/B;IACA;IACAI,MAAM,GAAG,CAACJ,KAAK,CAACG,IAAI,CAAC;EACvB,CAAC,MAAM,IAAId,KAAK,CAACC,OAAO,CAACU,KAAK,CAAC,EAAE;IAC/BI,MAAM,GAAGJ,KAAK,CAACb,GAAG,CAACV,MAAM,CAAC;EAC5B,CAAC,MAAM;IACL2B,MAAM,GAAG,CAAC3B,MAAM,CAACuB,KAAK,CAAC,CAAC;EAC1B;EAEA,IAAMhB,GAAG,GAAGmB,IAAI,CAAC3E,WAAW,EAAE;EAC9B,IAAIwD,GAAG,KAAK,YAAY,EAAE;IACxB;IACA,IAAIhB,OAAO,CAAC,YAAY,CAAC,KAAKM,SAAS,EAAE;MACvCN,OAAO,CAAC,YAAY,CAAC,GAAGoC,MAAM;IAChC,CAAC,MAAM;MAAA;MACL,sBAAApC,OAAO,CAAC,YAAY,CAAC,EAACqC,IAAI,8CAAID,MAAM,EAAC;IACvC;EACF,CAAC,MAAM,IAAIF,mBAAmB,CAACI,GAAG,CAACtB,GAAG,CAAC,EAAE;IACvC,IAAIhB,OAAO,CAACgB,GAAG,CAAC,KAAKV,SAAS,EAAE;MAC9B;MACAN,OAAO,CAACgB,GAAG,CAAC,GAAGoB,MAAM,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC,MAAM;IACL,IAAIpC,OAAO,CAACgB,GAAG,CAAC,KAAKV,SAAS,EAAE;MAC9B8B,MAAM,IAAIpC,OAAO,CAACgB,GAAG,CAAC,4BAAKoB,MAAM,EAAC;IACpC;IAEA,IAAMG,SAAS,GAAGvB,GAAG,KAAK,QAAQ,GAAG,IAAI,GAAG,IAAI;IAChDhB,OAAO,CAACgB,GAAG,CAAC,GAAGoB,MAAM,CAACI,IAAI,CAACD,SAAS,CAAC;EACvC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,kBAAkB,CAACzC,OAAO,EAAE0C,iBAAiB,EAAE;EACtD,IAAI,CAACjG,aAAa,CAACuD,OAAO,CAAC,EAAE;IAC3B,MAAMpB,KAAK,CAAC,2BAA2B,CAAC;EAC1C;EAEA,IAAI,OAAO8D,iBAAiB,KAAK,QAAQ,EAAE;IACzC,MAAM9D,KAAK,CAAC,6BAA6B,CAAC;EAC5C;EAEA,IAAM+D,0BAA0B,GAAGD,iBAAiB,CAAClF,WAAW,EAAE;;EAElE;EACA2B,MAAM,CAACyD,IAAI,CAAC5C,OAAO,CAAC,CACjB6C,MAAM,CAAC,UAAA/B,SAAS;IAAA,OAAIA,SAAS,CAACtD,WAAW,EAAE,KAAKmF,0BAA0B;EAAA,EAAC,CAC3ErF,OAAO,CAAC,UAAAwD,SAAS;IAAA,OAAI,OAAOd,OAAO,CAACc,SAAS,CAAC;EAAA,EAAC;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASiB,aAAa,CAACF,UAAU,EAAE/C,QAAQ,EAAE;EAC3C,KAAK,IAAIgE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,UAAU,CAACxE,MAAM,EAAEyF,CAAC,IAAI,CAAC,EAAE;IAC7ChE,QAAQ,CAAC+C,UAAU,CAACiB,CAAC,GAAG,CAAC,CAAC,EAAEjB,UAAU,CAACiB,CAAC,CAAC,EAAEA,CAAC,CAAC;EAC/C;AACF;AAEA,SAASC,aAAa,CAACC,GAAG,EAAE;EAC1B,IAAI;IACF,OAAOC,kBAAkB,CAACD,GAAG,CAACE,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;EACpD,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV,OAAOH,GAAG;EACZ;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,aAAa,CAACJ,GAAG,EAAE;EAC1B,OAAOK,kBAAkB,CAACL,GAAG,CAAC,CAACE,OAAO,CAAC,UAAU,EAAE,UAAUI,CAAC,EAAE;IAC9D,kBAAWA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC3F,QAAQ,CAAC,EAAE,CAAC,CAAC4F,WAAW,EAAE;EACvD,CAAC,CAAC;AACJ;AAEA,SAASC,mBAAmB,CAACC,MAAM,EAAEC,OAAO,EAAE;EAC5C,IAAMC,SAAS,GACbF,MAAM,KAAKpD,SAAS,IAAIoD,MAAM,KAAK,IAAI,GAAG,EAAE,GAAGjD,MAAM,CAACiD,MAAM,CAAC;EAE/D,IAAIC,OAAO,YAAYE,MAAM,EAAE;IAC7B;IACAF,OAAO,CAACG,SAAS,GAAG,CAAC;IACrB,OAAOH,OAAO,CAACI,IAAI,CAACH,SAAS,CAAC;EAChC;EACA,OAAOA,SAAS,KAAKnD,MAAM,CAACkD,OAAO,CAAC;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,gBAAgB,CAAChD,GAAG,EAAEgB,KAAK,EAAEiC,kBAAkB,EAAE;EACxD;EACA,QAAQ,IAAI;IACV,KAAK,OAAOjC,KAAK,KAAK,QAAQ,CAAC,CAAC;IAChC,KAAK,OAAOA,KAAK,KAAK,SAAS;MAC7BA,KAAK,GAAGA,KAAK,CAACpE,QAAQ,EAAE;MACxB;IACF,KAAKoE,KAAK,KAAK,IAAI;IACnB,KAAKA,KAAK,KAAK1B,SAAS;MACtB0B,KAAK,GAAG,EAAE;MACV;IACF,KAAK,OAAOA,KAAK,KAAK,QAAQ;MAC5B,IAAIiC,kBAAkB,EAAE;QACtBjC,KAAK,GAAGiC,kBAAkB,CAACjC,KAAK,CAAC;MACnC;MACA;IACF,KAAKA,KAAK,YAAY6B,MAAM;MAC1B;IACF,KAAKxC,KAAK,CAACC,OAAO,CAACU,KAAK,CAAC;MAAE;QACzBA,KAAK,GAAGA,KAAK,CAACb,GAAG,CAAC,UAAU+C,GAAG,EAAEC,GAAG,EAAE;UACpC,OAAOH,gBAAgB,CAACG,GAAG,EAAED,GAAG,EAAED,kBAAkB,CAAC,CAAC,CAAC,CAAC;QAC1D,CAAC,CAAC;QACF;MACF;IACA,KAAK,OAAOjC,KAAK,KAAK,QAAQ;MAAE;QAC9BA,KAAK,GAAG7C,MAAM,CAACC,OAAO,CAAC4C,KAAK,CAAC,CAACoC,MAAM,CAAC,UAAUC,GAAG,SAAoB;UAAA;YAAjBC,MAAM;YAAEC,MAAM;UACjE,IAAMC,OAAO,GAAGR,gBAAgB,CAACM,MAAM,EAAEC,MAAM,EAAEN,kBAAkB,CAAC;UACpEI,GAAG,CAACG,OAAO,CAAC,CAAC,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,CAAC;UAE5B,OAAOH,GAAG;QACZ,CAAC,EAAE,CAAC,CAAC,CAAC;QACN;MACF;EAAC;EAGH,IAAIJ,kBAAkB,EAAEjD,GAAG,GAAGiD,kBAAkB,CAACjD,GAAG,CAAC;EACrD,OAAO,CAACA,GAAG,EAAEgB,KAAK,CAAC;AACrB;AAEA,SAASyC,QAAQ,CAACC,GAAG,EAAE;EACrB,OACEA,GAAG,IACH,OAAOA,GAAG,KAAK,QAAQ,IACvB,CAAC5G,MAAM,CAAC6G,QAAQ,CAACD,GAAG,CAAC,IACrB,OAAOA,GAAG,CAACE,WAAW,KAAK,UAAU;AAEzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,0BAA0B,CAAChG,KAAK,EAAE9B,OAAO,EAAE+H,EAAE,EAAE;EACtD,IAAI,OAAOjG,KAAK,KAAK,QAAQ,EAAE;IAC7BA,KAAK,GAAGkG,YAAY,CAAC,IAAInI,GAAG,CAACoI,GAAG,CAACnG,KAAK,CAAC,CAAC;EAC1C,CAAC,MAAM,IAAIA,KAAK,YAAYjC,GAAG,CAACoI,GAAG,EAAE;IACnCnG,KAAK,GAAGkG,YAAY,CAAClG,KAAK,CAAC;EAC7B,CAAC,MAAM;IACLiG,EAAE,GAAG/H,OAAO;IACZA,OAAO,GAAG8B,KAAK;IACfA,KAAK,GAAG,IAAI;EACd;EAEA,IAAI,OAAO9B,OAAO,KAAK,UAAU,EAAE;IACjC+H,EAAE,GAAG/H,OAAO;IACZA,OAAO,GAAG8B,KAAK,IAAI,CAAC,CAAC;EACvB,CAAC,MAAM;IACL9B,OAAO,GAAGoC,MAAM,CAAC8F,MAAM,CAACpG,KAAK,IAAI,CAAC,CAAC,EAAE9B,OAAO,CAAC;EAC/C;EAEA,OAAO;IAAEA,OAAO,EAAPA,OAAO;IAAE+B,QAAQ,EAAEgG;EAAG,CAAC;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAY,CAACnI,GAAG,EAAE;EACzB,IAAMG,OAAO,GAAG;IACdmI,QAAQ,EAAEtI,GAAG,CAACsI,QAAQ;IACtB/H,QAAQ,EACN,OAAOP,GAAG,CAACO,QAAQ,KAAK,QAAQ,IAAIP,GAAG,CAACO,QAAQ,CAACuD,UAAU,CAAC,GAAG,CAAC,GAC5D9D,GAAG,CAACO,QAAQ,CAACgI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GACzBvI,GAAG,CAACO,QAAQ;IAClBiI,IAAI,EAAExI,GAAG,CAACwI,IAAI;IACdC,MAAM,EAAEzI,GAAG,CAACyI,MAAM;IAClBC,QAAQ,EAAE1I,GAAG,CAAC0I,QAAQ;IACtBzF,IAAI,YAAKjD,GAAG,CAAC0I,QAAQ,SAAG1I,GAAG,CAACyI,MAAM,IAAI,EAAE,CAAE;IAC1CE,IAAI,EAAE3I,GAAG,CAAC2I;EACZ,CAAC;EACD,IAAI3I,GAAG,CAACK,IAAI,KAAK,EAAE,EAAE;IACnBF,OAAO,CAACE,IAAI,GAAGuI,MAAM,CAAC5I,GAAG,CAACK,IAAI,CAAC;EACjC;EACA,IAAIL,GAAG,CAAC6I,QAAQ,IAAI7I,GAAG,CAAC8I,QAAQ,EAAE;IAChC3I,OAAO,CAAC4I,IAAI,aAAM/I,GAAG,CAAC6I,QAAQ,cAAI7I,GAAG,CAAC8I,QAAQ,CAAE;EAClD;EACA,OAAO3I,OAAO;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAM6I,SAAS,GAAG,SAAZA,SAAS,CAAIC,QAAQ,EAAEC,MAAM,EAAK;EACtC,IAAIrJ,aAAa,CAACoJ,QAAQ,CAAC,EAAE;IAC3BA,QAAQ,GAAGE,MAAM,CAACF,QAAQ,CAAC;EAC7B;EACA,IAAIpJ,aAAa,CAACqJ,MAAM,CAAC,EAAE;IACzBA,MAAM,GAAGC,MAAM,CAACD,MAAM,CAAC;EACzB;EACA,OAAOE,SAAS,CAACH,QAAQ,EAAEC,MAAM,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,MAAM,GAAG,SAATA,MAAM,CAAGlH,KAAK;EAAA,OAClBM,MAAM,CAACC,OAAO,CAACP,KAAK,CAAC,CAACuF,MAAM,CAAC,UAACC,GAAG;IAAA;MAAG3C,CAAC;MAAEC,CAAC;IAAA,OAAMjF,GAAG,CAAC2H,GAAG,EAAE3C,CAAC,EAAEC,CAAC,CAAC;EAAA,GAAE,CAAC,CAAC,CAAC;AAAA;;AAEnE;AACA;AACA;AACA;AACA;AACA,SAASqE,SAAS,CAACH,QAAQ,EAAEC,MAAM,EAAE;EACnCvJ,KAAK,CAAC,qBAAqB,EAAE,OAAOsJ,QAAQ,EAAEA,QAAQ,EAAE,OAAOC,MAAM,EAAEA,MAAM,CAAC;EAC9E,IAAID,QAAQ,YAAYhC,MAAM,EAAE;IAC9B,OAAOgC,QAAQ,CAAC9B,IAAI,CAAC+B,MAAM,CAAC;EAC9B;EAEA,IAAIzE,KAAK,CAACC,OAAO,CAACuE,QAAQ,CAAC,IAAIxE,KAAK,CAACC,OAAO,CAACwE,MAAM,CAAC,EAAE;IACpD,IAAID,QAAQ,CAACxI,MAAM,KAAKyI,MAAM,CAACzI,MAAM,EAAE;MACrC,OAAO,KAAK;IACd;IAEA,OAAOwI,QAAQ,CAACI,KAAK,CAAC,UAACC,MAAM,EAAE/B,GAAG;MAAA,OAAK6B,SAAS,CAACE,MAAM,EAAEJ,MAAM,CAAC3B,GAAG,CAAC,CAAC;IAAA,EAAC;EACxE;EAEA,IAAI1H,aAAa,CAACoJ,QAAQ,CAAC,IAAIpJ,aAAa,CAACqJ,MAAM,CAAC,EAAE;IACpD,IAAMK,OAAO,GAAG9E,KAAK,CAACtD,IAAI,CACxB,IAAImD,GAAG,CAAC/B,MAAM,CAACyD,IAAI,CAACiD,QAAQ,CAAC,CAACpE,MAAM,CAACtC,MAAM,CAACyD,IAAI,CAACkD,MAAM,CAAC,CAAC,CAAC,CAC3D;IAED,OAAOK,OAAO,CAACF,KAAK,CAAC,UAAAjF,GAAG;MAAA,OAAIgF,SAAS,CAACH,QAAQ,CAAC7E,GAAG,CAAC,EAAE8E,MAAM,CAAC9E,GAAG,CAAC,CAAC;IAAA,EAAC;EACpE;EAEA,OAAO6E,QAAQ,KAAKC,MAAM;AAC5B;AAEA,IAAMM,QAAQ,GAAG,EAAE;AACnB,IAAMC,SAAS,GAAG,EAAE;AACpB,IAAMC,UAAU,GAAG,EAAE;AAErB,IAAMC,SAAS,GACb,SADIA,SAAS,CACZC,KAAK,EAAEC,GAAG;EAAA,OACX,YAAa;IACX,IAAMC,EAAE,GAAGF,KAAK,yBAAS;IACzBC,GAAG,CAACpE,IAAI,CAACqE,EAAE,CAAC;IACZ,OAAOA,EAAE;EACX,CAAC;AAAA;AAEH,IAAMC,UAAU,GAAGJ,SAAS,CAAC5J,MAAM,CAACgK,UAAU,EAAEP,QAAQ,CAAC;AACzD,IAAMQ,WAAW,GAAGL,SAAS,CAAC5J,MAAM,CAACiK,WAAW,EAAEP,SAAS,CAAC;AAC5D,IAAMQ,YAAY,GAAGN,SAAS,CAAC5J,MAAM,CAACkK,YAAY,EAAEP,UAAU,CAAC;AAE/D,SAASQ,UAAU,CAACC,KAAK,EAAEN,GAAG,EAAE;EAC9B,OAAOA,GAAG,CAACpJ,MAAM,EAAE;IACjB0J,KAAK,CAACN,GAAG,CAACO,KAAK,EAAE,CAAC;EACpB;AACF;AAEA,SAASC,eAAe,GAAG;EACzBH,UAAU,CAACI,YAAY,EAAEd,QAAQ,CAAC;EAClCU,UAAU,CAACK,aAAa,EAAEd,SAAS,CAAC;EACpCS,UAAU,CAACM,cAAc,EAAEd,UAAU,CAAC;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASe,kBAAkB,CAACrI,GAAG,EAAE;EAC/B,OAAO,CAAC,EACNA,GAAG,CAACsI,SAAS,KAAK,IAAI,IACtBtI,GAAG,CAACuI,OAAO,IACVvI,GAAG,CAACwI,MAAM,IAAIxI,GAAG,CAACwI,MAAM,CAACF,SAAU,CACrC;AACH;AAEAjJ,MAAM,CAACoJ,OAAO,GAAG;EACfrH,eAAe,EAAfA,eAAe;EACfwF,SAAS,EAATA,SAAS;EACTnD,kBAAkB,EAAlBA,kBAAkB;EAClBV,aAAa,EAAbA,aAAa;EACbiC,gBAAgB,EAAhBA,gBAAgB;EAChBpC,oBAAoB,EAApBA,oBAAoB;EACpBjB,4BAA4B,EAA5BA,4BAA4B;EAC5BM,6BAA6B,EAA7BA,6BAA6B;EAC7BG,sBAAsB,EAAtBA,sBAAsB;EACtBjB,gBAAgB,EAAhBA,gBAAgB;EAChBI,aAAa,EAAbA,aAAa;EACb9D,aAAa,EAAbA,aAAa;EACb4K,kBAAkB,EAAlBA,kBAAkB;EAClB5C,QAAQ,EAARA,QAAQ;EACRhH,mBAAmB,EAAnBA,mBAAmB;EACnBgG,mBAAmB,EAAnBA,mBAAmB;EACnBoB,0BAA0B,EAA1BA,0BAA0B;EAC1BxF,eAAe,EAAfA,eAAe;EACfvC,uBAAuB,EAAvBA,uBAAuB;EACvBoB,gBAAgB,EAAhBA,gBAAgB;EAChB6E,aAAa,EAAbA,aAAa;EACbK,aAAa,EAAbA,aAAa;EACb6D,eAAe,EAAfA,eAAe;EACf/H,yBAAyB,EAAzBA,yBAAyB;EACzB2H,YAAY,EAAZA,YAAY;EACZD,WAAW,EAAXA,WAAW;EACXD,UAAU,EAAVA,UAAU;EACVjH,gBAAgB,EAAhBA;AACF,CAAC"},"metadata":{},"sourceType":"script"}