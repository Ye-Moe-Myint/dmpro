{"ast":null,"code":"'use strict';\n\n// this[BUFFER] is the remainder of a chunk if we're waiting for\n// the full 512 bytes of a header to come in.  We will Buffer.concat()\n// it to the next write(), which is a mem copy, but a small one.\n//\n// this[QUEUE] is a Yallist of entries that haven't been emitted\n// yet this can only get filled up if the user keeps write()ing after\n// a write() returns false, or does a write() with more than one entry\n//\n// We don't buffer chunks, we always parse them and either create an\n// entry, or push it into the active entry.  The ReadEntry class knows\n// to throw data away if .ignore=true\n//\n// Shift entry off the buffer when it emits 'end', and emit 'entry' for\n// the next one in the list.\n//\n// At any time, we're pushing body chunks into the entry at WRITEENTRY,\n// and waiting for 'end' on the entry at READENTRY\n//\n// ignored entries get .resume() called on them straight away\nvar _classCallCheck = require(\"/Users/lieo/diabetes/CUT2DMTest/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/lieo/diabetes/CUT2DMTest/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/lieo/diabetes/CUT2DMTest/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/lieo/diabetes/CUT2DMTest/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar warner = require('./warn-mixin.js');\nvar Header = require('./header.js');\nvar EE = require('events');\nvar Yallist = require('yallist');\nvar maxMetaEntrySize = 1024 * 1024;\nvar Entry = require('./read-entry.js');\nvar Pax = require('./pax.js');\nvar zlib = require('minizlib');\nvar gzipHeader = Buffer.from([0x1f, 0x8b]);\nvar STATE = Symbol('state');\nvar WRITEENTRY = Symbol('writeEntry');\nvar READENTRY = Symbol('readEntry');\nvar NEXTENTRY = Symbol('nextEntry');\nvar PROCESSENTRY = Symbol('processEntry');\nvar EX = Symbol('extendedHeader');\nvar GEX = Symbol('globalExtendedHeader');\nvar META = Symbol('meta');\nvar EMITMETA = Symbol('emitMeta');\nvar BUFFER = Symbol('buffer');\nvar QUEUE = Symbol('queue');\nvar ENDED = Symbol('ended');\nvar EMITTEDEND = Symbol('emittedEnd');\nvar EMIT = Symbol('emit');\nvar UNZIP = Symbol('unzip');\nvar CONSUMECHUNK = Symbol('consumeChunk');\nvar CONSUMECHUNKSUB = Symbol('consumeChunkSub');\nvar CONSUMEBODY = Symbol('consumeBody');\nvar CONSUMEMETA = Symbol('consumeMeta');\nvar CONSUMEHEADER = Symbol('consumeHeader');\nvar CONSUMING = Symbol('consuming');\nvar BUFFERCONCAT = Symbol('bufferConcat');\nvar MAYBEEND = Symbol('maybeEnd');\nvar WRITING = Symbol('writing');\nvar ABORTED = Symbol('aborted');\nvar DONE = Symbol('onDone');\nvar SAW_VALID_ENTRY = Symbol('sawValidEntry');\nvar SAW_NULL_BLOCK = Symbol('sawNullBlock');\nvar SAW_EOF = Symbol('sawEOF');\nvar noop = function noop(_) {\n  return true;\n};\nmodule.exports = warner( /*#__PURE__*/function (_EE) {\n  _inherits(Parser, _EE);\n  var _super = _createSuper(Parser);\n  function Parser(opt) {\n    var _this;\n    _classCallCheck(this, Parser);\n    opt = opt || {};\n    _this = _super.call(this, opt);\n    _this.file = opt.file || '';\n\n    // set to boolean false when an entry starts.  1024 bytes of \\0\n    // is technically a valid tarball, albeit a boring one.\n    _this[SAW_VALID_ENTRY] = null;\n\n    // these BADARCHIVE errors can't be detected early. listen on DONE.\n    _this.on(DONE, function (_) {\n      if (_this[STATE] === 'begin' || _this[SAW_VALID_ENTRY] === false) {\n        // either less than 1 block of data, or all entries were invalid.\n        // Either way, probably not even a tarball.\n        _this.warn('TAR_BAD_ARCHIVE', 'Unrecognized archive format');\n      }\n    });\n    if (opt.ondone) _this.on(DONE, opt.ondone);else {\n      _this.on(DONE, function (_) {\n        _this.emit('prefinish');\n        _this.emit('finish');\n        _this.emit('end');\n        _this.emit('close');\n      });\n    }\n    _this.strict = !!opt.strict;\n    _this.maxMetaEntrySize = opt.maxMetaEntrySize || maxMetaEntrySize;\n    _this.filter = typeof opt.filter === 'function' ? opt.filter : noop;\n\n    // have to set this so that streams are ok piping into it\n    _this.writable = true;\n    _this.readable = false;\n    _this[QUEUE] = new Yallist();\n    _this[BUFFER] = null;\n    _this[READENTRY] = null;\n    _this[WRITEENTRY] = null;\n    _this[STATE] = 'begin';\n    _this[META] = '';\n    _this[EX] = null;\n    _this[GEX] = null;\n    _this[ENDED] = false;\n    _this[UNZIP] = null;\n    _this[ABORTED] = false;\n    _this[SAW_NULL_BLOCK] = false;\n    _this[SAW_EOF] = false;\n    if (typeof opt.onwarn === 'function') _this.on('warn', opt.onwarn);\n    if (typeof opt.onentry === 'function') _this.on('entry', opt.onentry);\n    return _this;\n  }\n  _createClass(Parser, [{\n    key: CONSUMEHEADER,\n    value: function value(chunk, position) {\n      var _this2 = this;\n      if (this[SAW_VALID_ENTRY] === null) this[SAW_VALID_ENTRY] = false;\n      var header;\n      try {\n        header = new Header(chunk, position, this[EX], this[GEX]);\n      } catch (er) {\n        return this.warn('TAR_ENTRY_INVALID', er);\n      }\n      if (header.nullBlock) {\n        if (this[SAW_NULL_BLOCK]) {\n          this[SAW_EOF] = true;\n          // ending an archive with no entries.  pointless, but legal.\n          if (this[STATE] === 'begin') this[STATE] = 'header';\n          this[EMIT]('eof');\n        } else {\n          this[SAW_NULL_BLOCK] = true;\n          this[EMIT]('nullBlock');\n        }\n      } else {\n        this[SAW_NULL_BLOCK] = false;\n        if (!header.cksumValid) this.warn('TAR_ENTRY_INVALID', 'checksum failure', {\n          header: header\n        });else if (!header.path) this.warn('TAR_ENTRY_INVALID', 'path is required', {\n          header: header\n        });else {\n          var type = header.type;\n          if (/^(Symbolic)?Link$/.test(type) && !header.linkpath) this.warn('TAR_ENTRY_INVALID', 'linkpath required', {\n            header: header\n          });else if (!/^(Symbolic)?Link$/.test(type) && header.linkpath) this.warn('TAR_ENTRY_INVALID', 'linkpath forbidden', {\n            header: header\n          });else {\n            var entry = this[WRITEENTRY] = new Entry(header, this[EX], this[GEX]);\n\n            // we do this for meta & ignored entries as well, because they\n            // are still valid tar, or else we wouldn't know to ignore them\n            if (!this[SAW_VALID_ENTRY]) {\n              if (entry.remain) {\n                // this might be the one!\n                var onend = function onend() {\n                  if (!entry.invalid) _this2[SAW_VALID_ENTRY] = true;\n                };\n                entry.on('end', onend);\n              } else this[SAW_VALID_ENTRY] = true;\n            }\n            if (entry.meta) {\n              if (entry.size > this.maxMetaEntrySize) {\n                entry.ignore = true;\n                this[EMIT]('ignoredEntry', entry);\n                this[STATE] = 'ignore';\n                entry.resume();\n              } else if (entry.size > 0) {\n                this[META] = '';\n                entry.on('data', function (c) {\n                  return _this2[META] += c;\n                });\n                this[STATE] = 'meta';\n              }\n            } else {\n              this[EX] = null;\n              entry.ignore = entry.ignore || !this.filter(entry.path, entry);\n              if (entry.ignore) {\n                // probably valid, just not something we care about\n                this[EMIT]('ignoredEntry', entry);\n                this[STATE] = entry.remain ? 'ignore' : 'header';\n                entry.resume();\n              } else {\n                if (entry.remain) this[STATE] = 'body';else {\n                  this[STATE] = 'header';\n                  entry.end();\n                }\n                if (!this[READENTRY]) {\n                  this[QUEUE].push(entry);\n                  this[NEXTENTRY]();\n                } else this[QUEUE].push(entry);\n              }\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: PROCESSENTRY,\n    value: function value(entry) {\n      var _this3 = this;\n      var go = true;\n      if (!entry) {\n        this[READENTRY] = null;\n        go = false;\n      } else if (Array.isArray(entry)) this.emit.apply(this, entry);else {\n        this[READENTRY] = entry;\n        this.emit('entry', entry);\n        if (!entry.emittedEnd) {\n          entry.on('end', function (_) {\n            return _this3[NEXTENTRY]();\n          });\n          go = false;\n        }\n      }\n      return go;\n    }\n  }, {\n    key: NEXTENTRY,\n    value: function value() {\n      var _this4 = this;\n      do {} while (this[PROCESSENTRY](this[QUEUE].shift()));\n      if (!this[QUEUE].length) {\n        // At this point, there's nothing in the queue, but we may have an\n        // entry which is being consumed (readEntry).\n        // If we don't, then we definitely can handle more data.\n        // If we do, and either it's flowing, or it has never had any data\n        // written to it, then it needs more.\n        // The only other possibility is that it has returned false from a\n        // write() call, so we wait for the next drain to continue.\n        var re = this[READENTRY];\n        var drainNow = !re || re.flowing || re.size === re.remain;\n        if (drainNow) {\n          if (!this[WRITING]) this.emit('drain');\n        } else re.once('drain', function (_) {\n          return _this4.emit('drain');\n        });\n      }\n    }\n  }, {\n    key: CONSUMEBODY,\n    value: function value(chunk, position) {\n      // write up to but no  more than writeEntry.blockRemain\n      var entry = this[WRITEENTRY];\n      var br = entry.blockRemain;\n      var c = br >= chunk.length && position === 0 ? chunk : chunk.slice(position, position + br);\n      entry.write(c);\n      if (!entry.blockRemain) {\n        this[STATE] = 'header';\n        this[WRITEENTRY] = null;\n        entry.end();\n      }\n      return c.length;\n    }\n  }, {\n    key: CONSUMEMETA,\n    value: function value(chunk, position) {\n      var entry = this[WRITEENTRY];\n      var ret = this[CONSUMEBODY](chunk, position);\n\n      // if we finished, then the entry is reset\n      if (!this[WRITEENTRY]) this[EMITMETA](entry);\n      return ret;\n    }\n  }, {\n    key: EMIT,\n    value: function value(ev, data, extra) {\n      if (!this[QUEUE].length && !this[READENTRY]) this.emit(ev, data, extra);else this[QUEUE].push([ev, data, extra]);\n    }\n  }, {\n    key: EMITMETA,\n    value: function value(entry) {\n      this[EMIT]('meta', this[META]);\n      switch (entry.type) {\n        case 'ExtendedHeader':\n        case 'OldExtendedHeader':\n          this[EX] = Pax.parse(this[META], this[EX], false);\n          break;\n        case 'GlobalExtendedHeader':\n          this[GEX] = Pax.parse(this[META], this[GEX], true);\n          break;\n        case 'NextFileHasLongPath':\n        case 'OldGnuLongPath':\n          this[EX] = this[EX] || Object.create(null);\n          this[EX].path = this[META].replace(/\\0.*/, '');\n          break;\n        case 'NextFileHasLongLinkpath':\n          this[EX] = this[EX] || Object.create(null);\n          this[EX].linkpath = this[META].replace(/\\0.*/, '');\n          break;\n\n        /* istanbul ignore next */\n        default:\n          throw new Error('unknown meta: ' + entry.type);\n      }\n    }\n  }, {\n    key: \"abort\",\n    value: function abort(error) {\n      this[ABORTED] = true;\n      this.emit('abort', error);\n      // always throws, even in non-strict mode\n      this.warn('TAR_ABORT', error, {\n        recoverable: false\n      });\n    }\n  }, {\n    key: \"write\",\n    value: function write(chunk) {\n      var _this5 = this;\n      if (this[ABORTED]) return;\n\n      // first write, might be gzipped\n      if (this[UNZIP] === null && chunk) {\n        if (this[BUFFER]) {\n          chunk = Buffer.concat([this[BUFFER], chunk]);\n          this[BUFFER] = null;\n        }\n        if (chunk.length < gzipHeader.length) {\n          this[BUFFER] = chunk;\n          return true;\n        }\n        for (var i = 0; this[UNZIP] === null && i < gzipHeader.length; i++) {\n          if (chunk[i] !== gzipHeader[i]) this[UNZIP] = false;\n        }\n        if (this[UNZIP] === null) {\n          var ended = this[ENDED];\n          this[ENDED] = false;\n          this[UNZIP] = new zlib.Unzip();\n          this[UNZIP].on('data', function (chunk) {\n            return _this5[CONSUMECHUNK](chunk);\n          });\n          this[UNZIP].on('error', function (er) {\n            return _this5.abort(er);\n          });\n          this[UNZIP].on('end', function (_) {\n            _this5[ENDED] = true;\n            _this5[CONSUMECHUNK]();\n          });\n          this[WRITING] = true;\n          var _ret = this[UNZIP][ended ? 'end' : 'write'](chunk);\n          this[WRITING] = false;\n          return _ret;\n        }\n      }\n      this[WRITING] = true;\n      if (this[UNZIP]) this[UNZIP].write(chunk);else this[CONSUMECHUNK](chunk);\n      this[WRITING] = false;\n\n      // return false if there's a queue, or if the current entry isn't flowing\n      var ret = this[QUEUE].length ? false : this[READENTRY] ? this[READENTRY].flowing : true;\n\n      // if we have no queue, then that means a clogged READENTRY\n      if (!ret && !this[QUEUE].length) this[READENTRY].once('drain', function (_) {\n        return _this5.emit('drain');\n      });\n      return ret;\n    }\n  }, {\n    key: BUFFERCONCAT,\n    value: function value(c) {\n      if (c && !this[ABORTED]) this[BUFFER] = this[BUFFER] ? Buffer.concat([this[BUFFER], c]) : c;\n    }\n  }, {\n    key: MAYBEEND,\n    value: function value() {\n      if (this[ENDED] && !this[EMITTEDEND] && !this[ABORTED] && !this[CONSUMING]) {\n        this[EMITTEDEND] = true;\n        var entry = this[WRITEENTRY];\n        if (entry && entry.blockRemain) {\n          // truncated, likely a damaged file\n          var have = this[BUFFER] ? this[BUFFER].length : 0;\n          this.warn('TAR_BAD_ARCHIVE', \"Truncated input (needed \".concat(entry.blockRemain, \" more bytes, only \").concat(have, \" available)\"), {\n            entry: entry\n          });\n          if (this[BUFFER]) entry.write(this[BUFFER]);\n          entry.end();\n        }\n        this[EMIT](DONE);\n      }\n    }\n  }, {\n    key: CONSUMECHUNK,\n    value: function value(chunk) {\n      if (this[CONSUMING]) this[BUFFERCONCAT](chunk);else if (!chunk && !this[BUFFER]) this[MAYBEEND]();else {\n        this[CONSUMING] = true;\n        if (this[BUFFER]) {\n          this[BUFFERCONCAT](chunk);\n          var c = this[BUFFER];\n          this[BUFFER] = null;\n          this[CONSUMECHUNKSUB](c);\n        } else this[CONSUMECHUNKSUB](chunk);\n        while (this[BUFFER] && this[BUFFER].length >= 512 && !this[ABORTED] && !this[SAW_EOF]) {\n          var _c = this[BUFFER];\n          this[BUFFER] = null;\n          this[CONSUMECHUNKSUB](_c);\n        }\n        this[CONSUMING] = false;\n      }\n      if (!this[BUFFER] || this[ENDED]) this[MAYBEEND]();\n    }\n  }, {\n    key: CONSUMECHUNKSUB,\n    value: function value(chunk) {\n      // we know that we are in CONSUMING mode, so anything written goes into\n      // the buffer.  Advance the position and put any remainder in the buffer.\n      var position = 0;\n      var length = chunk.length;\n      while (position + 512 <= length && !this[ABORTED] && !this[SAW_EOF]) {\n        switch (this[STATE]) {\n          case 'begin':\n          case 'header':\n            this[CONSUMEHEADER](chunk, position);\n            position += 512;\n            break;\n          case 'ignore':\n          case 'body':\n            position += this[CONSUMEBODY](chunk, position);\n            break;\n          case 'meta':\n            position += this[CONSUMEMETA](chunk, position);\n            break;\n\n          /* istanbul ignore next */\n          default:\n            throw new Error('invalid state: ' + this[STATE]);\n        }\n      }\n      if (position < length) {\n        if (this[BUFFER]) this[BUFFER] = Buffer.concat([chunk.slice(position), this[BUFFER]]);else this[BUFFER] = chunk.slice(position);\n      }\n    }\n  }, {\n    key: \"end\",\n    value: function end(chunk) {\n      if (!this[ABORTED]) {\n        if (this[UNZIP]) this[UNZIP].end(chunk);else {\n          this[ENDED] = true;\n          this.write(chunk);\n        }\n      }\n    }\n  }]);\n  return Parser;\n}(EE));","map":{"version":3,"names":["warner","require","Header","EE","Yallist","maxMetaEntrySize","Entry","Pax","zlib","gzipHeader","Buffer","from","STATE","Symbol","WRITEENTRY","READENTRY","NEXTENTRY","PROCESSENTRY","EX","GEX","META","EMITMETA","BUFFER","QUEUE","ENDED","EMITTEDEND","EMIT","UNZIP","CONSUMECHUNK","CONSUMECHUNKSUB","CONSUMEBODY","CONSUMEMETA","CONSUMEHEADER","CONSUMING","BUFFERCONCAT","MAYBEEND","WRITING","ABORTED","DONE","SAW_VALID_ENTRY","SAW_NULL_BLOCK","SAW_EOF","noop","_","module","exports","opt","file","on","warn","ondone","emit","strict","filter","writable","readable","onwarn","onentry","chunk","position","header","er","nullBlock","cksumValid","path","type","test","linkpath","entry","remain","onend","invalid","meta","size","ignore","resume","c","end","push","go","Array","isArray","apply","emittedEnd","shift","length","re","drainNow","flowing","once","br","blockRemain","slice","write","ret","ev","data","extra","parse","Object","create","replace","Error","error","recoverable","concat","i","ended","Unzip","abort","have"],"sources":["/Users/lieo/diabetes/CUT2DMTest/node_modules/tar/lib/parse.js"],"sourcesContent":["'use strict'\n\n// this[BUFFER] is the remainder of a chunk if we're waiting for\n// the full 512 bytes of a header to come in.  We will Buffer.concat()\n// it to the next write(), which is a mem copy, but a small one.\n//\n// this[QUEUE] is a Yallist of entries that haven't been emitted\n// yet this can only get filled up if the user keeps write()ing after\n// a write() returns false, or does a write() with more than one entry\n//\n// We don't buffer chunks, we always parse them and either create an\n// entry, or push it into the active entry.  The ReadEntry class knows\n// to throw data away if .ignore=true\n//\n// Shift entry off the buffer when it emits 'end', and emit 'entry' for\n// the next one in the list.\n//\n// At any time, we're pushing body chunks into the entry at WRITEENTRY,\n// and waiting for 'end' on the entry at READENTRY\n//\n// ignored entries get .resume() called on them straight away\n\nconst warner = require('./warn-mixin.js')\nconst Header = require('./header.js')\nconst EE = require('events')\nconst Yallist = require('yallist')\nconst maxMetaEntrySize = 1024 * 1024\nconst Entry = require('./read-entry.js')\nconst Pax = require('./pax.js')\nconst zlib = require('minizlib')\n\nconst gzipHeader = Buffer.from([0x1f, 0x8b])\nconst STATE = Symbol('state')\nconst WRITEENTRY = Symbol('writeEntry')\nconst READENTRY = Symbol('readEntry')\nconst NEXTENTRY = Symbol('nextEntry')\nconst PROCESSENTRY = Symbol('processEntry')\nconst EX = Symbol('extendedHeader')\nconst GEX = Symbol('globalExtendedHeader')\nconst META = Symbol('meta')\nconst EMITMETA = Symbol('emitMeta')\nconst BUFFER = Symbol('buffer')\nconst QUEUE = Symbol('queue')\nconst ENDED = Symbol('ended')\nconst EMITTEDEND = Symbol('emittedEnd')\nconst EMIT = Symbol('emit')\nconst UNZIP = Symbol('unzip')\nconst CONSUMECHUNK = Symbol('consumeChunk')\nconst CONSUMECHUNKSUB = Symbol('consumeChunkSub')\nconst CONSUMEBODY = Symbol('consumeBody')\nconst CONSUMEMETA = Symbol('consumeMeta')\nconst CONSUMEHEADER = Symbol('consumeHeader')\nconst CONSUMING = Symbol('consuming')\nconst BUFFERCONCAT = Symbol('bufferConcat')\nconst MAYBEEND = Symbol('maybeEnd')\nconst WRITING = Symbol('writing')\nconst ABORTED = Symbol('aborted')\nconst DONE = Symbol('onDone')\nconst SAW_VALID_ENTRY = Symbol('sawValidEntry')\nconst SAW_NULL_BLOCK = Symbol('sawNullBlock')\nconst SAW_EOF = Symbol('sawEOF')\n\nconst noop = _ => true\n\nmodule.exports = warner(class Parser extends EE {\n  constructor (opt) {\n    opt = opt || {}\n    super(opt)\n\n    this.file = opt.file || ''\n\n    // set to boolean false when an entry starts.  1024 bytes of \\0\n    // is technically a valid tarball, albeit a boring one.\n    this[SAW_VALID_ENTRY] = null\n\n    // these BADARCHIVE errors can't be detected early. listen on DONE.\n    this.on(DONE, _ => {\n      if (this[STATE] === 'begin' || this[SAW_VALID_ENTRY] === false) {\n        // either less than 1 block of data, or all entries were invalid.\n        // Either way, probably not even a tarball.\n        this.warn('TAR_BAD_ARCHIVE', 'Unrecognized archive format')\n      }\n    })\n\n    if (opt.ondone)\n      this.on(DONE, opt.ondone)\n    else {\n      this.on(DONE, _ => {\n        this.emit('prefinish')\n        this.emit('finish')\n        this.emit('end')\n        this.emit('close')\n      })\n    }\n\n    this.strict = !!opt.strict\n    this.maxMetaEntrySize = opt.maxMetaEntrySize || maxMetaEntrySize\n    this.filter = typeof opt.filter === 'function' ? opt.filter : noop\n\n    // have to set this so that streams are ok piping into it\n    this.writable = true\n    this.readable = false\n\n    this[QUEUE] = new Yallist()\n    this[BUFFER] = null\n    this[READENTRY] = null\n    this[WRITEENTRY] = null\n    this[STATE] = 'begin'\n    this[META] = ''\n    this[EX] = null\n    this[GEX] = null\n    this[ENDED] = false\n    this[UNZIP] = null\n    this[ABORTED] = false\n    this[SAW_NULL_BLOCK] = false\n    this[SAW_EOF] = false\n    if (typeof opt.onwarn === 'function')\n      this.on('warn', opt.onwarn)\n    if (typeof opt.onentry === 'function')\n      this.on('entry', opt.onentry)\n  }\n\n  [CONSUMEHEADER] (chunk, position) {\n    if (this[SAW_VALID_ENTRY] === null)\n      this[SAW_VALID_ENTRY] = false\n    let header\n    try {\n      header = new Header(chunk, position, this[EX], this[GEX])\n    } catch (er) {\n      return this.warn('TAR_ENTRY_INVALID', er)\n    }\n\n    if (header.nullBlock) {\n      if (this[SAW_NULL_BLOCK]) {\n        this[SAW_EOF] = true\n        // ending an archive with no entries.  pointless, but legal.\n        if (this[STATE] === 'begin')\n          this[STATE] = 'header'\n        this[EMIT]('eof')\n      } else {\n        this[SAW_NULL_BLOCK] = true\n        this[EMIT]('nullBlock')\n      }\n    } else {\n      this[SAW_NULL_BLOCK] = false\n      if (!header.cksumValid)\n        this.warn('TAR_ENTRY_INVALID', 'checksum failure', {header})\n      else if (!header.path)\n        this.warn('TAR_ENTRY_INVALID', 'path is required', {header})\n      else {\n        const type = header.type\n        if (/^(Symbolic)?Link$/.test(type) && !header.linkpath)\n          this.warn('TAR_ENTRY_INVALID', 'linkpath required', {header})\n        else if (!/^(Symbolic)?Link$/.test(type) && header.linkpath)\n          this.warn('TAR_ENTRY_INVALID', 'linkpath forbidden', {header})\n        else {\n          const entry = this[WRITEENTRY] = new Entry(header, this[EX], this[GEX])\n\n          // we do this for meta & ignored entries as well, because they\n          // are still valid tar, or else we wouldn't know to ignore them\n          if (!this[SAW_VALID_ENTRY]) {\n            if (entry.remain) {\n              // this might be the one!\n              const onend = () => {\n                if (!entry.invalid)\n                  this[SAW_VALID_ENTRY] = true\n              }\n              entry.on('end', onend)\n            } else\n              this[SAW_VALID_ENTRY] = true\n          }\n\n          if (entry.meta) {\n            if (entry.size > this.maxMetaEntrySize) {\n              entry.ignore = true\n              this[EMIT]('ignoredEntry', entry)\n              this[STATE] = 'ignore'\n              entry.resume()\n            } else if (entry.size > 0) {\n              this[META] = ''\n              entry.on('data', c => this[META] += c)\n              this[STATE] = 'meta'\n            }\n          } else {\n            this[EX] = null\n            entry.ignore = entry.ignore || !this.filter(entry.path, entry)\n\n            if (entry.ignore) {\n              // probably valid, just not something we care about\n              this[EMIT]('ignoredEntry', entry)\n              this[STATE] = entry.remain ? 'ignore' : 'header'\n              entry.resume()\n            } else {\n              if (entry.remain)\n                this[STATE] = 'body'\n              else {\n                this[STATE] = 'header'\n                entry.end()\n              }\n\n              if (!this[READENTRY]) {\n                this[QUEUE].push(entry)\n                this[NEXTENTRY]()\n              } else\n                this[QUEUE].push(entry)\n            }\n          }\n        }\n      }\n    }\n  }\n\n  [PROCESSENTRY] (entry) {\n    let go = true\n\n    if (!entry) {\n      this[READENTRY] = null\n      go = false\n    } else if (Array.isArray(entry))\n      this.emit.apply(this, entry)\n    else {\n      this[READENTRY] = entry\n      this.emit('entry', entry)\n      if (!entry.emittedEnd) {\n        entry.on('end', _ => this[NEXTENTRY]())\n        go = false\n      }\n    }\n\n    return go\n  }\n\n  [NEXTENTRY] () {\n    do {} while (this[PROCESSENTRY](this[QUEUE].shift()))\n\n    if (!this[QUEUE].length) {\n      // At this point, there's nothing in the queue, but we may have an\n      // entry which is being consumed (readEntry).\n      // If we don't, then we definitely can handle more data.\n      // If we do, and either it's flowing, or it has never had any data\n      // written to it, then it needs more.\n      // The only other possibility is that it has returned false from a\n      // write() call, so we wait for the next drain to continue.\n      const re = this[READENTRY]\n      const drainNow = !re || re.flowing || re.size === re.remain\n      if (drainNow) {\n        if (!this[WRITING])\n          this.emit('drain')\n      } else\n        re.once('drain', _ => this.emit('drain'))\n    }\n  }\n\n  [CONSUMEBODY] (chunk, position) {\n    // write up to but no  more than writeEntry.blockRemain\n    const entry = this[WRITEENTRY]\n    const br = entry.blockRemain\n    const c = (br >= chunk.length && position === 0) ? chunk\n      : chunk.slice(position, position + br)\n\n    entry.write(c)\n\n    if (!entry.blockRemain) {\n      this[STATE] = 'header'\n      this[WRITEENTRY] = null\n      entry.end()\n    }\n\n    return c.length\n  }\n\n  [CONSUMEMETA] (chunk, position) {\n    const entry = this[WRITEENTRY]\n    const ret = this[CONSUMEBODY](chunk, position)\n\n    // if we finished, then the entry is reset\n    if (!this[WRITEENTRY])\n      this[EMITMETA](entry)\n\n    return ret\n  }\n\n  [EMIT] (ev, data, extra) {\n    if (!this[QUEUE].length && !this[READENTRY])\n      this.emit(ev, data, extra)\n    else\n      this[QUEUE].push([ev, data, extra])\n  }\n\n  [EMITMETA] (entry) {\n    this[EMIT]('meta', this[META])\n    switch (entry.type) {\n      case 'ExtendedHeader':\n      case 'OldExtendedHeader':\n        this[EX] = Pax.parse(this[META], this[EX], false)\n        break\n\n      case 'GlobalExtendedHeader':\n        this[GEX] = Pax.parse(this[META], this[GEX], true)\n        break\n\n      case 'NextFileHasLongPath':\n      case 'OldGnuLongPath':\n        this[EX] = this[EX] || Object.create(null)\n        this[EX].path = this[META].replace(/\\0.*/, '')\n        break\n\n      case 'NextFileHasLongLinkpath':\n        this[EX] = this[EX] || Object.create(null)\n        this[EX].linkpath = this[META].replace(/\\0.*/, '')\n        break\n\n      /* istanbul ignore next */\n      default: throw new Error('unknown meta: ' + entry.type)\n    }\n  }\n\n  abort (error) {\n    this[ABORTED] = true\n    this.emit('abort', error)\n    // always throws, even in non-strict mode\n    this.warn('TAR_ABORT', error, { recoverable: false })\n  }\n\n  write (chunk) {\n    if (this[ABORTED])\n      return\n\n    // first write, might be gzipped\n    if (this[UNZIP] === null && chunk) {\n      if (this[BUFFER]) {\n        chunk = Buffer.concat([this[BUFFER], chunk])\n        this[BUFFER] = null\n      }\n      if (chunk.length < gzipHeader.length) {\n        this[BUFFER] = chunk\n        return true\n      }\n      for (let i = 0; this[UNZIP] === null && i < gzipHeader.length; i++) {\n        if (chunk[i] !== gzipHeader[i])\n          this[UNZIP] = false\n      }\n      if (this[UNZIP] === null) {\n        const ended = this[ENDED]\n        this[ENDED] = false\n        this[UNZIP] = new zlib.Unzip()\n        this[UNZIP].on('data', chunk => this[CONSUMECHUNK](chunk))\n        this[UNZIP].on('error', er => this.abort(er))\n        this[UNZIP].on('end', _ => {\n          this[ENDED] = true\n          this[CONSUMECHUNK]()\n        })\n        this[WRITING] = true\n        const ret = this[UNZIP][ended ? 'end' : 'write'](chunk)\n        this[WRITING] = false\n        return ret\n      }\n    }\n\n    this[WRITING] = true\n    if (this[UNZIP])\n      this[UNZIP].write(chunk)\n    else\n      this[CONSUMECHUNK](chunk)\n    this[WRITING] = false\n\n    // return false if there's a queue, or if the current entry isn't flowing\n    const ret =\n      this[QUEUE].length ? false :\n      this[READENTRY] ? this[READENTRY].flowing :\n      true\n\n    // if we have no queue, then that means a clogged READENTRY\n    if (!ret && !this[QUEUE].length)\n      this[READENTRY].once('drain', _ => this.emit('drain'))\n\n    return ret\n  }\n\n  [BUFFERCONCAT] (c) {\n    if (c && !this[ABORTED])\n      this[BUFFER] = this[BUFFER] ? Buffer.concat([this[BUFFER], c]) : c\n  }\n\n  [MAYBEEND] () {\n    if (this[ENDED] &&\n        !this[EMITTEDEND] &&\n        !this[ABORTED] &&\n        !this[CONSUMING]) {\n      this[EMITTEDEND] = true\n      const entry = this[WRITEENTRY]\n      if (entry && entry.blockRemain) {\n        // truncated, likely a damaged file\n        const have = this[BUFFER] ? this[BUFFER].length : 0\n        this.warn('TAR_BAD_ARCHIVE', `Truncated input (needed ${\n          entry.blockRemain} more bytes, only ${have} available)`, {entry})\n        if (this[BUFFER])\n          entry.write(this[BUFFER])\n        entry.end()\n      }\n      this[EMIT](DONE)\n    }\n  }\n\n  [CONSUMECHUNK] (chunk) {\n    if (this[CONSUMING])\n      this[BUFFERCONCAT](chunk)\n    else if (!chunk && !this[BUFFER])\n      this[MAYBEEND]()\n    else {\n      this[CONSUMING] = true\n      if (this[BUFFER]) {\n        this[BUFFERCONCAT](chunk)\n        const c = this[BUFFER]\n        this[BUFFER] = null\n        this[CONSUMECHUNKSUB](c)\n      } else\n        this[CONSUMECHUNKSUB](chunk)\n\n      while (this[BUFFER] &&\n          this[BUFFER].length >= 512 &&\n          !this[ABORTED] &&\n          !this[SAW_EOF]) {\n        const c = this[BUFFER]\n        this[BUFFER] = null\n        this[CONSUMECHUNKSUB](c)\n      }\n      this[CONSUMING] = false\n    }\n\n    if (!this[BUFFER] || this[ENDED])\n      this[MAYBEEND]()\n  }\n\n  [CONSUMECHUNKSUB] (chunk) {\n    // we know that we are in CONSUMING mode, so anything written goes into\n    // the buffer.  Advance the position and put any remainder in the buffer.\n    let position = 0\n    const length = chunk.length\n    while (position + 512 <= length && !this[ABORTED] && !this[SAW_EOF]) {\n      switch (this[STATE]) {\n        case 'begin':\n        case 'header':\n          this[CONSUMEHEADER](chunk, position)\n          position += 512\n          break\n\n        case 'ignore':\n        case 'body':\n          position += this[CONSUMEBODY](chunk, position)\n          break\n\n        case 'meta':\n          position += this[CONSUMEMETA](chunk, position)\n          break\n\n        /* istanbul ignore next */\n        default:\n          throw new Error('invalid state: ' + this[STATE])\n      }\n    }\n\n    if (position < length) {\n      if (this[BUFFER])\n        this[BUFFER] = Buffer.concat([chunk.slice(position), this[BUFFER]])\n      else\n        this[BUFFER] = chunk.slice(position)\n    }\n  }\n\n  end (chunk) {\n    if (!this[ABORTED]) {\n      if (this[UNZIP])\n        this[UNZIP].end(chunk)\n      else {\n        this[ENDED] = true\n        this.write(chunk)\n      }\n    }\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}