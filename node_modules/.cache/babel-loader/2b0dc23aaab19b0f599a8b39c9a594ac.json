{"ast":null,"code":"'use strict';\n\n// the PEND/UNPEND stuff tracks whether we're ready to emit end/close yet.\n// but the path reservations are required to avoid race conditions where\n// parallelized unpack ops may mess with one another, due to dependencies\n// (like a Link depending on its target) or destructive operations (like\n// clobbering an fs object to create one of a different type.)\nvar _slicedToArray = require(\"/Users/lieo/diabetes/CUT2DMTest/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"/Users/lieo/diabetes/CUT2DMTest/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/lieo/diabetes/CUT2DMTest/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/Users/lieo/diabetes/CUT2DMTest/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/lieo/diabetes/CUT2DMTest/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/lieo/diabetes/CUT2DMTest/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/lieo/diabetes/CUT2DMTest/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/lieo/diabetes/CUT2DMTest/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar assert = require('assert');\nvar Parser = require('./parse.js');\nvar fs = require('fs');\nvar fsm = require('fs-minipass');\nvar path = require('path');\nvar mkdir = require('./mkdir.js');\nvar wc = require('./winchars.js');\nvar pathReservations = require('./path-reservations.js');\nvar stripAbsolutePath = require('./strip-absolute-path.js');\nvar normPath = require('./normalize-windows-path.js');\nvar stripSlash = require('./strip-trailing-slashes.js');\nvar normalize = require('./normalize-unicode.js');\nvar ONENTRY = Symbol('onEntry');\nvar CHECKFS = Symbol('checkFs');\nvar CHECKFS2 = Symbol('checkFs2');\nvar PRUNECACHE = Symbol('pruneCache');\nvar ISREUSABLE = Symbol('isReusable');\nvar MAKEFS = Symbol('makeFs');\nvar FILE = Symbol('file');\nvar DIRECTORY = Symbol('directory');\nvar LINK = Symbol('link');\nvar SYMLINK = Symbol('symlink');\nvar HARDLINK = Symbol('hardlink');\nvar UNSUPPORTED = Symbol('unsupported');\nvar CHECKPATH = Symbol('checkPath');\nvar MKDIR = Symbol('mkdir');\nvar ONERROR = Symbol('onError');\nvar PENDING = Symbol('pending');\nvar PEND = Symbol('pend');\nvar UNPEND = Symbol('unpend');\nvar ENDED = Symbol('ended');\nvar MAYBECLOSE = Symbol('maybeClose');\nvar SKIP = Symbol('skip');\nvar DOCHOWN = Symbol('doChown');\nvar UID = Symbol('uid');\nvar GID = Symbol('gid');\nvar CHECKED_CWD = Symbol('checkedCwd');\nvar crypto = require('crypto');\nvar getFlag = require('./get-write-flag.js');\nvar platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform;\nvar isWindows = platform === 'win32';\n\n// Unlinks on Windows are not atomic.\n//\n// This means that if you have a file entry, followed by another\n// file entry with an identical name, and you cannot re-use the file\n// (because it's a hardlink, or because unlink:true is set, or it's\n// Windows, which does not have useful nlink values), then the unlink\n// will be committed to the disk AFTER the new file has been written\n// over the old one, deleting the new file.\n//\n// To work around this, on Windows systems, we rename the file and then\n// delete the renamed file.  It's a sloppy kludge, but frankly, I do not\n// know of a better way to do this, given windows' non-atomic unlink\n// semantics.\n//\n// See: https://github.com/npm/node-tar/issues/183\n/* istanbul ignore next */\nvar unlinkFile = function unlinkFile(path, cb) {\n  if (!isWindows) return fs.unlink(path, cb);\n  var name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex');\n  fs.rename(path, name, function (er) {\n    if (er) return cb(er);\n    fs.unlink(name, cb);\n  });\n};\n\n/* istanbul ignore next */\nvar unlinkFileSync = function unlinkFileSync(path) {\n  if (!isWindows) return fs.unlinkSync(path);\n  var name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex');\n  fs.renameSync(path, name);\n  fs.unlinkSync(name);\n};\n\n// this.gid, entry.gid, this.processUid\nvar uint32 = function uint32(a, b, c) {\n  return a === a >>> 0 ? a : b === b >>> 0 ? b : c;\n};\n\n// clear the cache if it's a case-insensitive unicode-squashing match.\n// we can't know if the current file system is case-sensitive or supports\n// unicode fully, so we check for similarity on the maximally compatible\n// representation.  Err on the side of pruning, since all it's doing is\n// preventing lstats, and it's not the end of the world if we get a false\n// positive.\n// Note that on windows, we always drop the entire cache whenever a\n// symbolic link is encountered, because 8.3 filenames are impossible\n// to reason about, and collisions are hazards rather than just failures.\nvar cacheKeyNormalize = function cacheKeyNormalize(path) {\n  return normalize(stripSlash(normPath(path))).toLowerCase();\n};\nvar pruneCache = function pruneCache(cache, abs) {\n  abs = cacheKeyNormalize(abs);\n  var _iterator = _createForOfIteratorHelper(cache.keys()),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _path = _step.value;\n      var pnorm = cacheKeyNormalize(_path);\n      if (pnorm === abs || pnorm.indexOf(abs + '/') === 0) cache.delete(_path);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\nvar dropCache = function dropCache(cache) {\n  var _iterator2 = _createForOfIteratorHelper(cache.keys()),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var key = _step2.value;\n      cache.delete(key);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n};\nvar Unpack = /*#__PURE__*/function (_Parser) {\n  _inherits(Unpack, _Parser);\n  var _super = _createSuper(Unpack);\n  function Unpack(opt) {\n    var _this;\n    _classCallCheck(this, Unpack);\n    if (!opt) opt = {};\n    opt.ondone = function (_) {\n      _this[ENDED] = true;\n      _this[MAYBECLOSE]();\n    };\n    _this = _super.call(this, opt);\n    _this[CHECKED_CWD] = false;\n    _this.reservations = pathReservations();\n    _this.transform = typeof opt.transform === 'function' ? opt.transform : null;\n    _this.writable = true;\n    _this.readable = false;\n    _this[PENDING] = 0;\n    _this[ENDED] = false;\n    _this.dirCache = opt.dirCache || new Map();\n    if (typeof opt.uid === 'number' || typeof opt.gid === 'number') {\n      // need both or neither\n      if (typeof opt.uid !== 'number' || typeof opt.gid !== 'number') throw new TypeError('cannot set owner without number uid and gid');\n      if (opt.preserveOwner) {\n        throw new TypeError('cannot preserve owner in archive and also set owner explicitly');\n      }\n      _this.uid = opt.uid;\n      _this.gid = opt.gid;\n      _this.setOwner = true;\n    } else {\n      _this.uid = null;\n      _this.gid = null;\n      _this.setOwner = false;\n    }\n\n    // default true for root\n    if (opt.preserveOwner === undefined && typeof opt.uid !== 'number') _this.preserveOwner = process.getuid && process.getuid() === 0;else _this.preserveOwner = !!opt.preserveOwner;\n    _this.processUid = (_this.preserveOwner || _this.setOwner) && process.getuid ? process.getuid() : null;\n    _this.processGid = (_this.preserveOwner || _this.setOwner) && process.getgid ? process.getgid() : null;\n\n    // mostly just for testing, but useful in some cases.\n    // Forcibly trigger a chown on every entry, no matter what\n    _this.forceChown = opt.forceChown === true;\n\n    // turn ><?| in filenames into 0xf000-higher encoded forms\n    _this.win32 = !!opt.win32 || isWindows;\n\n    // do not unpack over files that are newer than what's in the archive\n    _this.newer = !!opt.newer;\n\n    // do not unpack over ANY files\n    _this.keep = !!opt.keep;\n\n    // do not set mtime/atime of extracted entries\n    _this.noMtime = !!opt.noMtime;\n\n    // allow .., absolute path entries, and unpacking through symlinks\n    // without this, warn and skip .., relativize absolutes, and error\n    // on symlinks in extraction path\n    _this.preservePaths = !!opt.preservePaths;\n\n    // unlink files and links before writing. This breaks existing hard\n    // links, and removes symlink directories rather than erroring\n    _this.unlink = !!opt.unlink;\n    _this.cwd = normPath(path.resolve(opt.cwd || process.cwd()));\n    _this.strip = +opt.strip || 0;\n    // if we're not chmodding, then we don't need the process umask\n    _this.processUmask = opt.noChmod ? 0 : process.umask();\n    _this.umask = typeof opt.umask === 'number' ? opt.umask : _this.processUmask;\n\n    // default mode for dirs created as parents\n    _this.dmode = opt.dmode || 511 & ~_this.umask;\n    _this.fmode = opt.fmode || 438 & ~_this.umask;\n    _this.on('entry', function (entry) {\n      return _this[ONENTRY](entry);\n    });\n    return _this;\n  }\n\n  // a bad or damaged archive is a warning for Parser, but an error\n  // when extracting.  Mark those errors as unrecoverable, because\n  // the Unpack contract cannot be met.\n  _createClass(Unpack, [{\n    key: \"warn\",\n    value: function warn(code, msg) {\n      var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (code === 'TAR_BAD_ARCHIVE' || code === 'TAR_ABORT') data.recoverable = false;\n      return _get(_getPrototypeOf(Unpack.prototype), \"warn\", this).call(this, code, msg, data);\n    }\n  }, {\n    key: MAYBECLOSE,\n    value: function value() {\n      if (this[ENDED] && this[PENDING] === 0) {\n        this.emit('prefinish');\n        this.emit('finish');\n        this.emit('end');\n        this.emit('close');\n      }\n    }\n  }, {\n    key: CHECKPATH,\n    value: function value(entry) {\n      if (this.strip) {\n        var parts = normPath(entry.path).split('/');\n        if (parts.length < this.strip) return false;\n        entry.path = parts.slice(this.strip).join('/');\n        if (entry.type === 'Link') {\n          var linkparts = normPath(entry.linkpath).split('/');\n          if (linkparts.length >= this.strip) entry.linkpath = linkparts.slice(this.strip).join('/');else return false;\n        }\n      }\n      if (!this.preservePaths) {\n        var p = normPath(entry.path);\n        var _parts = p.split('/');\n        if (_parts.includes('..') || isWindows && /^[a-z]:\\.\\.$/i.test(_parts[0])) {\n          this.warn('TAR_ENTRY_ERROR', \"path contains '..'\", {\n            entry: entry,\n            path: p\n          });\n          return false;\n        }\n\n        // strip off the root\n        var _stripAbsolutePath = stripAbsolutePath(p),\n          _stripAbsolutePath2 = _slicedToArray(_stripAbsolutePath, 2),\n          root = _stripAbsolutePath2[0],\n          stripped = _stripAbsolutePath2[1];\n        if (root) {\n          entry.path = stripped;\n          this.warn('TAR_ENTRY_INFO', \"stripping \".concat(root, \" from absolute path\"), {\n            entry: entry,\n            path: p\n          });\n        }\n      }\n      if (path.isAbsolute(entry.path)) entry.absolute = normPath(path.resolve(entry.path));else entry.absolute = normPath(path.resolve(this.cwd, entry.path));\n\n      // if we somehow ended up with a path that escapes the cwd, and we are\n      // not in preservePaths mode, then something is fishy!  This should have\n      // been prevented above, so ignore this for coverage.\n      /* istanbul ignore if - defense in depth */\n      if (!this.preservePaths && entry.absolute.indexOf(this.cwd + '/') !== 0 && entry.absolute !== this.cwd) {\n        this.warn('TAR_ENTRY_ERROR', 'path escaped extraction target', {\n          entry: entry,\n          path: normPath(entry.path),\n          resolvedPath: entry.absolute,\n          cwd: this.cwd\n        });\n        return false;\n      }\n\n      // an archive can set properties on the extraction directory, but it\n      // may not replace the cwd with a different kind of thing entirely.\n      if (entry.absolute === this.cwd && entry.type !== 'Directory' && entry.type !== 'GNUDumpDir') return false;\n\n      // only encode : chars that aren't drive letter indicators\n      if (this.win32) {\n        var _path$win32$parse = path.win32.parse(entry.absolute),\n          aRoot = _path$win32$parse.root;\n        entry.absolute = aRoot + wc.encode(entry.absolute.substr(aRoot.length));\n        var _path$win32$parse2 = path.win32.parse(entry.path),\n          pRoot = _path$win32$parse2.root;\n        entry.path = pRoot + wc.encode(entry.path.substr(pRoot.length));\n      }\n      return true;\n    }\n  }, {\n    key: ONENTRY,\n    value: function value(entry) {\n      if (!this[CHECKPATH](entry)) return entry.resume();\n      assert.equal(typeof entry.absolute, 'string');\n      switch (entry.type) {\n        case 'Directory':\n        case 'GNUDumpDir':\n          if (entry.mode) entry.mode = entry.mode | 448;\n        case 'File':\n        case 'OldFile':\n        case 'ContiguousFile':\n        case 'Link':\n        case 'SymbolicLink':\n          return this[CHECKFS](entry);\n        case 'CharacterDevice':\n        case 'BlockDevice':\n        case 'FIFO':\n        default:\n          return this[UNSUPPORTED](entry);\n      }\n    }\n  }, {\n    key: ONERROR,\n    value: function value(er, entry) {\n      // Cwd has to exist, or else nothing works. That's serious.\n      // Other errors are warnings, which raise the error in strict\n      // mode, but otherwise continue on.\n      if (er.name === 'CwdError') this.emit('error', er);else {\n        this.warn('TAR_ENTRY_ERROR', er, {\n          entry: entry\n        });\n        this[UNPEND]();\n        entry.resume();\n      }\n    }\n  }, {\n    key: MKDIR,\n    value: function value(dir, mode, cb) {\n      mkdir(normPath(dir), {\n        uid: this.uid,\n        gid: this.gid,\n        processUid: this.processUid,\n        processGid: this.processGid,\n        umask: this.processUmask,\n        preserve: this.preservePaths,\n        unlink: this.unlink,\n        cache: this.dirCache,\n        cwd: this.cwd,\n        mode: mode,\n        noChmod: this.noChmod\n      }, cb);\n    }\n  }, {\n    key: DOCHOWN,\n    value: function value(entry) {\n      // in preserve owner mode, chown if the entry doesn't match process\n      // in set owner mode, chown if setting doesn't match process\n      return this.forceChown || this.preserveOwner && (typeof entry.uid === 'number' && entry.uid !== this.processUid || typeof entry.gid === 'number' && entry.gid !== this.processGid) || typeof this.uid === 'number' && this.uid !== this.processUid || typeof this.gid === 'number' && this.gid !== this.processGid;\n    }\n  }, {\n    key: UID,\n    value: function value(entry) {\n      return uint32(this.uid, entry.uid, this.processUid);\n    }\n  }, {\n    key: GID,\n    value: function value(entry) {\n      return uint32(this.gid, entry.gid, this.processGid);\n    }\n  }, {\n    key: FILE,\n    value: function value(entry, fullyDone) {\n      var _this2 = this;\n      var mode = entry.mode & 4095 || this.fmode;\n      var stream = new fsm.WriteStream(entry.absolute, {\n        flags: getFlag(entry.size),\n        mode: mode,\n        autoClose: false\n      });\n      stream.on('error', function (er) {\n        if (stream.fd) fs.close(stream.fd, function () {});\n\n        // flush all the data out so that we aren't left hanging\n        // if the error wasn't actually fatal.  otherwise the parse\n        // is blocked, and we never proceed.\n        stream.write = function () {\n          return true;\n        };\n        _this2[ONERROR](er, entry);\n        fullyDone();\n      });\n      var actions = 1;\n      var done = function done(er) {\n        if (er) {\n          /* istanbul ignore else - we should always have a fd by now */\n          if (stream.fd) fs.close(stream.fd, function () {});\n          _this2[ONERROR](er, entry);\n          fullyDone();\n          return;\n        }\n        if (--actions === 0) {\n          fs.close(stream.fd, function (er) {\n            if (er) _this2[ONERROR](er, entry);else _this2[UNPEND]();\n            fullyDone();\n          });\n        }\n      };\n      stream.on('finish', function (_) {\n        // if futimes fails, try utimes\n        // if utimes fails, fail with the original error\n        // same for fchown/chown\n        var abs = entry.absolute;\n        var fd = stream.fd;\n        if (entry.mtime && !_this2.noMtime) {\n          actions++;\n          var atime = entry.atime || new Date();\n          var mtime = entry.mtime;\n          fs.futimes(fd, atime, mtime, function (er) {\n            return er ? fs.utimes(abs, atime, mtime, function (er2) {\n              return done(er2 && er);\n            }) : done();\n          });\n        }\n        if (_this2[DOCHOWN](entry)) {\n          actions++;\n          var uid = _this2[UID](entry);\n          var gid = _this2[GID](entry);\n          fs.fchown(fd, uid, gid, function (er) {\n            return er ? fs.chown(abs, uid, gid, function (er2) {\n              return done(er2 && er);\n            }) : done();\n          });\n        }\n        done();\n      });\n      var tx = this.transform ? this.transform(entry) || entry : entry;\n      if (tx !== entry) {\n        tx.on('error', function (er) {\n          _this2[ONERROR](er, entry);\n          fullyDone();\n        });\n        entry.pipe(tx);\n      }\n      tx.pipe(stream);\n    }\n  }, {\n    key: DIRECTORY,\n    value: function value(entry, fullyDone) {\n      var _this3 = this;\n      var mode = entry.mode & 4095 || this.dmode;\n      this[MKDIR](entry.absolute, mode, function (er) {\n        if (er) {\n          _this3[ONERROR](er, entry);\n          fullyDone();\n          return;\n        }\n        var actions = 1;\n        var done = function done(_) {\n          if (--actions === 0) {\n            fullyDone();\n            _this3[UNPEND]();\n            entry.resume();\n          }\n        };\n        if (entry.mtime && !_this3.noMtime) {\n          actions++;\n          fs.utimes(entry.absolute, entry.atime || new Date(), entry.mtime, done);\n        }\n        if (_this3[DOCHOWN](entry)) {\n          actions++;\n          fs.chown(entry.absolute, _this3[UID](entry), _this3[GID](entry), done);\n        }\n        done();\n      });\n    }\n  }, {\n    key: UNSUPPORTED,\n    value: function value(entry) {\n      entry.unsupported = true;\n      this.warn('TAR_ENTRY_UNSUPPORTED', \"unsupported entry type: \".concat(entry.type), {\n        entry: entry\n      });\n      entry.resume();\n    }\n  }, {\n    key: SYMLINK,\n    value: function value(entry, done) {\n      this[LINK](entry, entry.linkpath, 'symlink', done);\n    }\n  }, {\n    key: HARDLINK,\n    value: function value(entry, done) {\n      var linkpath = normPath(path.resolve(this.cwd, entry.linkpath));\n      this[LINK](entry, linkpath, 'link', done);\n    }\n  }, {\n    key: PEND,\n    value: function value() {\n      this[PENDING]++;\n    }\n  }, {\n    key: UNPEND,\n    value: function value() {\n      this[PENDING]--;\n      this[MAYBECLOSE]();\n    }\n  }, {\n    key: SKIP,\n    value: function value(entry) {\n      this[UNPEND]();\n      entry.resume();\n    }\n\n    // Check if we can reuse an existing filesystem entry safely and\n    // overwrite it, rather than unlinking and recreating\n    // Windows doesn't report a useful nlink, so we just never reuse entries\n  }, {\n    key: ISREUSABLE,\n    value: function value(entry, st) {\n      return entry.type === 'File' && !this.unlink && st.isFile() && st.nlink <= 1 && !isWindows;\n    }\n\n    // check if a thing is there, and if so, try to clobber it\n  }, {\n    key: CHECKFS,\n    value: function value(entry) {\n      var _this4 = this;\n      this[PEND]();\n      var paths = [entry.path];\n      if (entry.linkpath) paths.push(entry.linkpath);\n      this.reservations.reserve(paths, function (done) {\n        return _this4[CHECKFS2](entry, done);\n      });\n    }\n  }, {\n    key: PRUNECACHE,\n    value: function value(entry) {\n      // if we are not creating a directory, and the path is in the dirCache,\n      // then that means we are about to delete the directory we created\n      // previously, and it is no longer going to be a directory, and neither\n      // is any of its children.\n      // If a symbolic link is encountered, all bets are off.  There is no\n      // reasonable way to sanitize the cache in such a way we will be able to\n      // avoid having filesystem collisions.  If this happens with a non-symlink\n      // entry, it'll just fail to unpack, but a symlink to a directory, using an\n      // 8.3 shortname or certain unicode attacks, can evade detection and lead\n      // to arbitrary writes to anywhere on the system.\n      if (entry.type === 'SymbolicLink') dropCache(this.dirCache);else if (entry.type !== 'Directory') pruneCache(this.dirCache, entry.absolute);\n    }\n  }, {\n    key: CHECKFS2,\n    value: function value(entry, fullyDone) {\n      var _this5 = this;\n      this[PRUNECACHE](entry);\n      var done = function done(er) {\n        _this5[PRUNECACHE](entry);\n        fullyDone(er);\n      };\n      var checkCwd = function checkCwd() {\n        _this5[MKDIR](_this5.cwd, _this5.dmode, function (er) {\n          if (er) {\n            _this5[ONERROR](er, entry);\n            done();\n            return;\n          }\n          _this5[CHECKED_CWD] = true;\n          start();\n        });\n      };\n      var start = function start() {\n        if (entry.absolute !== _this5.cwd) {\n          var parent = normPath(path.dirname(entry.absolute));\n          if (parent !== _this5.cwd) {\n            return _this5[MKDIR](parent, _this5.dmode, function (er) {\n              if (er) {\n                _this5[ONERROR](er, entry);\n                done();\n                return;\n              }\n              afterMakeParent();\n            });\n          }\n        }\n        afterMakeParent();\n      };\n      var afterMakeParent = function afterMakeParent() {\n        fs.lstat(entry.absolute, function (lstatEr, st) {\n          if (st && (_this5.keep || _this5.newer && st.mtime > entry.mtime)) {\n            _this5[SKIP](entry);\n            done();\n            return;\n          }\n          if (lstatEr || _this5[ISREUSABLE](entry, st)) return _this5[MAKEFS](null, entry, done);\n          if (st.isDirectory()) {\n            if (entry.type === 'Directory') {\n              var needChmod = !_this5.noChmod && entry.mode && (st.mode & 4095) !== entry.mode;\n              var afterChmod = function afterChmod(er) {\n                return _this5[MAKEFS](er, entry, done);\n              };\n              if (!needChmod) return afterChmod();\n              return fs.chmod(entry.absolute, entry.mode, afterChmod);\n            }\n            // Not a dir entry, have to remove it.\n            // NB: the only way to end up with an entry that is the cwd\n            // itself, in such a way that == does not detect, is a\n            // tricky windows absolute path with UNC or 8.3 parts (and\n            // preservePaths:true, or else it will have been stripped).\n            // In that case, the user has opted out of path protections\n            // explicitly, so if they blow away the cwd, c'est la vie.\n            if (entry.absolute !== _this5.cwd) {\n              return fs.rmdir(entry.absolute, function (er) {\n                return _this5[MAKEFS](er, entry, done);\n              });\n            }\n          }\n\n          // not a dir, and not reusable\n          // don't remove if the cwd, we want that error\n          if (entry.absolute === _this5.cwd) return _this5[MAKEFS](null, entry, done);\n          unlinkFile(entry.absolute, function (er) {\n            return _this5[MAKEFS](er, entry, done);\n          });\n        });\n      };\n      if (this[CHECKED_CWD]) start();else checkCwd();\n    }\n  }, {\n    key: MAKEFS,\n    value: function value(er, entry, done) {\n      if (er) {\n        this[ONERROR](er, entry);\n        done();\n        return;\n      }\n      switch (entry.type) {\n        case 'File':\n        case 'OldFile':\n        case 'ContiguousFile':\n          return this[FILE](entry, done);\n        case 'Link':\n          return this[HARDLINK](entry, done);\n        case 'SymbolicLink':\n          return this[SYMLINK](entry, done);\n        case 'Directory':\n        case 'GNUDumpDir':\n          return this[DIRECTORY](entry, done);\n      }\n    }\n  }, {\n    key: LINK,\n    value: function value(entry, linkpath, link, done) {\n      var _this6 = this;\n      // XXX: get the type ('symlink' or 'junction') for windows\n      fs[link](linkpath, entry.absolute, function (er) {\n        if (er) _this6[ONERROR](er, entry);else {\n          _this6[UNPEND]();\n          entry.resume();\n        }\n        done();\n      });\n    }\n  }]);\n  return Unpack;\n}(Parser);\nvar callSync = function callSync(fn) {\n  try {\n    return [null, fn()];\n  } catch (er) {\n    return [er, null];\n  }\n};\nvar UnpackSync = /*#__PURE__*/function (_Unpack) {\n  _inherits(UnpackSync, _Unpack);\n  var _super2 = _createSuper(UnpackSync);\n  function UnpackSync() {\n    _classCallCheck(this, UnpackSync);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(UnpackSync, [{\n    key: MAKEFS,\n    value: function value(er, entry) {\n      return _get(_getPrototypeOf(UnpackSync.prototype), MAKEFS, this).call(this, er, entry, function () {});\n    }\n  }, {\n    key: CHECKFS,\n    value: function value(entry) {\n      this[PRUNECACHE](entry);\n      if (!this[CHECKED_CWD]) {\n        var _er = this[MKDIR](this.cwd, this.dmode);\n        if (_er) return this[ONERROR](_er, entry);\n        this[CHECKED_CWD] = true;\n      }\n\n      // don't bother to make the parent if the current entry is the cwd,\n      // we've already checked it.\n      if (entry.absolute !== this.cwd) {\n        var parent = normPath(path.dirname(entry.absolute));\n        if (parent !== this.cwd) {\n          var mkParent = this[MKDIR](parent, this.dmode);\n          if (mkParent) return this[ONERROR](mkParent, entry);\n        }\n      }\n      var _callSync = callSync(function () {\n          return fs.lstatSync(entry.absolute);\n        }),\n        _callSync2 = _slicedToArray(_callSync, 2),\n        lstatEr = _callSync2[0],\n        st = _callSync2[1];\n      if (st && (this.keep || this.newer && st.mtime > entry.mtime)) return this[SKIP](entry);\n      if (lstatEr || this[ISREUSABLE](entry, st)) return this[MAKEFS](null, entry);\n      if (st.isDirectory()) {\n        if (entry.type === 'Directory') {\n          var needChmod = !this.noChmod && entry.mode && (st.mode & 4095) !== entry.mode;\n          var _ref = needChmod ? callSync(function () {\n              fs.chmodSync(entry.absolute, entry.mode);\n            }) : [],\n            _ref2 = _slicedToArray(_ref, 1),\n            _er2 = _ref2[0];\n          return this[MAKEFS](_er2, entry);\n        }\n        // not a dir entry, have to remove it\n        var _callSync3 = callSync(function () {\n            return fs.rmdirSync(entry.absolute);\n          }),\n          _callSync4 = _slicedToArray(_callSync3, 1),\n          _er3 = _callSync4[0];\n        this[MAKEFS](_er3, entry);\n      }\n\n      // not a dir, and not reusable.\n      // don't remove if it's the cwd, since we want that error.\n      var _ref3 = entry.absolute === this.cwd ? [] : callSync(function () {\n          return unlinkFileSync(entry.absolute);\n        }),\n        _ref4 = _slicedToArray(_ref3, 1),\n        er = _ref4[0];\n      this[MAKEFS](er, entry);\n    }\n  }, {\n    key: FILE,\n    value: function value(entry, done) {\n      var _this7 = this;\n      var mode = entry.mode & 4095 || this.fmode;\n      var oner = function oner(er) {\n        var closeError;\n        try {\n          fs.closeSync(fd);\n        } catch (e) {\n          closeError = e;\n        }\n        if (er || closeError) _this7[ONERROR](er || closeError, entry);\n        done();\n      };\n      var fd;\n      try {\n        fd = fs.openSync(entry.absolute, getFlag(entry.size), mode);\n      } catch (er) {\n        return oner(er);\n      }\n      var tx = this.transform ? this.transform(entry) || entry : entry;\n      if (tx !== entry) {\n        tx.on('error', function (er) {\n          return _this7[ONERROR](er, entry);\n        });\n        entry.pipe(tx);\n      }\n      tx.on('data', function (chunk) {\n        try {\n          fs.writeSync(fd, chunk, 0, chunk.length);\n        } catch (er) {\n          oner(er);\n        }\n      });\n      tx.on('end', function (_) {\n        var er = null;\n        // try both, falling futimes back to utimes\n        // if either fails, handle the first error\n        if (entry.mtime && !_this7.noMtime) {\n          var atime = entry.atime || new Date();\n          var mtime = entry.mtime;\n          try {\n            fs.futimesSync(fd, atime, mtime);\n          } catch (futimeser) {\n            try {\n              fs.utimesSync(entry.absolute, atime, mtime);\n            } catch (utimeser) {\n              er = futimeser;\n            }\n          }\n        }\n        if (_this7[DOCHOWN](entry)) {\n          var uid = _this7[UID](entry);\n          var gid = _this7[GID](entry);\n          try {\n            fs.fchownSync(fd, uid, gid);\n          } catch (fchowner) {\n            try {\n              fs.chownSync(entry.absolute, uid, gid);\n            } catch (chowner) {\n              er = er || fchowner;\n            }\n          }\n        }\n        oner(er);\n      });\n    }\n  }, {\n    key: DIRECTORY,\n    value: function value(entry, done) {\n      var mode = entry.mode & 4095 || this.dmode;\n      var er = this[MKDIR](entry.absolute, mode);\n      if (er) {\n        this[ONERROR](er, entry);\n        done();\n        return;\n      }\n      if (entry.mtime && !this.noMtime) {\n        try {\n          fs.utimesSync(entry.absolute, entry.atime || new Date(), entry.mtime);\n        } catch (er) {}\n      }\n      if (this[DOCHOWN](entry)) {\n        try {\n          fs.chownSync(entry.absolute, this[UID](entry), this[GID](entry));\n        } catch (er) {}\n      }\n      done();\n      entry.resume();\n    }\n  }, {\n    key: MKDIR,\n    value: function value(dir, mode) {\n      try {\n        return mkdir.sync(normPath(dir), {\n          uid: this.uid,\n          gid: this.gid,\n          processUid: this.processUid,\n          processGid: this.processGid,\n          umask: this.processUmask,\n          preserve: this.preservePaths,\n          unlink: this.unlink,\n          cache: this.dirCache,\n          cwd: this.cwd,\n          mode: mode\n        });\n      } catch (er) {\n        return er;\n      }\n    }\n  }, {\n    key: LINK,\n    value: function value(entry, linkpath, link, done) {\n      try {\n        fs[link + 'Sync'](linkpath, entry.absolute);\n        done();\n        entry.resume();\n      } catch (er) {\n        return this[ONERROR](er, entry);\n      }\n    }\n  }]);\n  return UnpackSync;\n}(Unpack);\nUnpack.Sync = UnpackSync;\nmodule.exports = Unpack;","map":{"version":3,"names":["assert","require","Parser","fs","fsm","path","mkdir","wc","pathReservations","stripAbsolutePath","normPath","stripSlash","normalize","ONENTRY","Symbol","CHECKFS","CHECKFS2","PRUNECACHE","ISREUSABLE","MAKEFS","FILE","DIRECTORY","LINK","SYMLINK","HARDLINK","UNSUPPORTED","CHECKPATH","MKDIR","ONERROR","PENDING","PEND","UNPEND","ENDED","MAYBECLOSE","SKIP","DOCHOWN","UID","GID","CHECKED_CWD","crypto","getFlag","platform","process","env","TESTING_TAR_FAKE_PLATFORM","isWindows","unlinkFile","cb","unlink","name","randomBytes","toString","rename","er","unlinkFileSync","unlinkSync","renameSync","uint32","a","b","c","cacheKeyNormalize","toLowerCase","pruneCache","cache","abs","keys","pnorm","indexOf","delete","dropCache","key","Unpack","opt","ondone","_","reservations","transform","writable","readable","dirCache","Map","uid","gid","TypeError","preserveOwner","setOwner","undefined","getuid","processUid","processGid","getgid","forceChown","win32","newer","keep","noMtime","preservePaths","cwd","resolve","strip","processUmask","noChmod","umask","dmode","fmode","on","entry","code","msg","data","recoverable","emit","parts","split","length","slice","join","type","linkparts","linkpath","p","includes","test","warn","root","stripped","isAbsolute","absolute","resolvedPath","parse","aRoot","encode","substr","pRoot","resume","equal","mode","dir","preserve","fullyDone","stream","WriteStream","flags","size","autoClose","fd","close","write","actions","done","mtime","atime","Date","futimes","utimes","er2","fchown","chown","tx","pipe","unsupported","st","isFile","nlink","paths","push","reserve","checkCwd","start","parent","dirname","afterMakeParent","lstat","lstatEr","isDirectory","needChmod","afterChmod","chmod","rmdir","link","callSync","fn","UnpackSync","mkParent","lstatSync","chmodSync","rmdirSync","oner","closeError","closeSync","e","openSync","chunk","writeSync","futimesSync","futimeser","utimesSync","utimeser","fchownSync","fchowner","chownSync","chowner","sync","Sync","module","exports"],"sources":["/Users/lieo/diabetes/CUT2DMTest/node_modules/tar/lib/unpack.js"],"sourcesContent":["'use strict'\n\n// the PEND/UNPEND stuff tracks whether we're ready to emit end/close yet.\n// but the path reservations are required to avoid race conditions where\n// parallelized unpack ops may mess with one another, due to dependencies\n// (like a Link depending on its target) or destructive operations (like\n// clobbering an fs object to create one of a different type.)\n\nconst assert = require('assert')\nconst Parser = require('./parse.js')\nconst fs = require('fs')\nconst fsm = require('fs-minipass')\nconst path = require('path')\nconst mkdir = require('./mkdir.js')\nconst wc = require('./winchars.js')\nconst pathReservations = require('./path-reservations.js')\nconst stripAbsolutePath = require('./strip-absolute-path.js')\nconst normPath = require('./normalize-windows-path.js')\nconst stripSlash = require('./strip-trailing-slashes.js')\nconst normalize = require('./normalize-unicode.js')\n\nconst ONENTRY = Symbol('onEntry')\nconst CHECKFS = Symbol('checkFs')\nconst CHECKFS2 = Symbol('checkFs2')\nconst PRUNECACHE = Symbol('pruneCache')\nconst ISREUSABLE = Symbol('isReusable')\nconst MAKEFS = Symbol('makeFs')\nconst FILE = Symbol('file')\nconst DIRECTORY = Symbol('directory')\nconst LINK = Symbol('link')\nconst SYMLINK = Symbol('symlink')\nconst HARDLINK = Symbol('hardlink')\nconst UNSUPPORTED = Symbol('unsupported')\nconst CHECKPATH = Symbol('checkPath')\nconst MKDIR = Symbol('mkdir')\nconst ONERROR = Symbol('onError')\nconst PENDING = Symbol('pending')\nconst PEND = Symbol('pend')\nconst UNPEND = Symbol('unpend')\nconst ENDED = Symbol('ended')\nconst MAYBECLOSE = Symbol('maybeClose')\nconst SKIP = Symbol('skip')\nconst DOCHOWN = Symbol('doChown')\nconst UID = Symbol('uid')\nconst GID = Symbol('gid')\nconst CHECKED_CWD = Symbol('checkedCwd')\nconst crypto = require('crypto')\nconst getFlag = require('./get-write-flag.js')\nconst platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform\nconst isWindows = platform === 'win32'\n\n// Unlinks on Windows are not atomic.\n//\n// This means that if you have a file entry, followed by another\n// file entry with an identical name, and you cannot re-use the file\n// (because it's a hardlink, or because unlink:true is set, or it's\n// Windows, which does not have useful nlink values), then the unlink\n// will be committed to the disk AFTER the new file has been written\n// over the old one, deleting the new file.\n//\n// To work around this, on Windows systems, we rename the file and then\n// delete the renamed file.  It's a sloppy kludge, but frankly, I do not\n// know of a better way to do this, given windows' non-atomic unlink\n// semantics.\n//\n// See: https://github.com/npm/node-tar/issues/183\n/* istanbul ignore next */\nconst unlinkFile = (path, cb) => {\n  if (!isWindows)\n    return fs.unlink(path, cb)\n\n  const name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex')\n  fs.rename(path, name, er => {\n    if (er)\n      return cb(er)\n    fs.unlink(name, cb)\n  })\n}\n\n/* istanbul ignore next */\nconst unlinkFileSync = path => {\n  if (!isWindows)\n    return fs.unlinkSync(path)\n\n  const name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex')\n  fs.renameSync(path, name)\n  fs.unlinkSync(name)\n}\n\n// this.gid, entry.gid, this.processUid\nconst uint32 = (a, b, c) =>\n  a === a >>> 0 ? a\n  : b === b >>> 0 ? b\n  : c\n\n// clear the cache if it's a case-insensitive unicode-squashing match.\n// we can't know if the current file system is case-sensitive or supports\n// unicode fully, so we check for similarity on the maximally compatible\n// representation.  Err on the side of pruning, since all it's doing is\n// preventing lstats, and it's not the end of the world if we get a false\n// positive.\n// Note that on windows, we always drop the entire cache whenever a\n// symbolic link is encountered, because 8.3 filenames are impossible\n// to reason about, and collisions are hazards rather than just failures.\nconst cacheKeyNormalize = path => normalize(stripSlash(normPath(path)))\n  .toLowerCase()\n\nconst pruneCache = (cache, abs) => {\n  abs = cacheKeyNormalize(abs)\n  for (const path of cache.keys()) {\n    const pnorm = cacheKeyNormalize(path)\n    if (pnorm === abs || pnorm.indexOf(abs + '/') === 0)\n      cache.delete(path)\n  }\n}\n\nconst dropCache = cache => {\n  for (const key of cache.keys())\n    cache.delete(key)\n}\n\nclass Unpack extends Parser {\n  constructor (opt) {\n    if (!opt)\n      opt = {}\n\n    opt.ondone = _ => {\n      this[ENDED] = true\n      this[MAYBECLOSE]()\n    }\n\n    super(opt)\n\n    this[CHECKED_CWD] = false\n\n    this.reservations = pathReservations()\n\n    this.transform = typeof opt.transform === 'function' ? opt.transform : null\n\n    this.writable = true\n    this.readable = false\n\n    this[PENDING] = 0\n    this[ENDED] = false\n\n    this.dirCache = opt.dirCache || new Map()\n\n    if (typeof opt.uid === 'number' || typeof opt.gid === 'number') {\n      // need both or neither\n      if (typeof opt.uid !== 'number' || typeof opt.gid !== 'number')\n        throw new TypeError('cannot set owner without number uid and gid')\n      if (opt.preserveOwner) {\n        throw new TypeError(\n          'cannot preserve owner in archive and also set owner explicitly')\n      }\n      this.uid = opt.uid\n      this.gid = opt.gid\n      this.setOwner = true\n    } else {\n      this.uid = null\n      this.gid = null\n      this.setOwner = false\n    }\n\n    // default true for root\n    if (opt.preserveOwner === undefined && typeof opt.uid !== 'number')\n      this.preserveOwner = process.getuid && process.getuid() === 0\n    else\n      this.preserveOwner = !!opt.preserveOwner\n\n    this.processUid = (this.preserveOwner || this.setOwner) && process.getuid ?\n      process.getuid() : null\n    this.processGid = (this.preserveOwner || this.setOwner) && process.getgid ?\n      process.getgid() : null\n\n    // mostly just for testing, but useful in some cases.\n    // Forcibly trigger a chown on every entry, no matter what\n    this.forceChown = opt.forceChown === true\n\n    // turn ><?| in filenames into 0xf000-higher encoded forms\n    this.win32 = !!opt.win32 || isWindows\n\n    // do not unpack over files that are newer than what's in the archive\n    this.newer = !!opt.newer\n\n    // do not unpack over ANY files\n    this.keep = !!opt.keep\n\n    // do not set mtime/atime of extracted entries\n    this.noMtime = !!opt.noMtime\n\n    // allow .., absolute path entries, and unpacking through symlinks\n    // without this, warn and skip .., relativize absolutes, and error\n    // on symlinks in extraction path\n    this.preservePaths = !!opt.preservePaths\n\n    // unlink files and links before writing. This breaks existing hard\n    // links, and removes symlink directories rather than erroring\n    this.unlink = !!opt.unlink\n\n    this.cwd = normPath(path.resolve(opt.cwd || process.cwd()))\n    this.strip = +opt.strip || 0\n    // if we're not chmodding, then we don't need the process umask\n    this.processUmask = opt.noChmod ? 0 : process.umask()\n    this.umask = typeof opt.umask === 'number' ? opt.umask : this.processUmask\n\n    // default mode for dirs created as parents\n    this.dmode = opt.dmode || (0o0777 & (~this.umask))\n    this.fmode = opt.fmode || (0o0666 & (~this.umask))\n\n    this.on('entry', entry => this[ONENTRY](entry))\n  }\n\n  // a bad or damaged archive is a warning for Parser, but an error\n  // when extracting.  Mark those errors as unrecoverable, because\n  // the Unpack contract cannot be met.\n  warn (code, msg, data = {}) {\n    if (code === 'TAR_BAD_ARCHIVE' || code === 'TAR_ABORT')\n      data.recoverable = false\n    return super.warn(code, msg, data)\n  }\n\n  [MAYBECLOSE] () {\n    if (this[ENDED] && this[PENDING] === 0) {\n      this.emit('prefinish')\n      this.emit('finish')\n      this.emit('end')\n      this.emit('close')\n    }\n  }\n\n  [CHECKPATH] (entry) {\n    if (this.strip) {\n      const parts = normPath(entry.path).split('/')\n      if (parts.length < this.strip)\n        return false\n      entry.path = parts.slice(this.strip).join('/')\n\n      if (entry.type === 'Link') {\n        const linkparts = normPath(entry.linkpath).split('/')\n        if (linkparts.length >= this.strip)\n          entry.linkpath = linkparts.slice(this.strip).join('/')\n        else\n          return false\n      }\n    }\n\n    if (!this.preservePaths) {\n      const p = normPath(entry.path)\n      const parts = p.split('/')\n      if (parts.includes('..') || isWindows && /^[a-z]:\\.\\.$/i.test(parts[0])) {\n        this.warn('TAR_ENTRY_ERROR', `path contains '..'`, {\n          entry,\n          path: p,\n        })\n        return false\n      }\n\n      // strip off the root\n      const [root, stripped] = stripAbsolutePath(p)\n      if (root) {\n        entry.path = stripped\n        this.warn('TAR_ENTRY_INFO', `stripping ${root} from absolute path`, {\n          entry,\n          path: p,\n        })\n      }\n    }\n\n    if (path.isAbsolute(entry.path))\n      entry.absolute = normPath(path.resolve(entry.path))\n    else\n      entry.absolute = normPath(path.resolve(this.cwd, entry.path))\n\n    // if we somehow ended up with a path that escapes the cwd, and we are\n    // not in preservePaths mode, then something is fishy!  This should have\n    // been prevented above, so ignore this for coverage.\n    /* istanbul ignore if - defense in depth */\n    if (!this.preservePaths &&\n        entry.absolute.indexOf(this.cwd + '/') !== 0 &&\n        entry.absolute !== this.cwd) {\n      this.warn('TAR_ENTRY_ERROR', 'path escaped extraction target', {\n        entry,\n        path: normPath(entry.path),\n        resolvedPath: entry.absolute,\n        cwd: this.cwd,\n      })\n      return false\n    }\n\n    // an archive can set properties on the extraction directory, but it\n    // may not replace the cwd with a different kind of thing entirely.\n    if (entry.absolute === this.cwd &&\n        entry.type !== 'Directory' &&\n        entry.type !== 'GNUDumpDir')\n      return false\n\n    // only encode : chars that aren't drive letter indicators\n    if (this.win32) {\n      const { root: aRoot } = path.win32.parse(entry.absolute)\n      entry.absolute = aRoot + wc.encode(entry.absolute.substr(aRoot.length))\n      const { root: pRoot } = path.win32.parse(entry.path)\n      entry.path = pRoot + wc.encode(entry.path.substr(pRoot.length))\n    }\n\n    return true\n  }\n\n  [ONENTRY] (entry) {\n    if (!this[CHECKPATH](entry))\n      return entry.resume()\n\n    assert.equal(typeof entry.absolute, 'string')\n\n    switch (entry.type) {\n      case 'Directory':\n      case 'GNUDumpDir':\n        if (entry.mode)\n          entry.mode = entry.mode | 0o700\n\n      case 'File':\n      case 'OldFile':\n      case 'ContiguousFile':\n      case 'Link':\n      case 'SymbolicLink':\n        return this[CHECKFS](entry)\n\n      case 'CharacterDevice':\n      case 'BlockDevice':\n      case 'FIFO':\n      default:\n        return this[UNSUPPORTED](entry)\n    }\n  }\n\n  [ONERROR] (er, entry) {\n    // Cwd has to exist, or else nothing works. That's serious.\n    // Other errors are warnings, which raise the error in strict\n    // mode, but otherwise continue on.\n    if (er.name === 'CwdError')\n      this.emit('error', er)\n    else {\n      this.warn('TAR_ENTRY_ERROR', er, {entry})\n      this[UNPEND]()\n      entry.resume()\n    }\n  }\n\n  [MKDIR] (dir, mode, cb) {\n    mkdir(normPath(dir), {\n      uid: this.uid,\n      gid: this.gid,\n      processUid: this.processUid,\n      processGid: this.processGid,\n      umask: this.processUmask,\n      preserve: this.preservePaths,\n      unlink: this.unlink,\n      cache: this.dirCache,\n      cwd: this.cwd,\n      mode: mode,\n      noChmod: this.noChmod,\n    }, cb)\n  }\n\n  [DOCHOWN] (entry) {\n    // in preserve owner mode, chown if the entry doesn't match process\n    // in set owner mode, chown if setting doesn't match process\n    return this.forceChown ||\n      this.preserveOwner &&\n      (typeof entry.uid === 'number' && entry.uid !== this.processUid ||\n        typeof entry.gid === 'number' && entry.gid !== this.processGid)\n      ||\n      (typeof this.uid === 'number' && this.uid !== this.processUid ||\n        typeof this.gid === 'number' && this.gid !== this.processGid)\n  }\n\n  [UID] (entry) {\n    return uint32(this.uid, entry.uid, this.processUid)\n  }\n\n  [GID] (entry) {\n    return uint32(this.gid, entry.gid, this.processGid)\n  }\n\n  [FILE] (entry, fullyDone) {\n    const mode = entry.mode & 0o7777 || this.fmode\n    const stream = new fsm.WriteStream(entry.absolute, {\n      flags: getFlag(entry.size),\n      mode: mode,\n      autoClose: false,\n    })\n    stream.on('error', er => {\n      if (stream.fd)\n        fs.close(stream.fd, () => {})\n\n      // flush all the data out so that we aren't left hanging\n      // if the error wasn't actually fatal.  otherwise the parse\n      // is blocked, and we never proceed.\n      stream.write = () => true\n      this[ONERROR](er, entry)\n      fullyDone()\n    })\n\n    let actions = 1\n    const done = er => {\n      if (er) {\n        /* istanbul ignore else - we should always have a fd by now */\n        if (stream.fd)\n          fs.close(stream.fd, () => {})\n\n        this[ONERROR](er, entry)\n        fullyDone()\n        return\n      }\n\n      if (--actions === 0) {\n        fs.close(stream.fd, er => {\n          if (er)\n            this[ONERROR](er, entry)\n          else\n            this[UNPEND]()\n          fullyDone()\n        })\n      }\n    }\n\n    stream.on('finish', _ => {\n      // if futimes fails, try utimes\n      // if utimes fails, fail with the original error\n      // same for fchown/chown\n      const abs = entry.absolute\n      const fd = stream.fd\n\n      if (entry.mtime && !this.noMtime) {\n        actions++\n        const atime = entry.atime || new Date()\n        const mtime = entry.mtime\n        fs.futimes(fd, atime, mtime, er =>\n          er ? fs.utimes(abs, atime, mtime, er2 => done(er2 && er))\n          : done())\n      }\n\n      if (this[DOCHOWN](entry)) {\n        actions++\n        const uid = this[UID](entry)\n        const gid = this[GID](entry)\n        fs.fchown(fd, uid, gid, er =>\n          er ? fs.chown(abs, uid, gid, er2 => done(er2 && er))\n          : done())\n      }\n\n      done()\n    })\n\n    const tx = this.transform ? this.transform(entry) || entry : entry\n    if (tx !== entry) {\n      tx.on('error', er => {\n        this[ONERROR](er, entry)\n        fullyDone()\n      })\n      entry.pipe(tx)\n    }\n    tx.pipe(stream)\n  }\n\n  [DIRECTORY] (entry, fullyDone) {\n    const mode = entry.mode & 0o7777 || this.dmode\n    this[MKDIR](entry.absolute, mode, er => {\n      if (er) {\n        this[ONERROR](er, entry)\n        fullyDone()\n        return\n      }\n\n      let actions = 1\n      const done = _ => {\n        if (--actions === 0) {\n          fullyDone()\n          this[UNPEND]()\n          entry.resume()\n        }\n      }\n\n      if (entry.mtime && !this.noMtime) {\n        actions++\n        fs.utimes(entry.absolute, entry.atime || new Date(), entry.mtime, done)\n      }\n\n      if (this[DOCHOWN](entry)) {\n        actions++\n        fs.chown(entry.absolute, this[UID](entry), this[GID](entry), done)\n      }\n\n      done()\n    })\n  }\n\n  [UNSUPPORTED] (entry) {\n    entry.unsupported = true\n    this.warn('TAR_ENTRY_UNSUPPORTED',\n      `unsupported entry type: ${entry.type}`, {entry})\n    entry.resume()\n  }\n\n  [SYMLINK] (entry, done) {\n    this[LINK](entry, entry.linkpath, 'symlink', done)\n  }\n\n  [HARDLINK] (entry, done) {\n    const linkpath = normPath(path.resolve(this.cwd, entry.linkpath))\n    this[LINK](entry, linkpath, 'link', done)\n  }\n\n  [PEND] () {\n    this[PENDING]++\n  }\n\n  [UNPEND] () {\n    this[PENDING]--\n    this[MAYBECLOSE]()\n  }\n\n  [SKIP] (entry) {\n    this[UNPEND]()\n    entry.resume()\n  }\n\n  // Check if we can reuse an existing filesystem entry safely and\n  // overwrite it, rather than unlinking and recreating\n  // Windows doesn't report a useful nlink, so we just never reuse entries\n  [ISREUSABLE] (entry, st) {\n    return entry.type === 'File' &&\n      !this.unlink &&\n      st.isFile() &&\n      st.nlink <= 1 &&\n      !isWindows\n  }\n\n  // check if a thing is there, and if so, try to clobber it\n  [CHECKFS] (entry) {\n    this[PEND]()\n    const paths = [entry.path]\n    if (entry.linkpath)\n      paths.push(entry.linkpath)\n    this.reservations.reserve(paths, done => this[CHECKFS2](entry, done))\n  }\n\n  [PRUNECACHE] (entry) {\n    // if we are not creating a directory, and the path is in the dirCache,\n    // then that means we are about to delete the directory we created\n    // previously, and it is no longer going to be a directory, and neither\n    // is any of its children.\n    // If a symbolic link is encountered, all bets are off.  There is no\n    // reasonable way to sanitize the cache in such a way we will be able to\n    // avoid having filesystem collisions.  If this happens with a non-symlink\n    // entry, it'll just fail to unpack, but a symlink to a directory, using an\n    // 8.3 shortname or certain unicode attacks, can evade detection and lead\n    // to arbitrary writes to anywhere on the system.\n    if (entry.type === 'SymbolicLink')\n      dropCache(this.dirCache)\n    else if (entry.type !== 'Directory')\n      pruneCache(this.dirCache, entry.absolute)\n  }\n\n  [CHECKFS2] (entry, fullyDone) {\n    this[PRUNECACHE](entry)\n\n    const done = er => {\n      this[PRUNECACHE](entry)\n      fullyDone(er)\n    }\n\n    const checkCwd = () => {\n      this[MKDIR](this.cwd, this.dmode, er => {\n        if (er) {\n          this[ONERROR](er, entry)\n          done()\n          return\n        }\n        this[CHECKED_CWD] = true\n        start()\n      })\n    }\n\n    const start = () => {\n      if (entry.absolute !== this.cwd) {\n        const parent = normPath(path.dirname(entry.absolute))\n        if (parent !== this.cwd) {\n          return this[MKDIR](parent, this.dmode, er => {\n            if (er) {\n              this[ONERROR](er, entry)\n              done()\n              return\n            }\n            afterMakeParent()\n          })\n        }\n      }\n      afterMakeParent()\n    }\n\n    const afterMakeParent = () => {\n      fs.lstat(entry.absolute, (lstatEr, st) => {\n        if (st && (this.keep || this.newer && st.mtime > entry.mtime)) {\n          this[SKIP](entry)\n          done()\n          return\n        }\n        if (lstatEr || this[ISREUSABLE](entry, st))\n          return this[MAKEFS](null, entry, done)\n\n        if (st.isDirectory()) {\n          if (entry.type === 'Directory') {\n            const needChmod = !this.noChmod &&\n              entry.mode &&\n              (st.mode & 0o7777) !== entry.mode\n            const afterChmod = er => this[MAKEFS](er, entry, done)\n            if (!needChmod)\n              return afterChmod()\n            return fs.chmod(entry.absolute, entry.mode, afterChmod)\n          }\n          // Not a dir entry, have to remove it.\n          // NB: the only way to end up with an entry that is the cwd\n          // itself, in such a way that == does not detect, is a\n          // tricky windows absolute path with UNC or 8.3 parts (and\n          // preservePaths:true, or else it will have been stripped).\n          // In that case, the user has opted out of path protections\n          // explicitly, so if they blow away the cwd, c'est la vie.\n          if (entry.absolute !== this.cwd) {\n            return fs.rmdir(entry.absolute, er =>\n              this[MAKEFS](er, entry, done))\n          }\n        }\n\n        // not a dir, and not reusable\n        // don't remove if the cwd, we want that error\n        if (entry.absolute === this.cwd)\n          return this[MAKEFS](null, entry, done)\n\n        unlinkFile(entry.absolute, er =>\n          this[MAKEFS](er, entry, done))\n      })\n    }\n\n    if (this[CHECKED_CWD])\n      start()\n    else\n      checkCwd()\n  }\n\n  [MAKEFS] (er, entry, done) {\n    if (er) {\n      this[ONERROR](er, entry)\n      done()\n      return\n    }\n\n    switch (entry.type) {\n      case 'File':\n      case 'OldFile':\n      case 'ContiguousFile':\n        return this[FILE](entry, done)\n\n      case 'Link':\n        return this[HARDLINK](entry, done)\n\n      case 'SymbolicLink':\n        return this[SYMLINK](entry, done)\n\n      case 'Directory':\n      case 'GNUDumpDir':\n        return this[DIRECTORY](entry, done)\n    }\n  }\n\n  [LINK] (entry, linkpath, link, done) {\n    // XXX: get the type ('symlink' or 'junction') for windows\n    fs[link](linkpath, entry.absolute, er => {\n      if (er)\n        this[ONERROR](er, entry)\n      else {\n        this[UNPEND]()\n        entry.resume()\n      }\n      done()\n    })\n  }\n}\n\nconst callSync = fn => {\n  try {\n    return [null, fn()]\n  } catch (er) {\n    return [er, null]\n  }\n}\nclass UnpackSync extends Unpack {\n  [MAKEFS] (er, entry) {\n    return super[MAKEFS](er, entry, () => {})\n  }\n\n  [CHECKFS] (entry) {\n    this[PRUNECACHE](entry)\n\n    if (!this[CHECKED_CWD]) {\n      const er = this[MKDIR](this.cwd, this.dmode)\n      if (er)\n        return this[ONERROR](er, entry)\n      this[CHECKED_CWD] = true\n    }\n\n    // don't bother to make the parent if the current entry is the cwd,\n    // we've already checked it.\n    if (entry.absolute !== this.cwd) {\n      const parent = normPath(path.dirname(entry.absolute))\n      if (parent !== this.cwd) {\n        const mkParent = this[MKDIR](parent, this.dmode)\n        if (mkParent)\n          return this[ONERROR](mkParent, entry)\n      }\n    }\n\n    const [lstatEr, st] = callSync(() => fs.lstatSync(entry.absolute))\n    if (st && (this.keep || this.newer && st.mtime > entry.mtime))\n      return this[SKIP](entry)\n\n    if (lstatEr || this[ISREUSABLE](entry, st))\n      return this[MAKEFS](null, entry)\n\n    if (st.isDirectory()) {\n      if (entry.type === 'Directory') {\n        const needChmod = !this.noChmod &&\n          entry.mode &&\n          (st.mode & 0o7777) !== entry.mode\n        const [er] = needChmod ? callSync(() => {\n          fs.chmodSync(entry.absolute, entry.mode)\n        }) : []\n        return this[MAKEFS](er, entry)\n      }\n      // not a dir entry, have to remove it\n      const [er] = callSync(() => fs.rmdirSync(entry.absolute))\n      this[MAKEFS](er, entry)\n    }\n\n    // not a dir, and not reusable.\n    // don't remove if it's the cwd, since we want that error.\n    const [er] = entry.absolute === this.cwd ? []\n      : callSync(() => unlinkFileSync(entry.absolute))\n    this[MAKEFS](er, entry)\n  }\n\n  [FILE] (entry, done) {\n    const mode = entry.mode & 0o7777 || this.fmode\n\n    const oner = er => {\n      let closeError\n      try {\n        fs.closeSync(fd)\n      } catch (e) {\n        closeError = e\n      }\n      if (er || closeError)\n        this[ONERROR](er || closeError, entry)\n      done()\n    }\n\n    let fd\n    try {\n      fd = fs.openSync(entry.absolute, getFlag(entry.size), mode)\n    } catch (er) {\n      return oner(er)\n    }\n    const tx = this.transform ? this.transform(entry) || entry : entry\n    if (tx !== entry) {\n      tx.on('error', er => this[ONERROR](er, entry))\n      entry.pipe(tx)\n    }\n\n    tx.on('data', chunk => {\n      try {\n        fs.writeSync(fd, chunk, 0, chunk.length)\n      } catch (er) {\n        oner(er)\n      }\n    })\n\n    tx.on('end', _ => {\n      let er = null\n      // try both, falling futimes back to utimes\n      // if either fails, handle the first error\n      if (entry.mtime && !this.noMtime) {\n        const atime = entry.atime || new Date()\n        const mtime = entry.mtime\n        try {\n          fs.futimesSync(fd, atime, mtime)\n        } catch (futimeser) {\n          try {\n            fs.utimesSync(entry.absolute, atime, mtime)\n          } catch (utimeser) {\n            er = futimeser\n          }\n        }\n      }\n\n      if (this[DOCHOWN](entry)) {\n        const uid = this[UID](entry)\n        const gid = this[GID](entry)\n\n        try {\n          fs.fchownSync(fd, uid, gid)\n        } catch (fchowner) {\n          try {\n            fs.chownSync(entry.absolute, uid, gid)\n          } catch (chowner) {\n            er = er || fchowner\n          }\n        }\n      }\n\n      oner(er)\n    })\n  }\n\n  [DIRECTORY] (entry, done) {\n    const mode = entry.mode & 0o7777 || this.dmode\n    const er = this[MKDIR](entry.absolute, mode)\n    if (er) {\n      this[ONERROR](er, entry)\n      done()\n      return\n    }\n    if (entry.mtime && !this.noMtime) {\n      try {\n        fs.utimesSync(entry.absolute, entry.atime || new Date(), entry.mtime)\n      } catch (er) {}\n    }\n    if (this[DOCHOWN](entry)) {\n      try {\n        fs.chownSync(entry.absolute, this[UID](entry), this[GID](entry))\n      } catch (er) {}\n    }\n    done()\n    entry.resume()\n  }\n\n  [MKDIR] (dir, mode) {\n    try {\n      return mkdir.sync(normPath(dir), {\n        uid: this.uid,\n        gid: this.gid,\n        processUid: this.processUid,\n        processGid: this.processGid,\n        umask: this.processUmask,\n        preserve: this.preservePaths,\n        unlink: this.unlink,\n        cache: this.dirCache,\n        cwd: this.cwd,\n        mode: mode,\n      })\n    } catch (er) {\n      return er\n    }\n  }\n\n  [LINK] (entry, linkpath, link, done) {\n    try {\n      fs[link + 'Sync'](linkpath, entry.absolute)\n      done()\n      entry.resume()\n    } catch (er) {\n      return this[ONERROR](er, entry)\n    }\n  }\n}\n\nUnpack.Sync = UnpackSync\nmodule.exports = Unpack\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}