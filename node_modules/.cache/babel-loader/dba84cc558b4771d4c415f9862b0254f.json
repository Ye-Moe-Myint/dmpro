{"ast":null,"code":"var crypto = require('crypto');\nvar LocalStrategy = require('passport-local').Strategy;\nvar pbkdf2 = require('./lib/pbkdf2');\nvar errors = require('./lib/errors');\nvar authenticate = require('./lib/authenticate');\nmodule.exports = function (schema, options) {\n  options = options || {};\n  options.saltlen = options.saltlen || 32;\n  options.iterations = options.iterations || 25000;\n  options.keylen = options.keylen || 512;\n  options.encoding = options.encoding || 'hex';\n  options.digestAlgorithm = options.digestAlgorithm || 'sha256'; // To get a list of supported hashes use crypto.getHashes()\n\n  function defaultPasswordValidator(password, cb) {\n    cb(null);\n  }\n  function defaultPasswordValidatorAsync(password) {\n    return new Promise(function (resolve, reject) {\n      options.passwordValidator(password, function (err) {\n        return err ? reject(err) : resolve();\n      });\n    });\n  }\n  options.passwordValidator = options.passwordValidator || defaultPasswordValidator;\n  options.passwordValidatorAsync = options.passwordValidatorAsync || defaultPasswordValidatorAsync;\n\n  // Populate field names with defaults if not set\n  options.usernameField = options.usernameField || 'username';\n  options.usernameUnique = options.usernameUnique === undefined ? true : options.usernameUnique;\n\n  // Populate username query fields with defaults if not set,\n  // otherwise add username field to query fields.\n  if (options.usernameQueryFields) {\n    options.usernameQueryFields.push(options.usernameField);\n  } else {\n    options.usernameQueryFields = [options.usernameField];\n  }\n\n  // option to find username case insensitively\n  options.usernameCaseInsensitive = Boolean(options.usernameCaseInsensitive || false);\n\n  // option to convert username to lowercase when finding\n  options.usernameLowerCase = options.usernameLowerCase || false;\n  options.hashField = options.hashField || 'hash';\n  options.saltField = options.saltField || 'salt';\n  if (options.limitAttempts) {\n    options.lastLoginField = options.lastLoginField || 'last';\n    options.attemptsField = options.attemptsField || 'attempts';\n    options.interval = options.interval || 100; // 100 ms\n    options.maxInterval = options.maxInterval || 300000; // 5 min\n    options.maxAttempts = options.maxAttempts || Infinity;\n  }\n  options.findByUsername = options.findByUsername || function (model, queryParameters) {\n    return model.findOne(queryParameters);\n  };\n  options.errorMessages = options.errorMessages || {};\n  options.errorMessages.MissingPasswordError = options.errorMessages.MissingPasswordError || 'No password was given';\n  options.errorMessages.AttemptTooSoonError = options.errorMessages.AttemptTooSoonError || 'Account is currently locked. Try again later';\n  options.errorMessages.TooManyAttemptsError = options.errorMessages.TooManyAttemptsError || 'Account locked due to too many failed login attempts';\n  options.errorMessages.NoSaltValueStoredError = options.errorMessages.NoSaltValueStoredError || 'Authentication not possible. No salt value stored';\n  options.errorMessages.IncorrectPasswordError = options.errorMessages.IncorrectPasswordError || 'Password or username is incorrect';\n  options.errorMessages.IncorrectUsernameError = options.errorMessages.IncorrectUsernameError || 'Password or username is incorrect';\n  options.errorMessages.MissingUsernameError = options.errorMessages.MissingUsernameError || 'No username was given';\n  options.errorMessages.UserExistsError = options.errorMessages.UserExistsError || 'A user with the given username is already registered';\n  var schemaFields = {};\n  if (!schema.path(options.usernameField)) {\n    schemaFields[options.usernameField] = {\n      type: String,\n      unique: options.usernameUnique\n    };\n  }\n  schemaFields[options.hashField] = {\n    type: String,\n    select: false\n  };\n  schemaFields[options.saltField] = {\n    type: String,\n    select: false\n  };\n  if (options.limitAttempts) {\n    schemaFields[options.attemptsField] = {\n      type: Number,\n      default: 0\n    };\n    schemaFields[options.lastLoginField] = {\n      type: Date,\n      default: Date.now\n    };\n  }\n  schema.add(schemaFields);\n  schema.pre('save', function (next) {\n    if (options.usernameLowerCase && this[options.usernameField]) {\n      this[options.usernameField] = this[options.usernameField].toLowerCase();\n    }\n    next();\n  });\n  schema.methods.setPassword = function (password, cb) {\n    var _this = this;\n    var promise = Promise.resolve().then(function () {\n      if (!password) {\n        throw new errors.MissingPasswordError(options.errorMessages.MissingPasswordError);\n      }\n    }).then(function () {\n      return options.passwordValidatorAsync(password);\n    }).then(function () {\n      return randomBytes(options.saltlen);\n    }).then(function (saltBuffer) {\n      return saltBuffer.toString(options.encoding);\n    }).then(function (salt) {\n      _this.set(options.saltField, salt);\n      return salt;\n    }).then(function (salt) {\n      return pbkdf2Promisified(password, salt, options);\n    }).then(function (hashRaw) {\n      _this.set(options.hashField, Buffer.from(hashRaw, 'binary').toString(options.encoding));\n    }).then(function () {\n      return _this;\n    });\n    if (!cb) {\n      return promise;\n    }\n    promise.then(function (result) {\n      return cb(null, result);\n    }).catch(function (err) {\n      return cb(err);\n    });\n  };\n  schema.methods.changePassword = function (oldPassword, newPassword, cb) {\n    var _this2 = this;\n    var promise = Promise.resolve().then(function () {\n      if (!oldPassword || !newPassword) {\n        throw new errors.MissingPasswordError(options.errorMessages.MissingPasswordError);\n      }\n    }).then(function () {\n      return _this2.authenticate(oldPassword);\n    }).then(function (_ref) {\n      var user = _ref.user,\n        error = _ref.error;\n      if (!user) {\n        throw error;\n      }\n    }).then(function () {\n      return _this2.setPassword(newPassword);\n    }).then(function () {\n      return _this2.save();\n    }).then(function () {\n      return _this2;\n    });\n    if (!cb) {\n      return promise;\n    }\n    promise.then(function (result) {\n      return cb(null, result);\n    }).catch(function (err) {\n      return cb(err);\n    });\n  };\n  schema.methods.authenticate = function (password, cb) {\n    var _this3 = this;\n    var promise = Promise.resolve().then(function () {\n      if (_this3.get(options.saltField)) {\n        return authenticate(_this3, password, options);\n      }\n      return _this3.constructor.findByUsername(_this3.get(options.usernameField), true).then(function (user) {\n        if (user) {\n          return authenticate(user, password, options);\n        }\n        return {\n          user: false,\n          error: new errors.IncorrectUsernameError(options.errorMessages.IncorrectUsernameError)\n        };\n      });\n    });\n    if (!cb) {\n      return promise;\n    }\n    promise.then(function (_ref2) {\n      var user = _ref2.user,\n        error = _ref2.error;\n      return cb(null, user, error);\n    }).catch(function (err) {\n      return cb(err);\n    });\n  };\n  if (options.limitAttempts) {\n    schema.methods.resetAttempts = function (cb) {\n      var _this4 = this;\n      var promise = Promise.resolve().then(function () {\n        _this4.set(options.attemptsField, 0);\n        return _this4.save();\n      });\n      if (!cb) {\n        return promise;\n      }\n      promise.then(function (result) {\n        return cb(null, result);\n      }).catch(function (err) {\n        return cb(err);\n      });\n    };\n  }\n\n  // Passport Local Interface\n  schema.statics.authenticate = function () {\n    var _this5 = this;\n    return function (username, password, cb) {\n      var promise = Promise.resolve().then(function () {\n        return _this5.findByUsername(username, true);\n      }).then(function (user) {\n        if (user) {\n          return user.authenticate(password);\n        }\n        return {\n          user: false,\n          error: new errors.IncorrectUsernameError(options.errorMessages.IncorrectUsernameError)\n        };\n      });\n      if (!cb) {\n        return promise;\n      }\n      promise.then(function (_ref3) {\n        var user = _ref3.user,\n          error = _ref3.error;\n        return cb(null, user, error);\n      }).catch(function (err) {\n        return cb(err);\n      });\n    };\n  };\n\n  // Passport Interface\n  schema.statics.serializeUser = function () {\n    return function (user, cb) {\n      cb(null, user.get(options.usernameField));\n    };\n  };\n  schema.statics.deserializeUser = function () {\n    var _this6 = this;\n    return function (username, cb) {\n      _this6.findByUsername(username, cb);\n    };\n  };\n  schema.statics.register = function (user, password, cb) {\n    var _this7 = this;\n    // Create an instance of this in case user isn't already an instance\n    if (!(user instanceof this)) {\n      user = new this(user);\n    }\n    var promise = Promise.resolve().then(function () {\n      if (!user.get(options.usernameField)) {\n        throw new errors.MissingUsernameError(options.errorMessages.MissingUsernameError);\n      }\n    }).then(function () {\n      return _this7.findByUsername(user.get(options.usernameField));\n    }).then(function (existingUser) {\n      if (existingUser) {\n        throw new errors.UserExistsError(options.errorMessages.UserExistsError);\n      }\n    }).then(function () {\n      return user.setPassword(password);\n    }).then(function () {\n      return user.save();\n    });\n    if (!cb) {\n      return promise;\n    }\n    promise.then(function (result) {\n      return cb(null, result);\n    }).catch(function (err) {\n      return cb(err);\n    });\n  };\n  schema.statics.findByUsername = function (username, opts, cb) {\n    if (typeof opts === 'function') {\n      cb = opts;\n      opts = {};\n    }\n    if (typeof opts == 'boolean') {\n      opts = {\n        selectHashSaltFields: opts\n      };\n    }\n    opts = opts || {};\n    opts.selectHashSaltFields = !!opts.selectHashSaltFields;\n\n    // if specified, convert the username to lowercase\n    if (username !== undefined && options.usernameLowerCase) {\n      username = username.toLowerCase();\n    }\n\n    // escape regex tokens\n    if (username !== undefined && options.usernameCaseInsensitive) {\n      username = username.replace(/[!#$()*+\\-./:<=>?[\\\\\\]^{|}]/g, '\\\\$&');\n    }\n\n    // Add each username query field\n    var queryOrParameters = [];\n    for (var i = 0; i < options.usernameQueryFields.length; i++) {\n      var parameter = {};\n      parameter[options.usernameQueryFields[i]] = options.usernameCaseInsensitive ? new RegExp(\"^\".concat(username, \"$\"), 'i') : username;\n      queryOrParameters.push(parameter);\n    }\n    var query = options.findByUsername(this, {\n      $or: queryOrParameters\n    });\n    if (opts.selectHashSaltFields) {\n      query.select('+' + options.hashField + ' +' + options.saltField);\n    }\n    if (options.selectFields) {\n      query.select(options.selectFields);\n    }\n    if (options.populateFields) {\n      query.populate(options.populateFields);\n    }\n    if (cb) {\n      query.exec(cb);\n      return;\n    }\n    return query;\n  };\n  schema.statics.createStrategy = function () {\n    return new LocalStrategy(options, this.authenticate());\n  };\n};\nfunction pbkdf2Promisified(password, salt, options) {\n  return new Promise(function (resolve, reject) {\n    return pbkdf2(password, salt, options, function (err, hashRaw) {\n      return err ? reject(err) : resolve(hashRaw);\n    });\n  });\n}\nfunction randomBytes(saltlen) {\n  return new Promise(function (resolve, reject) {\n    return crypto.randomBytes(saltlen, function (err, saltBuffer) {\n      return err ? reject(err) : resolve(saltBuffer);\n    });\n  });\n}\nmodule.exports.errors = errors;","map":{"version":3,"names":["crypto","require","LocalStrategy","Strategy","pbkdf2","errors","authenticate","module","exports","schema","options","saltlen","iterations","keylen","encoding","digestAlgorithm","defaultPasswordValidator","password","cb","defaultPasswordValidatorAsync","Promise","resolve","reject","passwordValidator","err","passwordValidatorAsync","usernameField","usernameUnique","undefined","usernameQueryFields","push","usernameCaseInsensitive","Boolean","usernameLowerCase","hashField","saltField","limitAttempts","lastLoginField","attemptsField","interval","maxInterval","maxAttempts","Infinity","findByUsername","model","queryParameters","findOne","errorMessages","MissingPasswordError","AttemptTooSoonError","TooManyAttemptsError","NoSaltValueStoredError","IncorrectPasswordError","IncorrectUsernameError","MissingUsernameError","UserExistsError","schemaFields","path","type","String","unique","select","Number","default","Date","now","add","pre","next","toLowerCase","methods","setPassword","promise","then","randomBytes","saltBuffer","toString","salt","set","pbkdf2Promisified","hashRaw","Buffer","from","result","catch","changePassword","oldPassword","newPassword","user","error","save","get","constructor","resetAttempts","statics","username","serializeUser","deserializeUser","register","existingUser","opts","selectHashSaltFields","replace","queryOrParameters","i","length","parameter","RegExp","query","$or","selectFields","populateFields","populate","exec","createStrategy"],"sources":["/Users/lieo/diabetes/CUT2DMTest/node_modules/passport-local-mongoose/index.js"],"sourcesContent":["const crypto = require('crypto');\nconst LocalStrategy = require('passport-local').Strategy;\n\nconst pbkdf2 = require('./lib/pbkdf2');\nconst errors = require('./lib/errors');\nconst authenticate = require('./lib/authenticate');\n\nmodule.exports = function (schema, options) {\n  options = options || {};\n  options.saltlen = options.saltlen || 32;\n  options.iterations = options.iterations || 25000;\n  options.keylen = options.keylen || 512;\n  options.encoding = options.encoding || 'hex';\n  options.digestAlgorithm = options.digestAlgorithm || 'sha256'; // To get a list of supported hashes use crypto.getHashes()\n\n  function defaultPasswordValidator(password, cb) {\n    cb(null);\n  }\n\n  function defaultPasswordValidatorAsync(password) {\n    return new Promise((resolve, reject) => {\n      options.passwordValidator(password, (err) => (err ? reject(err) : resolve()));\n    });\n  }\n\n  options.passwordValidator = options.passwordValidator || defaultPasswordValidator;\n  options.passwordValidatorAsync = options.passwordValidatorAsync || defaultPasswordValidatorAsync;\n\n  // Populate field names with defaults if not set\n  options.usernameField = options.usernameField || 'username';\n  options.usernameUnique = options.usernameUnique === undefined ? true : options.usernameUnique;\n\n  // Populate username query fields with defaults if not set,\n  // otherwise add username field to query fields.\n  if (options.usernameQueryFields) {\n    options.usernameQueryFields.push(options.usernameField);\n  } else {\n    options.usernameQueryFields = [options.usernameField];\n  }\n\n  // option to find username case insensitively\n  options.usernameCaseInsensitive = Boolean(options.usernameCaseInsensitive || false);\n\n  // option to convert username to lowercase when finding\n  options.usernameLowerCase = options.usernameLowerCase || false;\n\n  options.hashField = options.hashField || 'hash';\n  options.saltField = options.saltField || 'salt';\n\n  if (options.limitAttempts) {\n    options.lastLoginField = options.lastLoginField || 'last';\n    options.attemptsField = options.attemptsField || 'attempts';\n    options.interval = options.interval || 100; // 100 ms\n    options.maxInterval = options.maxInterval || 300000; // 5 min\n    options.maxAttempts = options.maxAttempts || Infinity;\n  }\n\n  options.findByUsername =\n    options.findByUsername ||\n    function (model, queryParameters) {\n      return model.findOne(queryParameters);\n    };\n\n  options.errorMessages = options.errorMessages || {};\n  options.errorMessages.MissingPasswordError = options.errorMessages.MissingPasswordError || 'No password was given';\n  options.errorMessages.AttemptTooSoonError = options.errorMessages.AttemptTooSoonError || 'Account is currently locked. Try again later';\n  options.errorMessages.TooManyAttemptsError =\n    options.errorMessages.TooManyAttemptsError || 'Account locked due to too many failed login attempts';\n  options.errorMessages.NoSaltValueStoredError =\n    options.errorMessages.NoSaltValueStoredError || 'Authentication not possible. No salt value stored';\n  options.errorMessages.IncorrectPasswordError = options.errorMessages.IncorrectPasswordError || 'Password or username is incorrect';\n  options.errorMessages.IncorrectUsernameError = options.errorMessages.IncorrectUsernameError || 'Password or username is incorrect';\n  options.errorMessages.MissingUsernameError = options.errorMessages.MissingUsernameError || 'No username was given';\n  options.errorMessages.UserExistsError = options.errorMessages.UserExistsError || 'A user with the given username is already registered';\n\n  const schemaFields = {};\n\n  if (!schema.path(options.usernameField)) {\n    schemaFields[options.usernameField] = { type: String, unique: options.usernameUnique };\n  }\n  schemaFields[options.hashField] = { type: String, select: false };\n  schemaFields[options.saltField] = { type: String, select: false };\n\n  if (options.limitAttempts) {\n    schemaFields[options.attemptsField] = { type: Number, default: 0 };\n    schemaFields[options.lastLoginField] = { type: Date, default: Date.now };\n  }\n\n  schema.add(schemaFields);\n\n  schema.pre('save', function (next) {\n    if (options.usernameLowerCase && this[options.usernameField]) {\n      this[options.usernameField] = this[options.usernameField].toLowerCase();\n    }\n\n    next();\n  });\n\n  schema.methods.setPassword = function (password, cb) {\n    const promise = Promise.resolve()\n      .then(() => {\n        if (!password) {\n          throw new errors.MissingPasswordError(options.errorMessages.MissingPasswordError);\n        }\n      })\n      .then(() => options.passwordValidatorAsync(password))\n      .then(() => randomBytes(options.saltlen))\n      .then((saltBuffer) => saltBuffer.toString(options.encoding))\n      .then((salt) => {\n        this.set(options.saltField, salt);\n\n        return salt;\n      })\n      .then((salt) => pbkdf2Promisified(password, salt, options))\n      .then((hashRaw) => {\n        this.set(options.hashField, Buffer.from(hashRaw, 'binary').toString(options.encoding));\n      })\n      .then(() => this);\n\n    if (!cb) {\n      return promise;\n    }\n\n    promise.then((result) => cb(null, result)).catch((err) => cb(err));\n  };\n\n  schema.methods.changePassword = function (oldPassword, newPassword, cb) {\n    const promise = Promise.resolve()\n      .then(() => {\n        if (!oldPassword || !newPassword) {\n          throw new errors.MissingPasswordError(options.errorMessages.MissingPasswordError);\n        }\n      })\n      .then(() => this.authenticate(oldPassword))\n      .then(({ user, error }) => {\n        if (!user) {\n          throw error;\n        }\n      })\n      .then(() => this.setPassword(newPassword))\n      .then(() => this.save())\n      .then(() => this);\n\n    if (!cb) {\n      return promise;\n    }\n\n    promise.then((result) => cb(null, result)).catch((err) => cb(err));\n  };\n\n  schema.methods.authenticate = function (password, cb) {\n    const promise = Promise.resolve().then(() => {\n      if (this.get(options.saltField)) {\n        return authenticate(this, password, options);\n      }\n\n      return this.constructor.findByUsername(this.get(options.usernameField), true).then((user) => {\n        if (user) {\n          return authenticate(user, password, options);\n        }\n\n        return { user: false, error: new errors.IncorrectUsernameError(options.errorMessages.IncorrectUsernameError) };\n      });\n    });\n\n    if (!cb) {\n      return promise;\n    }\n\n    promise.then(({ user, error }) => cb(null, user, error)).catch((err) => cb(err));\n  };\n\n  if (options.limitAttempts) {\n    schema.methods.resetAttempts = function (cb) {\n      const promise = Promise.resolve().then(() => {\n        this.set(options.attemptsField, 0);\n        return this.save();\n      });\n\n      if (!cb) {\n        return promise;\n      }\n\n      promise.then((result) => cb(null, result)).catch((err) => cb(err));\n    };\n  }\n\n  // Passport Local Interface\n  schema.statics.authenticate = function () {\n    return (username, password, cb) => {\n      const promise = Promise.resolve()\n        .then(() => this.findByUsername(username, true))\n        .then((user) => {\n          if (user) {\n            return user.authenticate(password);\n          }\n\n          return { user: false, error: new errors.IncorrectUsernameError(options.errorMessages.IncorrectUsernameError) };\n        });\n\n      if (!cb) {\n        return promise;\n      }\n\n      promise.then(({ user, error }) => cb(null, user, error)).catch((err) => cb(err));\n    };\n  };\n\n  // Passport Interface\n  schema.statics.serializeUser = function () {\n    return function (user, cb) {\n      cb(null, user.get(options.usernameField));\n    };\n  };\n\n  schema.statics.deserializeUser = function () {\n    return (username, cb) => {\n      this.findByUsername(username, cb);\n    };\n  };\n\n  schema.statics.register = function (user, password, cb) {\n    // Create an instance of this in case user isn't already an instance\n    if (!(user instanceof this)) {\n      user = new this(user);\n    }\n\n    const promise = Promise.resolve()\n      .then(() => {\n        if (!user.get(options.usernameField)) {\n          throw new errors.MissingUsernameError(options.errorMessages.MissingUsernameError);\n        }\n      })\n      .then(() => this.findByUsername(user.get(options.usernameField)))\n      .then((existingUser) => {\n        if (existingUser) {\n          throw new errors.UserExistsError(options.errorMessages.UserExistsError);\n        }\n      })\n      .then(() => user.setPassword(password))\n      .then(() => user.save());\n\n    if (!cb) {\n      return promise;\n    }\n\n    promise.then((result) => cb(null, result)).catch((err) => cb(err));\n  };\n\n  schema.statics.findByUsername = function (username, opts, cb) {\n    if (typeof opts === 'function') {\n      cb = opts;\n      opts = {};\n    }\n\n    if (typeof opts == 'boolean') {\n      opts = {\n        selectHashSaltFields: opts,\n      };\n    }\n\n    opts = opts || {};\n    opts.selectHashSaltFields = !!opts.selectHashSaltFields;\n\n    // if specified, convert the username to lowercase\n    if (username !== undefined && options.usernameLowerCase) {\n      username = username.toLowerCase();\n    }\n\n    // escape regex tokens\n    if (username !== undefined && options.usernameCaseInsensitive) {\n      username = username.replace(/[!#$()*+\\-./:<=>?[\\\\\\]^{|}]/g, '\\\\$&');\n    }\n\n    // Add each username query field\n    const queryOrParameters = [];\n    for (let i = 0; i < options.usernameQueryFields.length; i++) {\n      const parameter = {};\n      parameter[options.usernameQueryFields[i]] = options.usernameCaseInsensitive ? new RegExp(`^${username}$`, 'i') : username;\n      queryOrParameters.push(parameter);\n    }\n\n    const query = options.findByUsername(this, { $or: queryOrParameters });\n\n    if (opts.selectHashSaltFields) {\n      query.select('+' + options.hashField + ' +' + options.saltField);\n    }\n\n    if (options.selectFields) {\n      query.select(options.selectFields);\n    }\n\n    if (options.populateFields) {\n      query.populate(options.populateFields);\n    }\n\n    if (cb) {\n      query.exec(cb);\n      return;\n    }\n\n    return query;\n  };\n\n  schema.statics.createStrategy = function () {\n    return new LocalStrategy(options, this.authenticate());\n  };\n};\n\nfunction pbkdf2Promisified(password, salt, options) {\n  return new Promise((resolve, reject) => pbkdf2(password, salt, options, (err, hashRaw) => (err ? reject(err) : resolve(hashRaw))));\n}\n\nfunction randomBytes(saltlen) {\n  return new Promise((resolve, reject) => crypto.randomBytes(saltlen, (err, saltBuffer) => (err ? reject(err) : resolve(saltBuffer))));\n}\n\nmodule.exports.errors = errors;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}