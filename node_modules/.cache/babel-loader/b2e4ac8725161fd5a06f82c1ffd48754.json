{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/lieo/diabetes/CUT2DMTest/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/lieo/diabetes/CUT2DMTest/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/Users/lieo/diabetes/CUT2DMTest/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/lieo/diabetes/CUT2DMTest/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/lieo/diabetes/CUT2DMTest/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/lieo/diabetes/CUT2DMTest/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar MiniPass = require('minipass');\nvar normPath = require('./normalize-windows-path.js');\nvar SLURP = Symbol('slurp');\nmodule.exports = /*#__PURE__*/function (_MiniPass) {\n  _inherits(ReadEntry, _MiniPass);\n  var _super = _createSuper(ReadEntry);\n  function ReadEntry(header, ex, gex) {\n    var _this;\n    _classCallCheck(this, ReadEntry);\n    _this = _super.call(this);\n    // read entries always start life paused.  this is to avoid the\n    // situation where Minipass's auto-ending empty streams results\n    // in an entry ending before we're ready for it.\n    _this.pause();\n    _this.extended = ex;\n    _this.globalExtended = gex;\n    _this.header = header;\n    _this.startBlockSize = 512 * Math.ceil(header.size / 512);\n    _this.blockRemain = _this.startBlockSize;\n    _this.remain = header.size;\n    _this.type = header.type;\n    _this.meta = false;\n    _this.ignore = false;\n    switch (_this.type) {\n      case 'File':\n      case 'OldFile':\n      case 'Link':\n      case 'SymbolicLink':\n      case 'CharacterDevice':\n      case 'BlockDevice':\n      case 'Directory':\n      case 'FIFO':\n      case 'ContiguousFile':\n      case 'GNUDumpDir':\n        break;\n      case 'NextFileHasLongLinkpath':\n      case 'NextFileHasLongPath':\n      case 'OldGnuLongPath':\n      case 'GlobalExtendedHeader':\n      case 'ExtendedHeader':\n      case 'OldExtendedHeader':\n        _this.meta = true;\n        break;\n\n      // NOTE: gnutar and bsdtar treat unrecognized types as 'File'\n      // it may be worth doing the same, but with a warning.\n      default:\n        _this.ignore = true;\n    }\n    _this.path = normPath(header.path);\n    _this.mode = header.mode;\n    if (_this.mode) _this.mode = _this.mode & 4095;\n    _this.uid = header.uid;\n    _this.gid = header.gid;\n    _this.uname = header.uname;\n    _this.gname = header.gname;\n    _this.size = header.size;\n    _this.mtime = header.mtime;\n    _this.atime = header.atime;\n    _this.ctime = header.ctime;\n    _this.linkpath = normPath(header.linkpath);\n    _this.uname = header.uname;\n    _this.gname = header.gname;\n    if (ex) _this[SLURP](ex);\n    if (gex) _this[SLURP](gex, true);\n    return _this;\n  }\n  _createClass(ReadEntry, [{\n    key: \"write\",\n    value: function write(data) {\n      var writeLen = data.length;\n      if (writeLen > this.blockRemain) throw new Error('writing more to entry than is appropriate');\n      var r = this.remain;\n      var br = this.blockRemain;\n      this.remain = Math.max(0, r - writeLen);\n      this.blockRemain = Math.max(0, br - writeLen);\n      if (this.ignore) return true;\n      if (r >= writeLen) return _get(_getPrototypeOf(ReadEntry.prototype), \"write\", this).call(this, data);\n\n      // r < writeLen\n      return _get(_getPrototypeOf(ReadEntry.prototype), \"write\", this).call(this, data.slice(0, r));\n    }\n  }, {\n    key: SLURP,\n    value: function value(ex, global) {\n      for (var k in ex) {\n        // we slurp in everything except for the path attribute in\n        // a global extended header, because that's weird.\n        if (ex[k] !== null && ex[k] !== undefined && !(global && k === 'path')) this[k] = k === 'path' || k === 'linkpath' ? normPath(ex[k]) : ex[k];\n      }\n    }\n  }]);\n  return ReadEntry;\n}(MiniPass);","map":{"version":3,"names":["MiniPass","require","normPath","SLURP","Symbol","module","exports","header","ex","gex","pause","extended","globalExtended","startBlockSize","Math","ceil","size","blockRemain","remain","type","meta","ignore","path","mode","uid","gid","uname","gname","mtime","atime","ctime","linkpath","data","writeLen","length","Error","r","br","max","slice","global","k","undefined"],"sources":["/Users/lieo/diabetes/CUT2DMTest/node_modules/tar/lib/read-entry.js"],"sourcesContent":["'use strict'\nconst MiniPass = require('minipass')\nconst normPath = require('./normalize-windows-path.js')\n\nconst SLURP = Symbol('slurp')\nmodule.exports = class ReadEntry extends MiniPass {\n  constructor (header, ex, gex) {\n    super()\n    // read entries always start life paused.  this is to avoid the\n    // situation where Minipass's auto-ending empty streams results\n    // in an entry ending before we're ready for it.\n    this.pause()\n    this.extended = ex\n    this.globalExtended = gex\n    this.header = header\n    this.startBlockSize = 512 * Math.ceil(header.size / 512)\n    this.blockRemain = this.startBlockSize\n    this.remain = header.size\n    this.type = header.type\n    this.meta = false\n    this.ignore = false\n    switch (this.type) {\n      case 'File':\n      case 'OldFile':\n      case 'Link':\n      case 'SymbolicLink':\n      case 'CharacterDevice':\n      case 'BlockDevice':\n      case 'Directory':\n      case 'FIFO':\n      case 'ContiguousFile':\n      case 'GNUDumpDir':\n        break\n\n      case 'NextFileHasLongLinkpath':\n      case 'NextFileHasLongPath':\n      case 'OldGnuLongPath':\n      case 'GlobalExtendedHeader':\n      case 'ExtendedHeader':\n      case 'OldExtendedHeader':\n        this.meta = true\n        break\n\n      // NOTE: gnutar and bsdtar treat unrecognized types as 'File'\n      // it may be worth doing the same, but with a warning.\n      default:\n        this.ignore = true\n    }\n\n    this.path = normPath(header.path)\n    this.mode = header.mode\n    if (this.mode)\n      this.mode = this.mode & 0o7777\n    this.uid = header.uid\n    this.gid = header.gid\n    this.uname = header.uname\n    this.gname = header.gname\n    this.size = header.size\n    this.mtime = header.mtime\n    this.atime = header.atime\n    this.ctime = header.ctime\n    this.linkpath = normPath(header.linkpath)\n    this.uname = header.uname\n    this.gname = header.gname\n\n    if (ex)\n      this[SLURP](ex)\n    if (gex)\n      this[SLURP](gex, true)\n  }\n\n  write (data) {\n    const writeLen = data.length\n    if (writeLen > this.blockRemain)\n      throw new Error('writing more to entry than is appropriate')\n\n    const r = this.remain\n    const br = this.blockRemain\n    this.remain = Math.max(0, r - writeLen)\n    this.blockRemain = Math.max(0, br - writeLen)\n    if (this.ignore)\n      return true\n\n    if (r >= writeLen)\n      return super.write(data)\n\n    // r < writeLen\n    return super.write(data.slice(0, r))\n  }\n\n  [SLURP] (ex, global) {\n    for (const k in ex) {\n      // we slurp in everything except for the path attribute in\n      // a global extended header, because that's weird.\n      if (ex[k] !== null && ex[k] !== undefined &&\n          !(global && k === 'path'))\n        this[k] = k === 'path' || k === 'linkpath' ? normPath(ex[k]) : ex[k]\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}