{"ast":null,"code":"// field paths that every tar file must have.\n// header is padded to 512 bytes.\nvar f = 0,\n  fields = {},\n  path = fields.path = f++,\n  mode = fields.mode = f++,\n  uid = fields.uid = f++,\n  gid = fields.gid = f++,\n  size = fields.size = f++,\n  mtime = fields.mtime = f++,\n  cksum = fields.cksum = f++,\n  type = fields.type = f++,\n  linkpath = fields.linkpath = f++,\n  headerSize = 512,\n  blockSize = 512,\n  fieldSize = [];\nfieldSize[path] = 100;\nfieldSize[mode] = 8;\nfieldSize[uid] = 8;\nfieldSize[gid] = 8;\nfieldSize[size] = 12;\nfieldSize[mtime] = 12;\nfieldSize[cksum] = 8;\nfieldSize[type] = 1;\nfieldSize[linkpath] = 100;\n\n// \"ustar\\0\" may introduce another bunch of headers.\n// these are optional, and will be nulled out if not present.\n\nvar ustar = fields.ustar = f++,\n  ustarver = fields.ustarver = f++,\n  uname = fields.uname = f++,\n  gname = fields.gname = f++,\n  devmaj = fields.devmaj = f++,\n  devmin = fields.devmin = f++,\n  prefix = fields.prefix = f++,\n  fill = fields.fill = f++;\n\n// terminate fields.\nfields[f] = null;\nfieldSize[ustar] = 6;\nfieldSize[ustarver] = 2;\nfieldSize[uname] = 32;\nfieldSize[gname] = 32;\nfieldSize[devmaj] = 8;\nfieldSize[devmin] = 8;\nfieldSize[prefix] = 155;\nfieldSize[fill] = 12;\n\n// nb: prefix field may in fact be 130 bytes of prefix,\n// a null char, 12 bytes for atime, 12 bytes for ctime.\n//\n// To recognize this format:\n// 1. prefix[130] === ' ' or '\\0'\n// 2. atime and ctime are octal numeric values\n// 3. atime and ctime have ' ' in their last byte\n\nvar fieldEnds = {},\n  fieldOffs = {},\n  fe = 0;\nfor (var i = 0; i < f; i++) {\n  fieldOffs[i] = fe;\n  fieldEnds[i] = fe += fieldSize[i];\n}\n\n// build a translation table of field paths.\nObject.keys(fields).forEach(function (f) {\n  if (fields[f] !== null) fields[fields[f]] = f;\n});\n\n// different values of the 'type' field\n// paths match the values of Stats.isX() functions, where appropriate\nvar types = {\n  0: \"File\",\n  \"\\0\": \"OldFile\" // like 0\n  ,\n  \"\": \"OldFile\",\n  1: \"Link\",\n  2: \"SymbolicLink\",\n  3: \"CharacterDevice\",\n  4: \"BlockDevice\",\n  5: \"Directory\",\n  6: \"FIFO\",\n  7: \"ContiguousFile\" // like 0\n  // posix headers\n  ,\n  g: \"GlobalExtendedHeader\" // k=v for the rest of the archive\n  ,\n  x: \"ExtendedHeader\" // k=v for the next file\n  // vendor-specific stuff\n  ,\n  A: \"SolarisACL\" // skip\n  ,\n  D: \"GNUDumpDir\" // like 5, but with data, which should be skipped\n  ,\n  I: \"Inode\" // metadata only, skip\n  ,\n  K: \"NextFileHasLongLinkpath\" // data = link path of next file\n  ,\n  L: \"NextFileHasLongPath\" // data = path of next file\n  ,\n  M: \"ContinuationFile\" // skip\n  ,\n  N: \"OldGnuLongPath\" // like L\n  ,\n  S: \"SparseFile\" // skip\n  ,\n  V: \"TapeVolumeHeader\" // skip\n  ,\n  X: \"OldExtendedHeader\" // like x\n};\n\nObject.keys(types).forEach(function (t) {\n  types[types[t]] = types[types[t]] || t;\n});\n\n// values for the mode field\nvar modes = {\n  suid: 04000 // set uid on extraction\n  ,\n  sgid: 02000 // set gid on extraction\n  ,\n  svtx: 01000 // set restricted deletion flag on dirs on extraction\n  ,\n  uread: 0400,\n  uwrite: 0200,\n  uexec: 0100,\n  gread: 040,\n  gwrite: 020,\n  gexec: 010,\n  oread: 4,\n  owrite: 2,\n  oexec: 1,\n  all: 07777\n};\nvar numeric = {\n  mode: true,\n  uid: true,\n  gid: true,\n  size: true,\n  mtime: true,\n  devmaj: true,\n  devmin: true,\n  cksum: true,\n  atime: true,\n  ctime: true,\n  dev: true,\n  ino: true,\n  nlink: true\n};\nObject.keys(modes).forEach(function (t) {\n  modes[modes[t]] = modes[modes[t]] || t;\n});\nvar knownExtended = {\n  atime: true,\n  charset: true,\n  comment: true,\n  ctime: true,\n  gid: true,\n  gname: true,\n  linkpath: true,\n  mtime: true,\n  path: true,\n  realtime: true,\n  security: true,\n  size: true,\n  uid: true,\n  uname: true\n};\nexports.fields = fields;\nexports.fieldSize = fieldSize;\nexports.fieldOffs = fieldOffs;\nexports.fieldEnds = fieldEnds;\nexports.types = types;\nexports.modes = modes;\nexports.numeric = numeric;\nexports.headerSize = headerSize;\nexports.blockSize = blockSize;\nexports.knownExtended = knownExtended;\nexports.Pack = require(\"./lib/pack.js\");\nexports.Parse = require(\"./lib/parse.js\");\nexports.Extract = require(\"./lib/extract.js\");","map":{"version":3,"names":["f","fields","path","mode","uid","gid","size","mtime","cksum","type","linkpath","headerSize","blockSize","fieldSize","ustar","ustarver","uname","gname","devmaj","devmin","prefix","fill","fieldEnds","fieldOffs","fe","i","Object","keys","forEach","types","g","x","A","D","I","K","L","M","N","S","V","X","t","modes","suid","sgid","svtx","uread","uwrite","uexec","gread","gwrite","gexec","oread","owrite","oexec","all","numeric","atime","ctime","dev","ino","nlink","knownExtended","charset","comment","realtime","security","exports","Pack","require","Parse","Extract"],"sources":["/Users/lieo/diabetes/CUT2DMTest/node_modules/node-gyp/node_modules/tar/tar.js"],"sourcesContent":["// field paths that every tar file must have.\n// header is padded to 512 bytes.\nvar f = 0\n  , fields = {}\n  , path = fields.path = f++\n  , mode = fields.mode = f++\n  , uid = fields.uid = f++\n  , gid = fields.gid = f++\n  , size = fields.size = f++\n  , mtime = fields.mtime = f++\n  , cksum = fields.cksum = f++\n  , type = fields.type = f++\n  , linkpath = fields.linkpath = f++\n  , headerSize = 512\n  , blockSize = 512\n  , fieldSize = []\n\nfieldSize[path] = 100\nfieldSize[mode] = 8\nfieldSize[uid] = 8\nfieldSize[gid] = 8\nfieldSize[size] = 12\nfieldSize[mtime] = 12\nfieldSize[cksum] = 8\nfieldSize[type] = 1\nfieldSize[linkpath] = 100\n\n// \"ustar\\0\" may introduce another bunch of headers.\n// these are optional, and will be nulled out if not present.\n\nvar ustar = fields.ustar = f++\n  , ustarver = fields.ustarver = f++\n  , uname = fields.uname = f++\n  , gname = fields.gname = f++\n  , devmaj = fields.devmaj = f++\n  , devmin = fields.devmin = f++\n  , prefix = fields.prefix = f++\n  , fill = fields.fill = f++\n\n// terminate fields.\nfields[f] = null\n\nfieldSize[ustar] = 6\nfieldSize[ustarver] = 2\nfieldSize[uname] = 32\nfieldSize[gname] = 32\nfieldSize[devmaj] = 8\nfieldSize[devmin] = 8\nfieldSize[prefix] = 155\nfieldSize[fill] = 12\n\n// nb: prefix field may in fact be 130 bytes of prefix,\n// a null char, 12 bytes for atime, 12 bytes for ctime.\n//\n// To recognize this format:\n// 1. prefix[130] === ' ' or '\\0'\n// 2. atime and ctime are octal numeric values\n// 3. atime and ctime have ' ' in their last byte\n\nvar fieldEnds = {}\n  , fieldOffs = {}\n  , fe = 0\nfor (var i = 0; i < f; i ++) {\n  fieldOffs[i] = fe\n  fieldEnds[i] = (fe += fieldSize[i])\n}\n\n// build a translation table of field paths.\nObject.keys(fields).forEach(function (f) {\n  if (fields[f] !== null) fields[fields[f]] = f\n})\n\n// different values of the 'type' field\n// paths match the values of Stats.isX() functions, where appropriate\nvar types =\n  { 0: \"File\"\n  , \"\\0\": \"OldFile\" // like 0\n  , \"\": \"OldFile\"\n  , 1: \"Link\"\n  , 2: \"SymbolicLink\"\n  , 3: \"CharacterDevice\"\n  , 4: \"BlockDevice\"\n  , 5: \"Directory\"\n  , 6: \"FIFO\"\n  , 7: \"ContiguousFile\" // like 0\n  // posix headers\n  , g: \"GlobalExtendedHeader\" // k=v for the rest of the archive\n  , x: \"ExtendedHeader\" // k=v for the next file\n  // vendor-specific stuff\n  , A: \"SolarisACL\" // skip\n  , D: \"GNUDumpDir\" // like 5, but with data, which should be skipped\n  , I: \"Inode\" // metadata only, skip\n  , K: \"NextFileHasLongLinkpath\" // data = link path of next file\n  , L: \"NextFileHasLongPath\" // data = path of next file\n  , M: \"ContinuationFile\" // skip\n  , N: \"OldGnuLongPath\" // like L\n  , S: \"SparseFile\" // skip\n  , V: \"TapeVolumeHeader\" // skip\n  , X: \"OldExtendedHeader\" // like x\n  }\n\nObject.keys(types).forEach(function (t) {\n  types[types[t]] = types[types[t]] || t\n})\n\n// values for the mode field\nvar modes =\n  { suid: 04000 // set uid on extraction\n  , sgid: 02000 // set gid on extraction\n  , svtx: 01000 // set restricted deletion flag on dirs on extraction\n  , uread:  0400\n  , uwrite: 0200\n  , uexec:  0100\n  , gread:  040\n  , gwrite: 020\n  , gexec:  010\n  , oread:  4\n  , owrite: 2\n  , oexec:  1\n  , all: 07777\n  }\n\nvar numeric =\n  { mode: true\n  , uid: true\n  , gid: true\n  , size: true\n  , mtime: true\n  , devmaj: true\n  , devmin: true\n  , cksum: true\n  , atime: true\n  , ctime: true\n  , dev: true\n  , ino: true\n  , nlink: true\n  }\n\nObject.keys(modes).forEach(function (t) {\n  modes[modes[t]] = modes[modes[t]] || t\n})\n\nvar knownExtended =\n  { atime: true\n  , charset: true\n  , comment: true\n  , ctime: true\n  , gid: true\n  , gname: true\n  , linkpath: true\n  , mtime: true\n  , path: true\n  , realtime: true\n  , security: true\n  , size: true\n  , uid: true\n  , uname: true }\n\n\nexports.fields = fields\nexports.fieldSize = fieldSize\nexports.fieldOffs = fieldOffs\nexports.fieldEnds = fieldEnds\nexports.types = types\nexports.modes = modes\nexports.numeric = numeric\nexports.headerSize = headerSize\nexports.blockSize = blockSize\nexports.knownExtended = knownExtended\n\nexports.Pack = require(\"./lib/pack.js\")\nexports.Parse = require(\"./lib/parse.js\")\nexports.Extract = require(\"./lib/extract.js\")\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}