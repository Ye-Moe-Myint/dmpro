{"ast":null,"code":"module.exports = exports = configure;\nmodule.exports.test = {\n  PythonFinder: PythonFinder,\n  findAccessibleSync: findAccessibleSync,\n  findPython: findPython\n};\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('graceful-fs'),\n  path = require('path'),\n  log = require('npmlog'),\n  osenv = require('osenv'),\n  which = require('which'),\n  semver = require('semver'),\n  mkdirp = require('mkdirp'),\n  cp = require('child_process'),\n  extend = require('util')._extend,\n  processRelease = require('./process-release'),\n  win = process.platform === 'win32',\n  findNodeDirectory = require('./find-node-directory'),\n  msgFormat = require('util').format;\nif (win) var findVS2017 = require('./find-vs2017');\nexports.usage = 'Generates ' + (win ? 'MSVC project files' : 'a Makefile') + ' for the current module';\nfunction configure(gyp, argv, callback) {\n  var python = gyp.opts.python || process.env.PYTHON || 'python2',\n    buildDir = path.resolve('build'),\n    configNames = ['config.gypi', 'common.gypi'],\n    configs = [],\n    nodeDir,\n    release = processRelease(argv, gyp, process.version, process.release);\n  findPython(python, function (err, found) {\n    if (err) {\n      callback(err);\n    } else {\n      python = found;\n      getNodeDir();\n    }\n  });\n  function getNodeDir() {\n    // 'python' should be set by now\n    process.env.PYTHON = python;\n    if (gyp.opts.nodedir) {\n      // --nodedir was specified. use that for the dev files\n      nodeDir = gyp.opts.nodedir.replace(/^~/, osenv.home());\n      log.verbose('get node dir', 'compiling against specified --nodedir dev files: %s', nodeDir);\n      createBuildDir();\n    } else {\n      // if no --nodedir specified, ensure node dependencies are installed\n      if ('v' + release.version !== process.version) {\n        // if --target was given, then determine a target version to compile for\n        log.verbose('get node dir', 'compiling against --target node version: %s', release.version);\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version);\n      }\n      if (!release.semver) {\n        // could not parse the version string with semver\n        return callback(new Error('Invalid version number: ' + release.version));\n      }\n\n      // If the tarball option is set, always remove and reinstall the headers\n      // into devdir. Otherwise only install if they're not already there.\n      gyp.opts.ensure = gyp.opts.tarball ? false : true;\n      gyp.commands.install([release.version], function (err, version) {\n        if (err) return callback(err);\n        log.verbose('get node dir', 'target node version installed:', release.versionDir);\n        nodeDir = path.resolve(gyp.devDir, release.versionDir);\n        createBuildDir();\n      });\n    }\n  }\n  function createBuildDir() {\n    log.verbose('build dir', 'attempting to create \"build\" dir: %s', buildDir);\n    mkdirp(buildDir, function (err, isNew) {\n      if (err) return callback(err);\n      log.verbose('build dir', '\"build\" dir needed to be created?', isNew);\n      if (win && (!gyp.opts.msvs_version || gyp.opts.msvs_version === '2017')) {\n        findVS2017(function (err, vsSetup) {\n          if (err) {\n            log.verbose('Not using VS2017:', err.message);\n            createConfigFile();\n          } else {\n            createConfigFile(null, vsSetup);\n          }\n        });\n      } else {\n        createConfigFile();\n      }\n    });\n  }\n  function createConfigFile(err, vsSetup) {\n    if (err) return callback(err);\n    var configFilename = 'config.gypi';\n    var configPath = path.resolve(buildDir, configFilename);\n    log.verbose('build/' + configFilename, 'creating config file');\n    var config = process.config || {},\n      defaults = config.target_defaults,\n      variables = config.variables;\n\n    // default \"config.variables\"\n    if (!variables) variables = config.variables = {};\n\n    // default \"config.defaults\"\n    if (!defaults) defaults = config.target_defaults = {};\n\n    // don't inherit the \"defaults\" from node's `process.config` object.\n    // doing so could cause problems in cases where the `node` executable was\n    // compiled on a different machine (with different lib/include paths) than\n    // the machine where the addon is being built to\n    defaults.cflags = [];\n    defaults.defines = [];\n    defaults.include_dirs = [];\n    defaults.libraries = [];\n\n    // set the default_configuration prop\n    if ('debug' in gyp.opts) {\n      defaults.default_configuration = gyp.opts.debug ? 'Debug' : 'Release';\n    }\n    if (!defaults.default_configuration) {\n      defaults.default_configuration = 'Release';\n    }\n\n    // set the target_arch variable\n    variables.target_arch = gyp.opts.arch || process.arch || 'ia32';\n\n    // set the node development directory\n    variables.nodedir = nodeDir;\n\n    // disable -T \"thin\" static archives by default\n    variables.standalone_static_library = gyp.opts.thin ? 0 : 1;\n    if (vsSetup) {\n      // GYP doesn't (yet) have support for VS2017, so we force it to VS2015\n      // to avoid pulling a floating patch that has not landed upstream.\n      // Ref: https://chromium-review.googlesource.com/#/c/433540/\n      gyp.opts.msvs_version = '2015';\n      process.env['GYP_MSVS_VERSION'] = 2015;\n      process.env['GYP_MSVS_OVERRIDE_PATH'] = vsSetup.path;\n      defaults['msbuild_toolset'] = 'v141';\n      defaults['msvs_windows_target_platform_version'] = vsSetup.sdk;\n      variables['msbuild_path'] = path.join(vsSetup.path, 'MSBuild', '15.0', 'Bin', 'MSBuild.exe');\n    }\n\n    // loop through the rest of the opts and add the unknown ones as variables.\n    // this allows for module-specific configure flags like:\n    //\n    //   $ node-gyp configure --shared-libxml2\n    Object.keys(gyp.opts).forEach(function (opt) {\n      if (opt === 'argv') return;\n      if (opt in gyp.configDefs) return;\n      variables[opt.replace(/-/g, '_')] = gyp.opts[opt];\n    });\n\n    // ensures that any boolean values from `process.config` get stringified\n    function boolsToString(k, v) {\n      if (typeof v === 'boolean') return String(v);\n      return v;\n    }\n    log.silly('build/' + configFilename, config);\n\n    // now write out the config.gypi file to the build/ dir\n    var prefix = '# Do not edit. File was generated by node-gyp\\'s \"configure\" step',\n      json = JSON.stringify(config, boolsToString, 2);\n    log.verbose('build/' + configFilename, 'writing out config file: %s', configPath);\n    configs.push(configPath);\n    fs.writeFile(configPath, [prefix, json, ''].join('\\n'), findConfigs);\n  }\n  function findConfigs(err) {\n    if (err) return callback(err);\n    var name = configNames.shift();\n    if (!name) return runGyp();\n    var fullPath = path.resolve(name);\n    log.verbose(name, 'checking for gypi file: %s', fullPath);\n    fs.stat(fullPath, function (err, stat) {\n      if (err) {\n        if (err.code == 'ENOENT') {\n          findConfigs(); // check next gypi filename\n        } else {\n          callback(err);\n        }\n      } else {\n        log.verbose(name, 'found gypi file');\n        configs.push(fullPath);\n        findConfigs();\n      }\n    });\n  }\n  function runGyp(err) {\n    if (err) return callback(err);\n    if (!~argv.indexOf('-f') && !~argv.indexOf('--format')) {\n      if (win) {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"msvs\"');\n        // force the 'make' target for non-Windows\n        argv.push('-f', 'msvs');\n      } else {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"make\"');\n        // force the 'make' target for non-Windows\n        argv.push('-f', 'make');\n      }\n    }\n    function hasMsvsVersion() {\n      return argv.some(function (arg) {\n        return arg.indexOf('msvs_version') === 0;\n      });\n    }\n    if (win && !hasMsvsVersion()) {\n      if ('msvs_version' in gyp.opts) {\n        argv.push('-G', 'msvs_version=' + gyp.opts.msvs_version);\n      } else {\n        argv.push('-G', 'msvs_version=auto');\n      }\n    }\n\n    // include all the \".gypi\" files that were found\n    configs.forEach(function (config) {\n      argv.push('-I', config);\n    });\n\n    // For AIX and z/OS we need to set up the path to the exports file\n    // which contains the symbols needed for linking. \n    var node_exp_file = undefined;\n    if (process.platform === 'aix' || process.platform === 'os390') {\n      var ext = process.platform === 'aix' ? 'exp' : 'x';\n      var node_root_dir = findNodeDirectory();\n      var candidates = undefined;\n      if (process.platform === 'aix') {\n        candidates = ['include/node/node', 'out/Release/node', 'out/Debug/node', 'node'].map(function (file) {\n          return file + '.' + ext;\n        });\n      } else {\n        candidates = ['out/Release/obj.target/libnode', 'out/Debug/obj.target/libnode', 'lib/libnode'].map(function (file) {\n          return file + '.' + ext;\n        });\n      }\n      var logprefix = 'find exports file';\n      node_exp_file = findAccessibleSync(logprefix, node_root_dir, candidates);\n      if (node_exp_file !== undefined) {\n        log.verbose(logprefix, 'Found exports file: %s', node_exp_file);\n      } else {\n        var msg = msgFormat('Could not find node.%s file in %s', ext, node_root_dir);\n        log.error(logprefix, 'Could not find exports file');\n        return callback(new Error(msg));\n      }\n    }\n\n    // this logic ported from the old `gyp_addon` python file\n    var gyp_script = path.resolve(__dirname, '..', 'gyp', 'gyp_main.py');\n    var addon_gypi = path.resolve(__dirname, '..', 'addon.gypi');\n    var common_gypi = path.resolve(nodeDir, 'include/node/common.gypi');\n    fs.stat(common_gypi, function (err, stat) {\n      if (err) common_gypi = path.resolve(nodeDir, 'common.gypi');\n      var output_dir = 'build';\n      if (win) {\n        // Windows expects an absolute path\n        output_dir = buildDir;\n      }\n      var nodeGypDir = path.resolve(__dirname, '..');\n      var nodeLibFile = path.join(nodeDir, !gyp.opts.nodedir ? '<(target_arch)' : '$(Configuration)', release.name + '.lib');\n      argv.push('-I', addon_gypi);\n      argv.push('-I', common_gypi);\n      argv.push('-Dlibrary=shared_library');\n      argv.push('-Dvisibility=default');\n      argv.push('-Dnode_root_dir=' + nodeDir);\n      if (process.platform === 'aix' || process.platform === 'os390') {\n        argv.push('-Dnode_exp_file=' + node_exp_file);\n      }\n      argv.push('-Dnode_gyp_dir=' + nodeGypDir);\n      argv.push('-Dnode_lib_file=' + nodeLibFile);\n      argv.push('-Dmodule_root_dir=' + process.cwd());\n      argv.push('-Dnode_engine=' + (gyp.opts.node_engine || process.jsEngine || 'v8'));\n      argv.push('--depth=.');\n      argv.push('--no-parallel');\n\n      // tell gyp to write the Makefile/Solution files into output_dir\n      argv.push('--generator-output', output_dir);\n\n      // tell make to write its output into the same dir\n      argv.push('-Goutput_dir=.');\n\n      // enforce use of the \"binding.gyp\" file\n      argv.unshift('binding.gyp');\n\n      // execute `gyp` from the current target nodedir\n      argv.unshift(gyp_script);\n\n      // make sure python uses files that came with this particular node package\n      var pypath = [path.join(__dirname, '..', 'gyp', 'pylib')];\n      if (process.env.PYTHONPATH) {\n        pypath.push(process.env.PYTHONPATH);\n      }\n      process.env.PYTHONPATH = pypath.join(win ? ';' : ':');\n      var cp = gyp.spawn(python, argv);\n      cp.on('exit', onCpExit);\n    });\n  }\n\n  /**\n   * Called when the `gyp` child process exits.\n   */\n\n  function onCpExit(code, signal) {\n    if (code !== 0) {\n      callback(new Error('`gyp` failed with exit code: ' + code));\n    } else {\n      // we're done\n      callback();\n    }\n  }\n}\n\n/**\n * Returns the first file or directory from an array of candidates that is\n * readable by the current user, or undefined if none of the candidates are\n * readable.\n */\nfunction findAccessibleSync(logprefix, dir, candidates) {\n  for (var next = 0; next < candidates.length; next++) {\n    var candidate = path.resolve(dir, candidates[next]);\n    try {\n      var fd = fs.openSync(candidate, 'r');\n    } catch (e) {\n      // this candidate was not found or not readable, do nothing\n      log.silly(logprefix, 'Could not open %s: %s', candidate, e.message);\n      continue;\n    }\n    fs.closeSync(fd);\n    log.silly(logprefix, 'Found readable %s', candidate);\n    return candidate;\n  }\n  return undefined;\n}\nfunction PythonFinder(python, callback) {\n  this.callback = callback;\n  this.python = python;\n}\nPythonFinder.prototype = {\n  checkPythonLauncherDepth: 0,\n  env: process.env,\n  execFile: cp.execFile,\n  log: log,\n  resolve: path.win32 && path.win32.resolve || path.resolve,\n  stat: fs.stat,\n  which: which,\n  win: win,\n  checkPython: function checkPython() {\n    this.log.verbose('check python', 'checking for Python executable \"%s\" in the PATH', this.python);\n    this.which(this.python, function (err, execPath) {\n      if (err) {\n        this.log.verbose('`which` failed', this.python, err);\n        if (this.python === 'python2') {\n          this.python = 'python';\n          return this.checkPython();\n        }\n        if (this.win) {\n          this.checkPythonLauncher();\n        } else {\n          this.failNoPython();\n        }\n      } else {\n        this.log.verbose('`which` succeeded', this.python, execPath);\n        // Found the `python` executable, and from now on we use it explicitly.\n        // This solves #667 and #750 (`execFile` won't run batch files\n        // (*.cmd, and *.bat))\n        this.python = execPath;\n        this.checkPythonVersion();\n      }\n    }.bind(this));\n  },\n  // Distributions of Python on Windows by default install with the \"py.exe\"\n  // Python launcher which is more likely to exist than the Python executable\n  // being in the $PATH.\n  // Because the Python launcher supports all versions of Python, we have to\n  // explicitly request a Python 2 version. This is done by supplying \"-2\" as\n  // the first command line argument. Since \"py.exe -2\" would be an invalid\n  // executable for \"execFile\", we have to use the launcher to figure out\n  // where the actual \"python.exe\" executable is located.\n  checkPythonLauncher: function checkPythonLauncher() {\n    this.checkPythonLauncherDepth += 1;\n    this.log.verbose('could not find \"' + this.python + '\". checking python launcher');\n    var env = extend({}, this.env);\n    env.TERM = 'dumb';\n    var launcherArgs = ['-2', '-c', 'import sys; print sys.executable'];\n    this.execFile('py.exe', launcherArgs, {\n      env: env\n    }, function (err, stdout) {\n      if (err) {\n        this.guessPython();\n      } else {\n        this.python = stdout.trim();\n        this.log.verbose('check python launcher', 'python executable found: %j', this.python);\n        this.checkPythonVersion();\n      }\n      this.checkPythonLauncherDepth -= 1;\n    }.bind(this));\n  },\n  checkPythonVersion: function checkPythonVersion() {\n    var args = ['-c', 'import sys; print \"%s.%s.%s\" % sys.version_info[:3];'];\n    var env = extend({}, this.env);\n    env.TERM = 'dumb';\n    this.execFile(this.python, args, {\n      env: env\n    }, function (err, stdout) {\n      if (err) {\n        return this.callback(err);\n      }\n      this.log.verbose('check python version', '`%s -c \"' + args[1] + '\"` returned: %j', this.python, stdout);\n      var version = stdout.trim();\n      var range = semver.Range('>=2.5.0 <3.0.0');\n      var valid = false;\n      try {\n        valid = range.test(version);\n      } catch (e) {\n        this.log.silly('range.test() error', e);\n      }\n      if (valid) {\n        this.callback(null, this.python);\n      } else if (this.win && this.checkPythonLauncherDepth === 0) {\n        this.checkPythonLauncher();\n      } else {\n        this.failPythonVersion(version);\n      }\n    }.bind(this));\n  },\n  failNoPython: function failNoPython() {\n    var errmsg = 'Can\\'t find Python executable \"' + this.python + '\", you can set the PYTHON env variable.';\n    this.callback(new Error(errmsg));\n  },\n  failPythonVersion: function failPythonVersion(badVersion) {\n    var errmsg = 'Python executable \"' + this.python + '\" is v' + badVersion + ', which is not supported by gyp.\\n' + 'You can pass the --python switch to point to ' + 'Python >= v2.5.0 & < 3.0.0.';\n    this.callback(new Error(errmsg));\n  },\n  // Called on Windows when \"python\" isn't available in the current $PATH.\n  // We are going to check if \"%SystemDrive%\\python27\\python.exe\" exists.\n  guessPython: function guessPython() {\n    this.log.verbose('could not find \"' + this.python + '\". guessing location');\n    var rootDir = this.env.SystemDrive || 'C:\\\\';\n    if (rootDir[rootDir.length - 1] !== '\\\\') {\n      rootDir += '\\\\';\n    }\n    var pythonPath = this.resolve(rootDir, 'Python27', 'python.exe');\n    this.log.verbose('ensuring that file exists:', pythonPath);\n    this.stat(pythonPath, function (err, stat) {\n      if (err) {\n        if (err.code == 'ENOENT') {\n          this.failNoPython();\n        } else {\n          this.callback(err);\n        }\n        return;\n      }\n      this.python = pythonPath;\n      this.checkPythonVersion();\n    }.bind(this));\n  }\n};\nfunction findPython(python, callback) {\n  var finder = new PythonFinder(python, callback);\n  finder.checkPython();\n}","map":{"version":3,"names":["module","exports","configure","test","PythonFinder","findAccessibleSync","findPython","fs","require","path","log","osenv","which","semver","mkdirp","cp","extend","_extend","processRelease","win","process","platform","findNodeDirectory","msgFormat","format","findVS2017","usage","gyp","argv","callback","python","opts","env","PYTHON","buildDir","resolve","configNames","configs","nodeDir","release","version","err","found","getNodeDir","nodedir","replace","home","verbose","createBuildDir","Error","ensure","tarball","commands","install","versionDir","devDir","isNew","msvs_version","vsSetup","message","createConfigFile","configFilename","configPath","config","defaults","target_defaults","variables","cflags","defines","include_dirs","libraries","default_configuration","debug","target_arch","arch","standalone_static_library","thin","sdk","join","Object","keys","forEach","opt","configDefs","boolsToString","k","v","String","silly","prefix","json","JSON","stringify","push","writeFile","findConfigs","name","shift","runGyp","fullPath","stat","code","indexOf","hasMsvsVersion","some","arg","node_exp_file","undefined","ext","node_root_dir","candidates","map","file","logprefix","msg","error","gyp_script","__dirname","addon_gypi","common_gypi","output_dir","nodeGypDir","nodeLibFile","cwd","node_engine","jsEngine","unshift","pypath","PYTHONPATH","spawn","on","onCpExit","signal","dir","next","length","candidate","fd","openSync","e","closeSync","prototype","checkPythonLauncherDepth","execFile","win32","checkPython","execPath","checkPythonLauncher","failNoPython","checkPythonVersion","bind","TERM","launcherArgs","stdout","guessPython","trim","args","range","Range","valid","failPythonVersion","errmsg","badVersion","rootDir","SystemDrive","pythonPath","finder"],"sources":["/Users/lieo/diabetes/CUT2DMTest/node_modules/node-gyp/lib/configure.js"],"sourcesContent":["module.exports = exports = configure\nmodule.exports.test = {\n  PythonFinder: PythonFinder,\n  findAccessibleSync: findAccessibleSync,\n  findPython: findPython,\n}\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('graceful-fs')\n  , path = require('path')\n  , log = require('npmlog')\n  , osenv = require('osenv')\n  , which = require('which')\n  , semver = require('semver')\n  , mkdirp = require('mkdirp')\n  , cp = require('child_process')\n  , extend = require('util')._extend\n  , processRelease = require('./process-release')\n  , win = process.platform === 'win32'\n  , findNodeDirectory = require('./find-node-directory')\n  , msgFormat = require('util').format\nif (win)\n  var findVS2017 = require('./find-vs2017')\n\nexports.usage = 'Generates ' + (win ? 'MSVC project files' : 'a Makefile') + ' for the current module'\n\nfunction configure (gyp, argv, callback) {\n\n  var python = gyp.opts.python || process.env.PYTHON || 'python2'\n    , buildDir = path.resolve('build')\n    , configNames = [ 'config.gypi', 'common.gypi' ]\n    , configs = []\n    , nodeDir\n    , release = processRelease(argv, gyp, process.version, process.release)\n\n  findPython(python, function (err, found) {\n    if (err) {\n      callback(err)\n    } else {\n      python = found\n      getNodeDir()\n    }\n  })\n\n  function getNodeDir () {\n\n    // 'python' should be set by now\n    process.env.PYTHON = python\n\n    if (gyp.opts.nodedir) {\n      // --nodedir was specified. use that for the dev files\n      nodeDir = gyp.opts.nodedir.replace(/^~/, osenv.home())\n\n      log.verbose('get node dir', 'compiling against specified --nodedir dev files: %s', nodeDir)\n      createBuildDir()\n\n    } else {\n      // if no --nodedir specified, ensure node dependencies are installed\n      if ('v' + release.version !== process.version) {\n        // if --target was given, then determine a target version to compile for\n        log.verbose('get node dir', 'compiling against --target node version: %s', release.version)\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version)\n      }\n\n      if (!release.semver) {\n        // could not parse the version string with semver\n        return callback(new Error('Invalid version number: ' + release.version))\n      }\n\n      // If the tarball option is set, always remove and reinstall the headers\n      // into devdir. Otherwise only install if they're not already there.\n      gyp.opts.ensure = gyp.opts.tarball ? false : true\n\n      gyp.commands.install([ release.version ], function (err, version) {\n        if (err) return callback(err)\n        log.verbose('get node dir', 'target node version installed:', release.versionDir)\n        nodeDir = path.resolve(gyp.devDir, release.versionDir)\n        createBuildDir()\n      })\n    }\n  }\n\n  function createBuildDir () {\n    log.verbose('build dir', 'attempting to create \"build\" dir: %s', buildDir)\n    mkdirp(buildDir, function (err, isNew) {\n      if (err) return callback(err)\n      log.verbose('build dir', '\"build\" dir needed to be created?', isNew)\n      if (win && (!gyp.opts.msvs_version || gyp.opts.msvs_version === '2017')) {\n        findVS2017(function (err, vsSetup) {\n          if (err) {\n            log.verbose('Not using VS2017:', err.message)\n            createConfigFile()\n          } else {\n            createConfigFile(null, vsSetup)\n          }\n        })\n      } else {\n        createConfigFile()\n      }\n    })\n  }\n\n  function createConfigFile (err, vsSetup) {\n    if (err) return callback(err)\n\n    var configFilename = 'config.gypi'\n    var configPath = path.resolve(buildDir, configFilename)\n\n    log.verbose('build/' + configFilename, 'creating config file')\n\n    var config = process.config || {}\n      , defaults = config.target_defaults\n      , variables = config.variables\n\n    // default \"config.variables\"\n    if (!variables) variables = config.variables = {}\n\n    // default \"config.defaults\"\n    if (!defaults) defaults = config.target_defaults = {}\n\n    // don't inherit the \"defaults\" from node's `process.config` object.\n    // doing so could cause problems in cases where the `node` executable was\n    // compiled on a different machine (with different lib/include paths) than\n    // the machine where the addon is being built to\n    defaults.cflags = []\n    defaults.defines = []\n    defaults.include_dirs = []\n    defaults.libraries = []\n\n    // set the default_configuration prop\n    if ('debug' in gyp.opts) {\n      defaults.default_configuration = gyp.opts.debug ? 'Debug' : 'Release'\n    }\n    if (!defaults.default_configuration) {\n      defaults.default_configuration = 'Release'\n    }\n\n    // set the target_arch variable\n    variables.target_arch = gyp.opts.arch || process.arch || 'ia32'\n\n    // set the node development directory\n    variables.nodedir = nodeDir\n\n    // disable -T \"thin\" static archives by default\n    variables.standalone_static_library = gyp.opts.thin ? 0 : 1\n\n    if (vsSetup) {\n      // GYP doesn't (yet) have support for VS2017, so we force it to VS2015\n      // to avoid pulling a floating patch that has not landed upstream.\n      // Ref: https://chromium-review.googlesource.com/#/c/433540/\n      gyp.opts.msvs_version = '2015'\n      process.env['GYP_MSVS_VERSION'] = 2015\n      process.env['GYP_MSVS_OVERRIDE_PATH'] = vsSetup.path\n      defaults['msbuild_toolset'] = 'v141'\n      defaults['msvs_windows_target_platform_version'] = vsSetup.sdk\n      variables['msbuild_path'] = path.join(vsSetup.path, 'MSBuild', '15.0',\n                                            'Bin', 'MSBuild.exe')\n    }\n\n    // loop through the rest of the opts and add the unknown ones as variables.\n    // this allows for module-specific configure flags like:\n    //\n    //   $ node-gyp configure --shared-libxml2\n    Object.keys(gyp.opts).forEach(function (opt) {\n      if (opt === 'argv') return\n      if (opt in gyp.configDefs) return\n      variables[opt.replace(/-/g, '_')] = gyp.opts[opt]\n    })\n\n    // ensures that any boolean values from `process.config` get stringified\n    function boolsToString (k, v) {\n      if (typeof v === 'boolean')\n        return String(v)\n      return v\n    }\n\n    log.silly('build/' + configFilename, config)\n\n    // now write out the config.gypi file to the build/ dir\n    var prefix = '# Do not edit. File was generated by node-gyp\\'s \"configure\" step'\n      , json = JSON.stringify(config, boolsToString, 2)\n    log.verbose('build/' + configFilename, 'writing out config file: %s', configPath)\n    configs.push(configPath)\n    fs.writeFile(configPath, [prefix, json, ''].join('\\n'), findConfigs)\n  }\n\n  function findConfigs (err) {\n    if (err) return callback(err)\n    var name = configNames.shift()\n    if (!name) return runGyp()\n    var fullPath = path.resolve(name)\n    log.verbose(name, 'checking for gypi file: %s', fullPath)\n    fs.stat(fullPath, function (err, stat) {\n      if (err) {\n        if (err.code == 'ENOENT') {\n          findConfigs() // check next gypi filename\n        } else {\n          callback(err)\n        }\n      } else {\n        log.verbose(name, 'found gypi file')\n        configs.push(fullPath)\n        findConfigs()\n      }\n    })\n  }\n\n  function runGyp (err) {\n    if (err) return callback(err)\n\n    if (!~argv.indexOf('-f') && !~argv.indexOf('--format')) {\n      if (win) {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"msvs\"')\n        // force the 'make' target for non-Windows\n        argv.push('-f', 'msvs')\n      } else {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"make\"')\n        // force the 'make' target for non-Windows\n        argv.push('-f', 'make')\n      }\n    }\n\n    function hasMsvsVersion () {\n      return argv.some(function (arg) {\n        return arg.indexOf('msvs_version') === 0\n      })\n    }\n\n    if (win && !hasMsvsVersion()) {\n      if ('msvs_version' in gyp.opts) {\n        argv.push('-G', 'msvs_version=' + gyp.opts.msvs_version)\n      } else {\n        argv.push('-G', 'msvs_version=auto')\n      }\n    }\n\n    // include all the \".gypi\" files that were found\n    configs.forEach(function (config) {\n      argv.push('-I', config)\n    })\n\n    // For AIX and z/OS we need to set up the path to the exports file\n    // which contains the symbols needed for linking. \n    var node_exp_file = undefined\n    if (process.platform === 'aix' || process.platform === 'os390') {\n      var ext = process.platform === 'aix' ? 'exp' : 'x'\n      var node_root_dir = findNodeDirectory()\n      var candidates = undefined \n      if (process.platform === 'aix') {\n        candidates = ['include/node/node',\n                      'out/Release/node',\n                      'out/Debug/node',\n                      'node'\n                     ].map(function(file) {\n                       return file + '.' + ext\n                     })\n      } else {\n        candidates = ['out/Release/obj.target/libnode',\n                      'out/Debug/obj.target/libnode',\n                      'lib/libnode'\n                     ].map(function(file) {\n                       return file + '.' + ext\n                     })\n      }\n      var logprefix = 'find exports file'\n      node_exp_file = findAccessibleSync(logprefix, node_root_dir, candidates)\n      if (node_exp_file !== undefined) {\n        log.verbose(logprefix, 'Found exports file: %s', node_exp_file)\n      } else {\n        var msg = msgFormat('Could not find node.%s file in %s', ext, node_root_dir)\n        log.error(logprefix, 'Could not find exports file')\n        return callback(new Error(msg))\n      }\n    }\n\n    // this logic ported from the old `gyp_addon` python file\n    var gyp_script = path.resolve(__dirname, '..', 'gyp', 'gyp_main.py')\n    var addon_gypi = path.resolve(__dirname, '..', 'addon.gypi')\n    var common_gypi = path.resolve(nodeDir, 'include/node/common.gypi')\n    fs.stat(common_gypi, function (err, stat) {\n      if (err)\n        common_gypi = path.resolve(nodeDir, 'common.gypi')\n\n      var output_dir = 'build'\n      if (win) {\n        // Windows expects an absolute path\n        output_dir = buildDir\n      }\n      var nodeGypDir = path.resolve(__dirname, '..')\n      var nodeLibFile = path.join(nodeDir,\n        !gyp.opts.nodedir ? '<(target_arch)' : '$(Configuration)',\n        release.name + '.lib')\n\n      argv.push('-I', addon_gypi)\n      argv.push('-I', common_gypi)\n      argv.push('-Dlibrary=shared_library')\n      argv.push('-Dvisibility=default')\n      argv.push('-Dnode_root_dir=' + nodeDir)\n      if (process.platform === 'aix' || process.platform === 'os390') {\n        argv.push('-Dnode_exp_file=' + node_exp_file)\n      }\n      argv.push('-Dnode_gyp_dir=' + nodeGypDir)\n      argv.push('-Dnode_lib_file=' + nodeLibFile)\n      argv.push('-Dmodule_root_dir=' + process.cwd())\n      argv.push('-Dnode_engine=' +\n        (gyp.opts.node_engine || process.jsEngine || 'v8'))\n      argv.push('--depth=.')\n      argv.push('--no-parallel')\n\n      // tell gyp to write the Makefile/Solution files into output_dir\n      argv.push('--generator-output', output_dir)\n\n      // tell make to write its output into the same dir\n      argv.push('-Goutput_dir=.')\n\n      // enforce use of the \"binding.gyp\" file\n      argv.unshift('binding.gyp')\n\n      // execute `gyp` from the current target nodedir\n      argv.unshift(gyp_script)\n\n      // make sure python uses files that came with this particular node package\n      var pypath = [path.join(__dirname, '..', 'gyp', 'pylib')]\n      if (process.env.PYTHONPATH) {\n        pypath.push(process.env.PYTHONPATH)\n      }\n      process.env.PYTHONPATH = pypath.join(win ? ';' : ':')\n\n      var cp = gyp.spawn(python, argv)\n      cp.on('exit', onCpExit)\n    })\n  }\n\n  /**\n   * Called when the `gyp` child process exits.\n   */\n\n  function onCpExit (code, signal) {\n    if (code !== 0) {\n      callback(new Error('`gyp` failed with exit code: ' + code))\n    } else {\n      // we're done\n      callback()\n    }\n  }\n\n}\n\n/**\n * Returns the first file or directory from an array of candidates that is\n * readable by the current user, or undefined if none of the candidates are\n * readable.\n */\nfunction findAccessibleSync (logprefix, dir, candidates) {\n  for (var next = 0; next < candidates.length; next++) {\n     var candidate = path.resolve(dir, candidates[next])\n     try {\n       var fd = fs.openSync(candidate, 'r')\n     } catch (e) {\n       // this candidate was not found or not readable, do nothing\n       log.silly(logprefix, 'Could not open %s: %s', candidate, e.message)\n       continue\n     }\n     fs.closeSync(fd)\n     log.silly(logprefix, 'Found readable %s', candidate)\n     return candidate\n  }\n\n  return undefined\n}\n\nfunction PythonFinder(python, callback) {\n  this.callback = callback\n  this.python = python\n}\n\nPythonFinder.prototype = {\n  checkPythonLauncherDepth: 0,\n  env: process.env,\n  execFile: cp.execFile,\n  log: log,\n  resolve: path.win32 && path.win32.resolve || path.resolve,\n  stat: fs.stat,\n  which: which,\n  win: win,\n\n  checkPython: function checkPython () {\n    this.log.verbose('check python',\n                     'checking for Python executable \"%s\" in the PATH',\n                     this.python)\n    this.which(this.python, function (err, execPath) {\n      if (err) {\n        this.log.verbose('`which` failed', this.python, err)\n        if (this.python === 'python2') {\n          this.python = 'python'\n          return this.checkPython()\n        }\n        if (this.win) {\n          this.checkPythonLauncher()\n        } else {\n          this.failNoPython()\n        }\n      } else {\n        this.log.verbose('`which` succeeded', this.python, execPath)\n        // Found the `python` executable, and from now on we use it explicitly.\n        // This solves #667 and #750 (`execFile` won't run batch files\n        // (*.cmd, and *.bat))\n        this.python = execPath\n        this.checkPythonVersion()\n      }\n    }.bind(this))\n  },\n\n  // Distributions of Python on Windows by default install with the \"py.exe\"\n  // Python launcher which is more likely to exist than the Python executable\n  // being in the $PATH.\n  // Because the Python launcher supports all versions of Python, we have to\n  // explicitly request a Python 2 version. This is done by supplying \"-2\" as\n  // the first command line argument. Since \"py.exe -2\" would be an invalid\n  // executable for \"execFile\", we have to use the launcher to figure out\n  // where the actual \"python.exe\" executable is located.\n  checkPythonLauncher: function checkPythonLauncher () {\n    this.checkPythonLauncherDepth += 1\n\n    this.log.verbose(\n        'could not find \"' + this.python + '\". checking python launcher')\n    var env = extend({}, this.env)\n    env.TERM = 'dumb'\n\n    var launcherArgs = ['-2', '-c', 'import sys; print sys.executable']\n    this.execFile('py.exe', launcherArgs, { env: env }, function (err, stdout) {\n      if (err) {\n        this.guessPython()\n      } else {\n        this.python = stdout.trim()\n        this.log.verbose('check python launcher',\n                         'python executable found: %j',\n                         this.python)\n        this.checkPythonVersion()\n      }\n      this.checkPythonLauncherDepth -= 1\n    }.bind(this))\n  },\n\n  checkPythonVersion: function checkPythonVersion () {\n    var args = ['-c', 'import sys; print \"%s.%s.%s\" % sys.version_info[:3];']\n    var env = extend({}, this.env)\n    env.TERM = 'dumb'\n\n    this.execFile(this.python, args, { env: env }, function (err, stdout) {\n      if (err) {\n        return this.callback(err)\n      }\n      this.log.verbose('check python version',\n                       '`%s -c \"' + args[1] + '\"` returned: %j',\n                       this.python, stdout)\n      var version = stdout.trim()\n      var range = semver.Range('>=2.5.0 <3.0.0')\n      var valid = false\n      try {\n        valid = range.test(version)\n      } catch (e) {\n        this.log.silly('range.test() error', e)\n      }\n      if (valid) {\n        this.callback(null, this.python)\n      } else if (this.win && this.checkPythonLauncherDepth === 0) {\n        this.checkPythonLauncher()\n      } else {\n        this.failPythonVersion(version)\n      }\n    }.bind(this))\n  },\n\n  failNoPython: function failNoPython () {\n    var errmsg =\n        'Can\\'t find Python executable \"' + this.python +\n        '\", you can set the PYTHON env variable.'\n    this.callback(new Error(errmsg))\n  },\n\n  failPythonVersion: function failPythonVersion (badVersion) {\n    var errmsg =\n        'Python executable \"' + this.python +\n        '\" is v' + badVersion + ', which is not supported by gyp.\\n' +\n        'You can pass the --python switch to point to ' +\n        'Python >= v2.5.0 & < 3.0.0.'\n    this.callback(new Error(errmsg))\n  },\n\n  // Called on Windows when \"python\" isn't available in the current $PATH.\n  // We are going to check if \"%SystemDrive%\\python27\\python.exe\" exists.\n  guessPython: function guessPython () {\n    this.log.verbose('could not find \"' + this.python + '\". guessing location')\n    var rootDir = this.env.SystemDrive || 'C:\\\\'\n    if (rootDir[rootDir.length - 1] !== '\\\\') {\n      rootDir += '\\\\'\n    }\n    var pythonPath = this.resolve(rootDir, 'Python27', 'python.exe')\n    this.log.verbose('ensuring that file exists:', pythonPath)\n    this.stat(pythonPath, function (err, stat) {\n      if (err) {\n        if (err.code == 'ENOENT') {\n          this.failNoPython()\n        } else {\n          this.callback(err)\n        }\n        return\n      }\n      this.python = pythonPath\n      this.checkPythonVersion()\n    }.bind(this))\n  },\n}\n\nfunction findPython (python, callback) {\n  var finder = new PythonFinder(python, callback)\n  finder.checkPython()\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}