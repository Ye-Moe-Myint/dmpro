{"ast":null,"code":"var semver = require('semver'),\n  url = require('url'),\n  path = require('path'),\n  log = require('npmlog')\n\n  // versions where -headers.tar.gz started shipping\n  ,\n  headersTarballRange = '>= 3.0.0 || ~0.12.10 || ~0.10.42',\n  bitsre = /\\/win-(x86|x64)\\//,\n  bitsreV3 = /\\/win-(x86|ia32|x64)\\//; // io.js v3.x.x shipped with \"ia32\" but should\n// have been \"x86\"\n\n// Captures all the logic required to determine download URLs, local directory and \n// file names. Inputs come from command-line switches (--target, --dist-url),\n// `process.version` and `process.release` where it exists.\nfunction processRelease(argv, gyp, defaultVersion, defaultRelease) {\n  var version = semver.valid(argv[0]) && argv[0] || gyp.opts.target || defaultVersion,\n    versionSemver = semver.parse(version),\n    overrideDistUrl = gyp.opts['dist-url'] || gyp.opts.disturl,\n    isDefaultVersion,\n    isIojs,\n    name,\n    distBaseUrl,\n    baseUrl,\n    libUrl32,\n    libUrl64,\n    tarballUrl,\n    canGetHeaders;\n  if (!versionSemver) {\n    // not a valid semver string, nothing we can do\n    return {\n      version: version\n    };\n  }\n  // flatten version into String\n  version = versionSemver.version;\n\n  // defaultVersion should come from process.version so ought to be valid semver\n  isDefaultVersion = version === semver.parse(defaultVersion).version;\n\n  // can't use process.release if we're using --target=x.y.z\n  if (!isDefaultVersion) defaultRelease = null;\n  if (defaultRelease) {\n    // v3 onward, has process.release\n    name = defaultRelease.name.replace(/io\\.js/, 'iojs'); // remove the '.' for directory naming purposes\n    isIojs = name === 'iojs';\n  } else {\n    // old node or alternative --target=\n    // semver.satisfies() doesn't like prerelease tags so test major directly\n    isIojs = versionSemver.major >= 1 && versionSemver.major < 4;\n    name = isIojs ? 'iojs' : 'node';\n  }\n\n  // check for the nvm.sh standard mirror env variables\n  if (!overrideDistUrl) {\n    if (isIojs) {\n      if (process.env.IOJS_ORG_MIRROR) {\n        overrideDistUrl = process.env.IOJS_ORG_MIRROR;\n      } else if (process.env.NVM_IOJS_ORG_MIRROR) {\n        // remove on next semver-major\n        overrideDistUrl = process.env.NVM_IOJS_ORG_MIRROR;\n        log.warn('download', 'NVM_IOJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, ' + 'please use IOJS_ORG_MIRROR');\n      }\n    } else {\n      if (process.env.NODEJS_ORG_MIRROR) {\n        overrideDistUrl = process.env.NODEJS_ORG_MIRROR;\n      } else if (process.env.NVM_NODEJS_ORG_MIRROR) {\n        // remove on next semver-major\n        overrideDistUrl = process.env.NVM_NODEJS_ORG_MIRROR;\n        log.warn('download', 'NVM_NODEJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, ' + 'please use NODEJS_ORG_MIRROR');\n      }\n    }\n  }\n  if (overrideDistUrl) log.verbose('download', 'using dist-url', overrideDistUrl);\n  if (overrideDistUrl) distBaseUrl = overrideDistUrl.replace(/\\/+$/, '');else distBaseUrl = isIojs ? 'https://iojs.org/download/release' : 'https://nodejs.org/dist';\n  distBaseUrl += '/v' + version + '/';\n\n  // new style, based on process.release so we have a lot of the data we need\n  if (defaultRelease && defaultRelease.headersUrl && !overrideDistUrl) {\n    baseUrl = url.resolve(defaultRelease.headersUrl, './');\n    libUrl32 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'x86', versionSemver.major);\n    libUrl64 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'x64', versionSemver.major);\n    return {\n      version: version,\n      semver: versionSemver,\n      name: name,\n      baseUrl: baseUrl,\n      tarballUrl: defaultRelease.headersUrl,\n      shasumsUrl: url.resolve(baseUrl, 'SHASUMS256.txt'),\n      versionDir: (name !== 'node' ? name + '-' : '') + version,\n      libUrl32: libUrl32,\n      libUrl64: libUrl64,\n      libPath32: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl32).path)),\n      libPath64: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl64).path))\n    };\n  }\n\n  // older versions without process.release are captured here and we have to make\n  // a lot of assumptions, additionally if you --target=x.y.z then we can't use the\n  // current process.release\n\n  baseUrl = distBaseUrl;\n  libUrl32 = resolveLibUrl(name, baseUrl, 'x86', versionSemver.major);\n  libUrl64 = resolveLibUrl(name, baseUrl, 'x64', versionSemver.major);\n  // making the bold assumption that anything with a version number >3.0.0 will\n  // have a *-headers.tar.gz file in its dist location, even some frankenstein\n  // custom version\n  canGetHeaders = semver.satisfies(versionSemver, headersTarballRange);\n  tarballUrl = url.resolve(baseUrl, name + '-v' + version + (canGetHeaders ? '-headers' : '') + '.tar.gz');\n  return {\n    version: version,\n    semver: versionSemver,\n    name: name,\n    baseUrl: baseUrl,\n    tarballUrl: tarballUrl,\n    shasumsUrl: url.resolve(baseUrl, 'SHASUMS256.txt'),\n    versionDir: (name !== 'node' ? name + '-' : '') + version,\n    libUrl32: libUrl32,\n    libUrl64: libUrl64,\n    libPath32: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl32).path)),\n    libPath64: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl64).path))\n  };\n}\nfunction normalizePath(p) {\n  return path.normalize(p).replace(/\\\\/g, '/');\n}\nfunction resolveLibUrl(name, defaultUrl, arch, versionMajor) {\n  var base = url.resolve(defaultUrl, './'),\n    hasLibUrl = bitsre.test(defaultUrl) || versionMajor === 3 && bitsreV3.test(defaultUrl);\n  if (!hasLibUrl) {\n    // let's assume it's a baseUrl then\n    if (versionMajor >= 1) return url.resolve(base, 'win-' + arch + '/' + name + '.lib');\n    // prior to io.js@1.0.0 32-bit node.lib lives in /, 64-bit lives in /x64/\n    return url.resolve(base, (arch === 'x64' ? 'x64/' : '') + name + '.lib');\n  }\n\n  // else we have a proper url to a .lib, just make sure it's the right arch\n  return defaultUrl.replace(versionMajor === 3 ? bitsreV3 : bitsre, '/win-' + arch + '/');\n}\nmodule.exports = processRelease;","map":{"version":3,"names":["semver","require","url","path","log","headersTarballRange","bitsre","bitsreV3","processRelease","argv","gyp","defaultVersion","defaultRelease","version","valid","opts","target","versionSemver","parse","overrideDistUrl","disturl","isDefaultVersion","isIojs","name","distBaseUrl","baseUrl","libUrl32","libUrl64","tarballUrl","canGetHeaders","replace","major","process","env","IOJS_ORG_MIRROR","NVM_IOJS_ORG_MIRROR","warn","NODEJS_ORG_MIRROR","NVM_NODEJS_ORG_MIRROR","verbose","headersUrl","resolve","resolveLibUrl","libUrl","shasumsUrl","versionDir","libPath32","normalizePath","relative","libPath64","satisfies","p","normalize","defaultUrl","arch","versionMajor","base","hasLibUrl","test","module","exports"],"sources":["/Users/lieo/diabetes/CUT2DMTest/node_modules/node-gyp/lib/process-release.js"],"sourcesContent":["var semver = require('semver')\n  , url = require('url')\n  , path = require('path')\n  , log = require('npmlog')\n\n    // versions where -headers.tar.gz started shipping\n  , headersTarballRange = '>= 3.0.0 || ~0.12.10 || ~0.10.42'\n  , bitsre = /\\/win-(x86|x64)\\//\n  , bitsreV3 = /\\/win-(x86|ia32|x64)\\// // io.js v3.x.x shipped with \"ia32\" but should\n                                        // have been \"x86\"\n\n// Captures all the logic required to determine download URLs, local directory and \n// file names. Inputs come from command-line switches (--target, --dist-url),\n// `process.version` and `process.release` where it exists.\nfunction processRelease (argv, gyp, defaultVersion, defaultRelease) {\n  var version = (semver.valid(argv[0]) && argv[0]) || gyp.opts.target || defaultVersion\n    , versionSemver = semver.parse(version)\n    , overrideDistUrl = gyp.opts['dist-url'] || gyp.opts.disturl\n    , isDefaultVersion\n    , isIojs\n    , name\n    , distBaseUrl\n    , baseUrl\n    , libUrl32\n    , libUrl64\n    , tarballUrl\n    , canGetHeaders\n\n  if (!versionSemver) {\n    // not a valid semver string, nothing we can do\n    return { version: version }\n  }\n  // flatten version into String\n  version = versionSemver.version\n\n  // defaultVersion should come from process.version so ought to be valid semver\n  isDefaultVersion = version === semver.parse(defaultVersion).version\n\n  // can't use process.release if we're using --target=x.y.z\n  if (!isDefaultVersion)\n    defaultRelease = null\n\n  if (defaultRelease) {\n    // v3 onward, has process.release\n    name = defaultRelease.name.replace(/io\\.js/, 'iojs') // remove the '.' for directory naming purposes\n    isIojs = name === 'iojs'\n  } else {\n    // old node or alternative --target=\n    // semver.satisfies() doesn't like prerelease tags so test major directly\n    isIojs = versionSemver.major >= 1 && versionSemver.major < 4\n    name = isIojs ? 'iojs' : 'node'\n  }\n\n  // check for the nvm.sh standard mirror env variables\n  if (!overrideDistUrl) {\n    if (isIojs) {\n      if (process.env.IOJS_ORG_MIRROR) {\n        overrideDistUrl = process.env.IOJS_ORG_MIRROR\n      } else if (process.env.NVM_IOJS_ORG_MIRROR) {// remove on next semver-major\n        overrideDistUrl = process.env.NVM_IOJS_ORG_MIRROR\n        log.warn('download',\n            'NVM_IOJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, ' +\n            'please use IOJS_ORG_MIRROR')\n      }\n    } else {\n      if (process.env.NODEJS_ORG_MIRROR) {\n        overrideDistUrl = process.env.NODEJS_ORG_MIRROR\n      } else if (process.env.NVM_NODEJS_ORG_MIRROR) {// remove on next semver-major\n        overrideDistUrl = process.env.NVM_NODEJS_ORG_MIRROR\n        log.warn('download',\n            'NVM_NODEJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, ' +\n            'please use NODEJS_ORG_MIRROR')\n      }\n    }\n  }\n\n  if (overrideDistUrl)\n    log.verbose('download', 'using dist-url', overrideDistUrl)\n\n  if (overrideDistUrl)\n    distBaseUrl = overrideDistUrl.replace(/\\/+$/, '')\n  else\n    distBaseUrl = isIojs ? 'https://iojs.org/download/release' : 'https://nodejs.org/dist'\n  distBaseUrl += '/v' + version + '/'\n\n  // new style, based on process.release so we have a lot of the data we need\n  if (defaultRelease && defaultRelease.headersUrl && !overrideDistUrl) {\n    baseUrl = url.resolve(defaultRelease.headersUrl, './')\n    libUrl32 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'x86', versionSemver.major)\n    libUrl64 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'x64', versionSemver.major)\n\n    return {\n      version: version,\n      semver: versionSemver,\n      name: name,\n      baseUrl: baseUrl,\n      tarballUrl: defaultRelease.headersUrl,\n      shasumsUrl: url.resolve(baseUrl, 'SHASUMS256.txt'),\n      versionDir: (name !== 'node' ? name + '-' : '') + version,\n      libUrl32: libUrl32,\n      libUrl64: libUrl64,\n      libPath32: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl32).path)),\n      libPath64: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl64).path))\n    }\n  }\n\n  // older versions without process.release are captured here and we have to make\n  // a lot of assumptions, additionally if you --target=x.y.z then we can't use the\n  // current process.release\n\n  baseUrl = distBaseUrl\n  libUrl32 = resolveLibUrl(name, baseUrl, 'x86', versionSemver.major)\n  libUrl64 = resolveLibUrl(name, baseUrl, 'x64', versionSemver.major)\n  // making the bold assumption that anything with a version number >3.0.0 will\n  // have a *-headers.tar.gz file in its dist location, even some frankenstein\n  // custom version\n  canGetHeaders = semver.satisfies(versionSemver, headersTarballRange)\n  tarballUrl = url.resolve(baseUrl, name + '-v' + version + (canGetHeaders ? '-headers' : '') + '.tar.gz')\n\n  return {\n    version: version,\n    semver: versionSemver,\n    name: name,\n    baseUrl: baseUrl,\n    tarballUrl: tarballUrl,\n    shasumsUrl: url.resolve(baseUrl, 'SHASUMS256.txt'),\n    versionDir: (name !== 'node' ? name + '-' : '') + version,\n    libUrl32: libUrl32,\n    libUrl64: libUrl64,\n    libPath32: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl32).path)),\n    libPath64: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl64).path))\n  }\n}\n\nfunction normalizePath (p) {\n  return path.normalize(p).replace(/\\\\/g, '/')\n}\n\nfunction resolveLibUrl (name, defaultUrl, arch, versionMajor) {\n  var base = url.resolve(defaultUrl, './')\n    , hasLibUrl = bitsre.test(defaultUrl) || (versionMajor === 3 && bitsreV3.test(defaultUrl))\n\n  if (!hasLibUrl) {\n    // let's assume it's a baseUrl then\n    if (versionMajor >= 1)\n      return url.resolve(base, 'win-' + arch  +'/' + name + '.lib')\n    // prior to io.js@1.0.0 32-bit node.lib lives in /, 64-bit lives in /x64/\n    return url.resolve(base, (arch === 'x64' ? 'x64/' : '') + name + '.lib')\n  }\n\n  // else we have a proper url to a .lib, just make sure it's the right arch\n  return defaultUrl.replace(versionMajor === 3 ? bitsreV3 : bitsre, '/win-' + arch + '/')\n}\n\nmodule.exports = processRelease\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}