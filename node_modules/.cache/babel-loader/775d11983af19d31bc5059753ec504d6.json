{"ast":null,"code":"// An Entry consisting of:\n//\n// \"%d %s=%s\\n\", <length>, <keyword>, <value>\n//\n// The length is a decimal number, and includes itself and the \\n\n// \\0 does not terminate anything.  Only the length terminates the string.\n// Numeric values are decimal strings.\n\nmodule.exports = ExtendedHeader;\nvar Entry = require(\"./entry.js\"),\n  inherits = require(\"inherits\"),\n  tar = require(\"../tar.js\"),\n  numeric = tar.numeric,\n  keyTrans = {\n    \"SCHILY.dev\": \"dev\",\n    \"SCHILY.ino\": \"ino\",\n    \"SCHILY.nlink\": \"nlink\"\n  };\nfunction ExtendedHeader() {\n  Entry.apply(this, arguments);\n  this.on(\"data\", this._parse);\n  this.fields = {};\n  this._position = 0;\n  this._fieldPos = 0;\n  this._state = SIZE;\n  this._sizeBuf = [];\n  this._keyBuf = [];\n  this._valBuf = [];\n  this._size = -1;\n  this._key = \"\";\n}\ninherits(ExtendedHeader, Entry);\nExtendedHeader.prototype._parse = parse;\nvar s = 0,\n  states = ExtendedHeader.states = {},\n  SIZE = states.SIZE = s++,\n  KEY = states.KEY = s++,\n  VAL = states.VAL = s++,\n  ERR = states.ERR = s++;\nObject.keys(states).forEach(function (s) {\n  states[states[s]] = states[s];\n});\nstates[s] = null;\n\n// char code values for comparison\nvar _0 = \"0\".charCodeAt(0),\n  _9 = \"9\".charCodeAt(0),\n  point = \".\".charCodeAt(0),\n  a = \"a\".charCodeAt(0),\n  Z = \"Z\".charCodeAt(0),\n  a = \"a\".charCodeAt(0),\n  z = \"z\".charCodeAt(0),\n  space = \" \".charCodeAt(0),\n  eq = \"=\".charCodeAt(0),\n  cr = \"\\n\".charCodeAt(0);\nfunction parse(c) {\n  if (this._state === ERR) return;\n  for (var i = 0, l = c.length; i < l; this._position++, this._fieldPos++, i++) {\n    // console.error(\"top of loop, size=\"+this._size)\n\n    var b = c[i];\n    if (this._size >= 0 && this._fieldPos > this._size) {\n      error(this, \"field exceeds length=\" + this._size);\n      return;\n    }\n    switch (this._state) {\n      case ERR:\n        return;\n      case SIZE:\n        // console.error(\"parsing size, b=%d, rest=%j\", b, c.slice(i).toString())\n        if (b === space) {\n          this._state = KEY;\n          // this._fieldPos = this._sizeBuf.length\n          this._size = parseInt(new Buffer(this._sizeBuf).toString(), 10);\n          this._sizeBuf.length = 0;\n          continue;\n        }\n        if (b < _0 || b > _9) {\n          error(this, \"expected [\" + _0 + \"..\" + _9 + \"], got \" + b);\n          return;\n        }\n        this._sizeBuf.push(b);\n        continue;\n      case KEY:\n        // can be any char except =, not > size.\n        if (b === eq) {\n          this._state = VAL;\n          this._key = new Buffer(this._keyBuf).toString();\n          if (keyTrans[this._key]) this._key = keyTrans[this._key];\n          this._keyBuf.length = 0;\n          continue;\n        }\n        this._keyBuf.push(b);\n        continue;\n      case VAL:\n        // field must end with cr\n        if (this._fieldPos === this._size - 1) {\n          // console.error(\"finished with \"+this._key)\n          if (b !== cr) {\n            error(this, \"expected \\\\n at end of field\");\n            return;\n          }\n          var val = new Buffer(this._valBuf).toString();\n          if (numeric[this._key]) {\n            val = parseFloat(val);\n          }\n          this.fields[this._key] = val;\n          this._valBuf.length = 0;\n          this._state = SIZE;\n          this._size = -1;\n          this._fieldPos = -1;\n          continue;\n        }\n        this._valBuf.push(b);\n        continue;\n    }\n  }\n}\nfunction error(me, msg) {\n  msg = \"invalid header: \" + msg + \"\\nposition=\" + me._position + \"\\nfield position=\" + me._fieldPos;\n  me.error(msg);\n  me.state = ERR;\n}","map":{"version":3,"names":["module","exports","ExtendedHeader","Entry","require","inherits","tar","numeric","keyTrans","apply","arguments","on","_parse","fields","_position","_fieldPos","_state","SIZE","_sizeBuf","_keyBuf","_valBuf","_size","_key","prototype","parse","s","states","KEY","VAL","ERR","Object","keys","forEach","_0","charCodeAt","_9","point","a","Z","z","space","eq","cr","c","i","l","length","b","error","parseInt","Buffer","toString","push","val","parseFloat","me","msg","state"],"sources":["/Users/lieo/diabetes/CUT2DMTest/node_modules/node-gyp/node_modules/tar/lib/extended-header.js"],"sourcesContent":["// An Entry consisting of:\n//\n// \"%d %s=%s\\n\", <length>, <keyword>, <value>\n//\n// The length is a decimal number, and includes itself and the \\n\n// \\0 does not terminate anything.  Only the length terminates the string.\n// Numeric values are decimal strings.\n\nmodule.exports = ExtendedHeader\n\nvar Entry = require(\"./entry.js\")\n  , inherits = require(\"inherits\")\n  , tar = require(\"../tar.js\")\n  , numeric = tar.numeric\n  , keyTrans = { \"SCHILY.dev\": \"dev\"\n               , \"SCHILY.ino\": \"ino\"\n               , \"SCHILY.nlink\": \"nlink\" }\n\nfunction ExtendedHeader () {\n  Entry.apply(this, arguments)\n  this.on(\"data\", this._parse)\n  this.fields = {}\n  this._position = 0\n  this._fieldPos = 0\n  this._state = SIZE\n  this._sizeBuf = []\n  this._keyBuf = []\n  this._valBuf = []\n  this._size = -1\n  this._key = \"\"\n}\n\ninherits(ExtendedHeader, Entry)\nExtendedHeader.prototype._parse = parse\n\nvar s = 0\n  , states = ExtendedHeader.states = {}\n  , SIZE = states.SIZE = s++\n  , KEY  = states.KEY  = s++\n  , VAL  = states.VAL  = s++\n  , ERR  = states.ERR  = s++\n\nObject.keys(states).forEach(function (s) {\n  states[states[s]] = states[s]\n})\n\nstates[s] = null\n\n// char code values for comparison\nvar _0 = \"0\".charCodeAt(0)\n  , _9 = \"9\".charCodeAt(0)\n  , point = \".\".charCodeAt(0)\n  , a = \"a\".charCodeAt(0)\n  , Z = \"Z\".charCodeAt(0)\n  , a = \"a\".charCodeAt(0)\n  , z = \"z\".charCodeAt(0)\n  , space = \" \".charCodeAt(0)\n  , eq = \"=\".charCodeAt(0)\n  , cr = \"\\n\".charCodeAt(0)\n\nfunction parse (c) {\n  if (this._state === ERR) return\n\n  for ( var i = 0, l = c.length\n      ; i < l\n      ; this._position++, this._fieldPos++, i++) {\n    // console.error(\"top of loop, size=\"+this._size)\n\n    var b = c[i]\n\n    if (this._size >= 0 && this._fieldPos > this._size) {\n      error(this, \"field exceeds length=\"+this._size)\n      return\n    }\n\n    switch (this._state) {\n      case ERR: return\n\n      case SIZE:\n        // console.error(\"parsing size, b=%d, rest=%j\", b, c.slice(i).toString())\n        if (b === space) {\n          this._state = KEY\n          // this._fieldPos = this._sizeBuf.length\n          this._size = parseInt(new Buffer(this._sizeBuf).toString(), 10)\n          this._sizeBuf.length = 0\n          continue\n        }\n        if (b < _0 || b > _9) {\n          error(this, \"expected [\" + _0 + \"..\" + _9 + \"], got \" + b)\n          return\n        }\n        this._sizeBuf.push(b)\n        continue\n\n      case KEY:\n        // can be any char except =, not > size.\n        if (b === eq) {\n          this._state = VAL\n          this._key = new Buffer(this._keyBuf).toString()\n          if (keyTrans[this._key]) this._key = keyTrans[this._key]\n          this._keyBuf.length = 0\n          continue\n        }\n        this._keyBuf.push(b)\n        continue\n\n      case VAL:\n        // field must end with cr\n        if (this._fieldPos === this._size - 1) {\n          // console.error(\"finished with \"+this._key)\n          if (b !== cr) {\n            error(this, \"expected \\\\n at end of field\")\n            return\n          }\n          var val = new Buffer(this._valBuf).toString()\n          if (numeric[this._key]) {\n            val = parseFloat(val)\n          }\n          this.fields[this._key] = val\n\n          this._valBuf.length = 0\n          this._state = SIZE\n          this._size = -1\n          this._fieldPos = -1\n          continue\n        }\n        this._valBuf.push(b)\n        continue\n    }\n  }\n}\n\nfunction error (me, msg) {\n  msg = \"invalid header: \" + msg\n      + \"\\nposition=\" + me._position\n      + \"\\nfield position=\" + me._fieldPos\n\n  me.error(msg)\n  me.state = ERR\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}