{"code":"(this.webpackJsonpdemo=this.webpackJsonpdemo||[]).push([[0],{107:function(e,t,n){\"use strict\";n.r(t),function(e){var t=n(52),r=n(106);var i=n(12);n(53).User;i.connect(Object({NODE_ENV:\"production\",PUBLIC_URL:\"/seantanys/Diabetes-Management-Web-Applicatio\",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0}).MONGO_URL||\"mongodb://127.0.0.1\",{useNewUrlParser:!0,useUnifiedTopology:!0,dbName:\"CUT2DM\"}).then((function(){console.log(\"Connection success.\")})).catch((function(e){console.log(\"Connection to Mongo failed.\")}));var o=i.connection.on(\"error\",(function(t){console.error(t),e.exit(1)}));o.once(\"open\",Object(r.a)(Object(t.a)().mark((function e(){return Object(t.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:console.log(\"Mongo connection started on \".concat(o.host,\":\").concat(o.port));case 1:case\"end\":return e.stop()}}),e)})))),n(212),n(213),n(214),n(215),n(53)}.call(this,n(3))},113:function(e,t){},115:function(e,t){},127:function(e,t){},129:function(e,t){},154:function(e,t){},156:function(e,t){},157:function(e,t){},162:function(e,t){},164:function(e,t){},183:function(e,t){},195:function(e,t){},198:function(e,t){},212:function(e,t,n){var r=n(12),i=n(105),o=new r.Schema({first_name:{type:String,required:!0},last_name:{type:String,required:!0},screen_name:{type:String,required:!0},dob:{type:Date,required:!0},bio:{type:String,required:!0},engagement_rate:{type:Number,default:0,required:!0},clinicianId:{type:String,required:!1},supportMessage:{type:String,default:\"\"},measurements:{bcg:{minimum:Number,maximum:Number},weight:{minimum:Number,maximum:Number},insulin:{minimum:Number,maximum:Number},exercise:{minimum:Number,maximum:Number},required:!1}});o.methods.verifyPassword=function(e,t){i.compare(e,this.password,(function(e,n){t(e,n)}))};o.pre(\"save\",(function(e){var t=this;if(!t.isModified(\"password\"))return e();i.hash(t.password,10,(function(n,r){if(n)return e(n);t.password=r,e()}))}));var a=r.model(\"Patient\",o);e.exports={Patient:a}},213:function(e,t,n){var r=n(12),i=new r.Schema({type:{type:String,required:[!0,\"input is required\"]},patientId:{type:String,required:!0},value:{type:Number,required:[!0,\"value is required\"]},date:{type:Date,default:Date.now},comment:{type:String,default:\"\"}}),o=r.model(\"Measurement\",i);e.exports={Measurement:o}},214:function(e,t,n){var r=n(12),i=new r.Schema({patientId:{type:String,required:!0},clinicianId:{type:String,required:!0},date:{type:Date,required:!0},message:{type:String,required:!0}}),o=r.model(\"Message\",i);e.exports={Message:o}},215:function(e,t,n){var r=n(12),i=new r.Schema({patientId:{type:String,required:!0},date:{type:Date,default:Date.now},comment:{type:String,required:!0},color:{type:String,default:\"dark-yellow\"}}),o=r.model(\"Note\",i);e.exports={Note:o}},53:function(e,t,n){var r=n(12),i=n(109),o=n(105),a=new r.Schema({username:{type:String,required:!0},password:{type:String,required:!0},join_date:{type:Date,default:Date.now},role:{type:String,required:!0},role_id:{type:String,required:!0},theme:{type:String,default:\"default\",required:!0}});a.plugin(i),a.methods.verifyPassword=function(e,t){o.compare(e,this.password,(function(e,n){t(e,n)}))};a.pre(\"save\",(function(e){var t=this;if(!t.isModified(\"password\"))return e();o.hash(t.password,10,(function(n,r){if(n)return e(n);t.password=r,e()}))}));var u=r.model(\"User\",a);e.exports={User:u}}},[[107,1,2]]]);","name":"static/js/main.f945f66f.chunk.js","map":{"version":3,"names":["this","push","module","__webpack_exports__","__webpack_require__","r","process","_Users_lieo_diabetes_CUT2DMTest_node_modules_babel_runtime_helpers_esm_regeneratorRuntime_js__WEBPACK_IMPORTED_MODULE_0__","_Users_lieo_diabetes_CUT2DMTest_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_1__","mongoose","User","connect","Object","NODE_ENV","PUBLIC_URL","WDS_SOCKET_HOST","undefined","WDS_SOCKET_PATH","WDS_SOCKET_PORT","FAST_REFRESH","MONGO_URL","useNewUrlParser","useUnifiedTopology","dbName","then","console","log","catch","err","db","connection","on","error","exit","once","mark","_callee","wrap","_context","prev","next","concat","host","port","stop","call","exports","bcrypt","patientSchema","Schema","first_name","type","String","required","last_name","screen_name","dob","Date","bio","engagement_rate","Number","default","clinicianId","supportMessage","measurements","bcg","minimum","maximum","weight","insulin","exercise","methods","verifyPassword","password","callback","compare","valid","pre","user","isModified","hash","Patient","model","measurementSchema","patientId","value","date","now","comment","Measurement","messageSchema","message","Message","noteSchema","color","Note","passportLocalMongoose","userSchema","username","join_date","role","role_id","theme","plugin"],"sources":["static/js/main.f945f66f.chunk.js"],"mappings":"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"},"input":"(this[\"webpackJsonpdemo\"] = this[\"webpackJsonpdemo\"] || []).push([[0],{\n\n/***/ 107:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(process) {/* harmony import */ var _Users_lieo_diabetes_CUT2DMTest_node_modules_babel_runtime_helpers_esm_regeneratorRuntime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52);\n/* harmony import */ var _Users_lieo_diabetes_CUT2DMTest_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(106);\n// Load envioronment variables\nif(false){}// setup Mongoose\nvar mongoose=__webpack_require__(12);var _require=__webpack_require__(53),User=_require.User;// Connect to your mongo database using the MONGO_URL environment variable.\n// Locally, MONGO_URL will be loaded by dotenv from .env.\nmongoose.connect(Object({\"NODE_ENV\":\"production\",\"PUBLIC_URL\":\"/seantanys/Diabetes-Management-Web-Applicatio\",\"WDS_SOCKET_HOST\":undefined,\"WDS_SOCKET_PATH\":undefined,\"WDS_SOCKET_PORT\":undefined,\"FAST_REFRESH\":true}).MONGO_URL||'mongodb://127.0.0.1',{useNewUrlParser:true,useUnifiedTopology:true,dbName:'CUT2DM'}).then(function(){console.log(\"Connection success.\");}).catch(function(err){console.log(\"Connection to Mongo failed.\");});// Exit on error\nvar db=mongoose.connection.on('error',function(err){console.error(err);process.exit(1);});// Log to console once the database is open\ndb.once('open',/*#__PURE__*/Object(_Users_lieo_diabetes_CUT2DMTest_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(/*#__PURE__*/Object(_Users_lieo_diabetes_CUT2DMTest_node_modules_babel_runtime_helpers_esm_regeneratorRuntime_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])().mark(function _callee(){return Object(_Users_lieo_diabetes_CUT2DMTest_node_modules_babel_runtime_helpers_esm_regeneratorRuntime_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:console.log(\"Mongo connection started on \".concat(db.host,\":\").concat(db.port));case 1:case\"end\":return _context.stop();}},_callee);})));// create a user a new user\n//var testUser = new User({\n//username: \"lieo@gmail.com\",\n//password: \"Lieo1234\",\n//role: \"patient\",\n//role_id: \"63d03d13120621d12404bccd\",\n//  clinicianId: \"63d03826120621d12404bcc5\"\n//});\n// save user to database\n//testUser.save(function (err) {\n//  if (err) throw err;\n//})\n__webpack_require__(212);__webpack_require__(213);__webpack_require__(214);__webpack_require__(215);__webpack_require__(53);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))\n\n/***/ }),\n\n/***/ 113:\n/***/ (function(module, exports) {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ 115:\n/***/ (function(module, exports) {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ 127:\n/***/ (function(module, exports) {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ 129:\n/***/ (function(module, exports) {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ 154:\n/***/ (function(module, exports) {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ 156:\n/***/ (function(module, exports) {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ 157:\n/***/ (function(module, exports) {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ 162:\n/***/ (function(module, exports) {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ 164:\n/***/ (function(module, exports) {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ 183:\n/***/ (function(module, exports) {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ 195:\n/***/ (function(module, exports) {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ 198:\n/***/ (function(module, exports) {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ 212:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar mongoose=__webpack_require__(12);var bcrypt=__webpack_require__(105);// define the patientSchema\nvar patientSchema=new mongoose.Schema({first_name:{type:String,required:true},last_name:{type:String,required:true},screen_name:{type:String,required:true},dob:{type:Date,required:true},bio:{type:String,required:true},engagement_rate:{type:Number,default:0,required:true},clinicianId:{type:String,required:false},supportMessage:{type:String,default:\"\"},measurements:{bcg:{minimum:Number,maximum:Number},weight:{minimum:Number,maximum:Number},insulin:{minimum:Number,maximum:Number},exercise:{minimum:Number,maximum:Number},required:false}});patientSchema.methods.verifyPassword=function(password,callback){bcrypt.compare(password,this.password,function(err,valid){callback(err,valid);});};var SALT_FACTOR=10;// hash password before saving\npatientSchema.pre('save',function save(next){var user=this;// go to next if password field has not been modified\nif(!user.isModified('password')){return next();}// auto-generate salt/hash\nbcrypt.hash(user.password,SALT_FACTOR,function(err,hash){if(err){return next(err);}//replace password with hash\nuser.password=hash;next();});});// compile the measurementSchemas into Model\nvar Patient=mongoose.model('Patient',patientSchema);module.exports={Patient:Patient};\n\n/***/ }),\n\n/***/ 213:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar mongoose=__webpack_require__(12);// define the measurementSchema\nvar measurementSchema=new mongoose.Schema({type:{type:String,required:[true,\"input is required\"]},patientId:{type:String,required:true},value:{type:Number,required:[true,\"value is required\"]},date:{type:Date,default:Date.now},comment:{type:String,default:\"\"}});// compile the measurementSchemas into Model\nvar Measurement=mongoose.model('Measurement',measurementSchema);module.exports={Measurement:Measurement};\n\n/***/ }),\n\n/***/ 214:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar mongoose=__webpack_require__(12);// define the messageSchema\nvar messageSchema=new mongoose.Schema({patientId:{type:String,required:true},clinicianId:{type:String,required:true},date:{type:Date,required:true},message:{type:String,required:true}});// compile the messageSchema into Model\nvar Message=mongoose.model('Message',messageSchema);module.exports={Message:Message};\n\n/***/ }),\n\n/***/ 215:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar mongoose=__webpack_require__(12);// define the noteSchema\nvar noteSchema=new mongoose.Schema({patientId:{type:String,required:true},date:{type:Date,default:Date.now},comment:{type:String,required:true},color:{type:String,default:\"dark-yellow\"}});// compile the noteSchemas into Model\nvar Note=mongoose.model('Note',noteSchema);module.exports={Note:Note};\n\n/***/ }),\n\n/***/ 53:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar mongoose=__webpack_require__(12);var passportLocalMongoose=__webpack_require__(109);var bcrypt=__webpack_require__(105);// define the userSchema\nvar userSchema=new mongoose.Schema({username:{type:String,required:true},password:{type:String,required:true},join_date:{type:Date,default:Date.now},role:{type:String,required:true},role_id:{type:String,required:true},theme:{type:String,default:'default',required:true}});userSchema.plugin(passportLocalMongoose);userSchema.methods.verifyPassword=function(password,callback){bcrypt.compare(password,this.password,function(err,valid){callback(err,valid);});};var SALT_FACTOR=10;// hash password before saving\nuserSchema.pre('save',function save(next){var user=this;// go to next if password field has not been modified\nif(!user.isModified('password')){return next();}// auto-generate salt/hash\nbcrypt.hash(user.password,SALT_FACTOR,function(err,hash){if(err){return next(err);}//replace password with hash\nuser.password=hash;next();});});// compile the measurementSchemas into Model\nvar User=mongoose.model('User',userSchema);module.exports={User:User};\n\n/***/ })\n\n},[[107,1,2]]]);","inputSourceMap":{"version":3,"sources":["/Users/lieo/diabetes/CUT2DMTest/src/index.js","ignored /Users/lieo/diabetes/CUT2DMTest/node_modules/readable-stream/lib util","ignored /Users/lieo/diabetes/CUT2DMTest/node_modules/readable-stream/lib/internal/streams util","ignored /Users/lieo/diabetes/CUT2DMTest/node_modules/stream-browserify/node_modules/readable-stream/lib util","ignored /Users/lieo/diabetes/CUT2DMTest/node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams util","ignored /Users/lieo/diabetes/CUT2DMTest/node_modules/diffie-hellman/node_modules/bn.js/lib buffer","ignored /Users/lieo/diabetes/CUT2DMTest/node_modules/miller-rabin/node_modules/bn.js/lib buffer","ignored /Users/lieo/diabetes/CUT2DMTest/node_modules/brorand crypto","ignored /Users/lieo/diabetes/CUT2DMTest/node_modules/bn.js/lib buffer","ignored /Users/lieo/diabetes/CUT2DMTest/node_modules/elliptic/node_modules/bn.js/lib buffer","ignored /Users/lieo/diabetes/CUT2DMTest/node_modules/asn1.js/node_modules/bn.js/lib buffer","ignored /Users/lieo/diabetes/CUT2DMTest/node_modules/create-ecdh/node_modules/bn.js/lib buffer","ignored /Users/lieo/diabetes/CUT2DMTest/node_modules/public-encrypt/node_modules/bn.js/lib buffer","/Users/lieo/diabetes/CUT2DMTest/src/patient.js","/Users/lieo/diabetes/CUT2DMTest/src/measurement.js","/Users/lieo/diabetes/CUT2DMTest/src/message.js","/Users/lieo/diabetes/CUT2DMTest/src/note.js","/Users/lieo/diabetes/CUT2DMTest/src/user.js"],"names":["process","mongoose","require","User","connect","MONGO_URL","useNewUrlParser","useUnifiedTopology","dbName","then","console","log","catch","err","db","connection","on","error","exit","once","host","port","bcrypt","patientSchema","Schema","first_name","type","String","required","last_name","screen_name","dob","Date","bio","engagement_rate","Number","default","clinicianId","supportMessage","measurements","bcg","minimum","maximum","weight","insulin","exercise","methods","verifyPassword","password","callback","compare","valid","SALT_FACTOR","pre","save","next","user","isModified","hash","Patient","model","module","exports","measurementSchema","patientId","value","date","now","comment","Measurement","messageSchema","message","Message","noteSchema","color","Note","passportLocalMongoose","userSchema","username","join_date","role","role_id","theme","plugin"],"mappings":"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","file":"x","sourcesContent":["// Load envioronment variables\nif (process.env.NODE_ENV !== 'production') {\n    require('dotenv').config()\n}\n\n// setup Mongoose\nconst mongoose = require('mongoose')\nvar { User } = require('./user')\n// Connect to your mongo database using the MONGO_URL environment variable.\n// Locally, MONGO_URL will be loaded by dotenv from .env.\nmongoose.connect(process.env.MONGO_URL || 'mongodb://127.0.0.1', {\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n    dbName: 'CUT2DM'\n})\n    .then(() => {\n        console.log(`Connection success.`)\n    })\n    .catch(err => {\n        console.log(\"Connection to Mongo failed.\")\n    })\n\n// Exit on error\nconst db = mongoose.connection.on('error', err => {\n    console.error(err);\n    process.exit(1)\n})\n\n// Log to console once the database is open\ndb.once('open', async () => {\n    console.log(`Mongo connection started on ${db.host}:${db.port}`)\n})\n\n// create a user a new user\n//var testUser = new User({\n    //username: \"lieo@gmail.com\",\n    //password: \"Lieo1234\",\n    //role: \"patient\",\n    //role_id: \"63d03d13120621d12404bccd\",\n  //  clinicianId: \"63d03826120621d12404bcc5\"\n//});\n\n// save user to database\n//testUser.save(function (err) {\n  //  if (err) throw err;\n//})\nrequire('./patient')\nrequire('./measurement')\nrequire('./message')\nrequire('./note')\nrequire('./user')\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","const mongoose = require('mongoose')\nconst bcrypt = require('bcryptjs')\n\n// define the patientSchema\nconst patientSchema = new mongoose.Schema({\n    first_name: {type: String, required: true},\n    last_name: {type: String, required: true},\n    screen_name: {type: String, required: true},\n    dob: {type: Date, required: true},\n    bio: {type: String, required: true},\n    engagement_rate: {type: Number, default: 0, required: true},\n    clinicianId: {type: String, required: false},\n    supportMessage : {type: String, default:\"\"},\n    measurements: {\n        bcg: {\n            minimum: Number,\n            maximum: Number\n        },\n        weight: {\n            minimum: Number,\n            maximum: Number\n        },\n        insulin: {\n            minimum: Number,\n            maximum: Number\n        },\n        exercise: {\n            minimum: Number,\n            maximum: Number\n        },\n        required: false\n    }\n});\n\npatientSchema.methods.verifyPassword = function (password, callback) {\n    bcrypt.compare(password, this.password, (err, valid) => {\n        callback(err, valid)\n    })\n}\n\nconst SALT_FACTOR = 10\n\n// hash password before saving\npatientSchema.pre('save', function save(next) {\n    const user = this// go to next if password field has not been modified\n    if (!user.isModified('password')) {\n        return next()\n    }\n\n    // auto-generate salt/hash\n    bcrypt.hash(user.password, SALT_FACTOR, (err, hash) => {\n        if (err) {\n            return next(err)\n        }\n        //replace password with hash\n        user.password = hash\n        next()\n    })\n})\n\n// compile the measurementSchemas into Model\nconst Patient = mongoose.model('Patient', patientSchema)\n\nmodule.exports = {Patient}\n","const mongoose = require('mongoose')\n\n// define the measurementSchema\nconst measurementSchema = new mongoose.Schema({\n    type: { type: String, required: [true, \"input is required\"] },\n    patientId: { type: String, required: true },\n    value: { type: Number, required: [true, \"value is required\"] },\n    date: {type: Date, default: Date.now},\n    comment: {type: String, default: \"\"}\n});\n\n// compile the measurementSchemas into Model\nconst Measurement = mongoose.model('Measurement', measurementSchema)\n\nmodule.exports = {Measurement}","const mongoose = require('mongoose')\n\n// define the messageSchema\nconst messageSchema = new mongoose.Schema({\n    patientId: {type: String, required: true},\n    clinicianId: {type: String, required: true},\n    date: {type: Date, required: true},\n    message: {type: String, required: true}\n})\n\n// compile the messageSchema into Model\nconst Message = mongoose.model('Message', messageSchema)\n\nmodule.exports = {Message}","const mongoose = require('mongoose')\n\n// define the noteSchema\nconst noteSchema = new mongoose.Schema({\n    patientId: { type: String, required: true },\n    date: { type: Date, default: Date.now },\n    comment: { type: String, required: true },\n    color: {type: String, default: \"dark-yellow\"}\n});\n\n// compile the noteSchemas into Model\nconst Note = mongoose.model('Note', noteSchema)\n\nmodule.exports = {Note}","const mongoose = require('mongoose')\nvar passportLocalMongoose=require(\"passport-local-mongoose\");\nconst bcrypt = require('bcryptjs')\n\n// define the userSchema\nconst userSchema = new mongoose.Schema({\n    username: {type: String, required: true},\n    password: {type: String, required: true},\n    join_date: {type: Date, default: Date.now},\n    role: {type: String, required: true},\n    role_id: {type: String, required: true},\n    theme: {type: String, default:'default', required: true}\n});\n\nuserSchema.plugin(passportLocalMongoose);\n\nuserSchema.methods.verifyPassword = function (password, callback) {\n    bcrypt.compare(password, this.password, (err, valid) => {\n        callback(err, valid)\n    })\n}\n\nconst SALT_FACTOR = 10\n\n// hash password before saving\nuserSchema.pre('save', function save(next) {\n    const user = this// go to next if password field has not been modified\n    if (!user.isModified('password')) {\n        return next()\n    }\n\n    // auto-generate salt/hash\n    bcrypt.hash(user.password, SALT_FACTOR, (err, hash) => {\n        if (err) {\n            return next(err)\n        }\n        //replace password with hash\n        user.password = hash\n        next()\n    })\n})\n\n// compile the measurementSchemas into Model\nconst User = mongoose.model('User', userSchema)\n\nmodule.exports = {User}\n"]}}